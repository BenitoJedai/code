<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptCoreLibJava</name>
    </assembly>
    <members>
        <member name="T:java.util.Comparator">
            <summary>
            A comparison function, which imposes a total ordering on some collection of objects. Comparators can be passed to a sort method (such as Collections.sort) to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures (such as TreeSet or TreeMap).
            </summary>
        </member>
        <member name="M:java.util.Comparator.compare(System.Object,System.Object)">
            <summary>
            Compares its two arguments for order.
            </summary>
        </member>
        <member name="M:java.util.Comparator.Equals(System.Object)">
            <summary>
            Indicates whether some other object is "equal to" this Comparator.
            </summary>
        </member>
        <member name="F:ScriptCoreLibJava.BCLImplementation.System.Xml.Linq.__XContainer.InternalPartialElements">
            <summary>
            This is the list of elements which were added to our node.
            
            It may be partial as the actual data is stored in the native dom.
            </summary>
        </member>
        <member name="P:javax.common.runtime.Helper.BuildDateString">
            <summary>
            gets the hard coded build date
            </summary>
        </member>
        <member name="P:javax.common.runtime.Helper.CompilerBuildDateString">
            <summary>
            gets the hard coded compiler build date
            </summary>
        </member>
        <member name="T:javax.common.runtime.types.VariantValue">
            <summary>
            allows to convert seamlessly between long and a hex string
            </summary>
        </member>
        <member name="M:javax.accessibility.Accessible.getAccessibleContext">
            <summary>
            Returns the AccessibleContext associated with this object.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleBundle.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleBundle.toDisplayString">
            <summary>
            Gets localized string describing the key using the default locale.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleBundle.toDisplayString(java.util.Locale)">
            <summary>
            Obtains the key as a localized string.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleBundle.toDisplayString(System.String,java.util.Locale)">
            <summary>
            Obtains the key as a localized string.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleBundle.ToString">
            <summary>
            Gets localized string describing the key using the default locale.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleState.#ctor(System.String)">
            <summary>
            Creates a new AccessibleState using the given locale independent key.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.#ctor">
            <summary>
            Creates a new empty state set.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.#ctor(javax.accessibility.AccessibleState[])">
            <summary>
            Creates a new state with the initial set of states contained in
            the array of states passed in.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.add(javax.accessibility.AccessibleState)">
            <summary>
            Adds a new state to the current state set if it is not already
            present.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.addAll(javax.accessibility.AccessibleState[])">
            <summary>
            Adds all of the states to the existing state set.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.clear">
            <summary>
            Removes all the states from the current state set.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.contains(javax.accessibility.AccessibleState)">
            <summary>
            Checks if the current state is in the state set.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.remove(javax.accessibility.AccessibleState)">
            <summary>
            Removes a state from the current state set.
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.toArray">
            <summary>
            Returns the current state set as an array of AccessibleState
            </summary>
        </member>
        <member name="M:javax.accessibility.AccessibleStateSet.ToString">
            <summary>
            Creates a localized String representing all the states in the set
            using the default locale.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.#ctor">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.destroy">
            <summary>
            Called by the servlet container to indicate to a servlet that the
            servlet is being taken out of service.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getInitParameter(System.String)">
            <summary>
            Returns a <code>String</code> containing the value of the named
            initialization parameter, or <code>null</code> if the parameter does
            not exist.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getInitParameterNames">
            <summary>
            Returns the names of the servlet's initialization parameters
            as an <code>Enumeration</code> of <code>String</code> objects,
            or an empty <code>Enumeration</code> if the servlet has no
            initialization parameters.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getServletConfig">
            <summary>
            Returns this servlet's <A HREF="../../javax/servlet/ServletConfig.html" title="interface in javax.servlet"><CODE>ServletConfig</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getServletContext">
            <summary>
            Returns a reference to the <A HREF="../../javax/servlet/ServletContext.html" title="interface in javax.servlet"><CODE>ServletContext</CODE></A> in which this servlet
            is running.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getServletInfo">
            <summary>
            Returns information about the servlet, such as
            author, version, and copyright.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.getServletName">
            <summary>
            Returns the name of this servlet instance.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.init">
            <summary>
            A convenience method which can be overridden so that there's no need
            to call <code>super.init(config)</code>.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.init(javax.servlet.ServletConfig)">
            <summary>
            Called by the servlet container to indicate to a servlet that the
            servlet is being placed into service.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.log(System.String)">
            <summary>
            Writes the specified message to a servlet log file, prepended by the
            servlet's name.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.log(System.String,java.lang.Throwable)">
            <summary>
            Writes an explanatory message and a stack trace
            for a given <code>Throwable</code> exception
            to the servlet log file, prepended by the servlet's name.
            </summary>
        </member>
        <member name="M:javax.servlet.GenericServlet.service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)">
            <summary>
            Called by the servlet container to allow the servlet to respond to
            a request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.#ctor(System.String,System.String)">
            <summary>
            Constructs a cookie with a specified name and value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.clone">
            <summary>
            Overrides the standard <code>java.lang.Object.clone</code>
            method to return a copy of this cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getComment">
            <summary>
            Returns the comment describing the purpose of this cookie, or
            <code>null</code> if the cookie has no comment.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getDomain">
            <summary>
            Returns the domain name set for this cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getMaxAge">
            <summary>
            Returns the maximum age of the cookie, specified in seconds,
            By default, <code>-1</code> indicating the cookie will persist
            until browser shutdown.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getName">
            <summary>
            Returns the name of the cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getPath">
            <summary>
            Returns the path on the server
            to which the browser returns this cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getSecure">
            <summary>
            Returns <code>true</code> if the browser is sending cookies
            only over a secure protocol, or <code>false</code> if the
            browser can send cookies using any protocol.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getValue">
            <summary>
            Returns the value of the cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.getVersion">
            <summary>
            Returns the version of the protocol this cookie complies
            with.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setComment(System.String)">
            <summary>
            Specifies a comment that describes a cookie's purpose.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setDomain(System.String)">
            <summary>
            Specifies the domain within which this cookie should be presented.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setMaxAge(System.Int32)">
            <summary>
            Sets the maximum age of the cookie in seconds.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setPath(System.String)">
            <summary>
            Specifies a path for the cookie
            to which the client should return the cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setSecure(System.Boolean)">
            <summary>
            Indicates to the browser whether the cookie should only be sent
            using a secure protocol, such as HTTPS or SSL.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setValue(System.String)">
            <summary>
            Assigns a new value to a cookie after the cookie is created.
            </summary>
        </member>
        <member name="M:javax.servlet.http.Cookie.setVersion(System.Int32)">
            <summary>
            Sets the version of the cookie protocol this cookie complies
            with.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getAttribute(System.String)">
            <summary>
            Returns the object bound with the specified name in this session, or
            <code>null</code> if no object is bound under the name.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getAttributeNames">
            <summary>
            Returns an <code>Enumeration</code> of <code>String</code> objects
            containing the names of all the objects bound to this session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getCreationTime">
            <summary>
            Returns the time when this session was created, measured
            in milliseconds since midnight January 1, 1970 GMT.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getId">
            <summary>
            Returns a string containing the unique identifier assigned
            to this session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getLastAccessedTime">
            <summary>
            Returns the last time the client sent a request associated with
            this session, as the number of milliseconds since midnight
            January 1, 1970 GMT, and marked by the time the container received the request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getMaxInactiveInterval">
            <summary>
            Returns the maximum time interval, in seconds, that
            the servlet container will keep this session open between
            client accesses.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getServletContext">
            <summary>
            Returns the ServletContext to which this session belongs.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getSessionContext">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.1, this method is
            deprecated and has no replacement.
            It will be removed in a future
            version of the Java Servlet API.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getValue(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.2, this method is
            replaced by <A HREF="../../../javax/servlet/http/HttpSession.html#getAttribute(java.lang.String)"><CODE>getAttribute(java.lang.String)</CODE></A>.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.getValueNames">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.2, this method is
            replaced by <A HREF="../../../javax/servlet/http/HttpSession.html#getAttributeNames()"><CODE>getAttributeNames()</CODE></A></I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.invalidate">
            <summary>
            Invalidates this session then unbinds any objects bound
            to it.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.isNew">
            <summary>
            Returns <code>true</code> if the client does not yet know about the
            session or if the client chooses not to join the session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.putValue(System.String,System.Object)">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.2, this method is
            replaced by <A HREF="../../../javax/servlet/http/HttpSession.html#setAttribute(java.lang.String, java.lang.Object)"><CODE>setAttribute(java.lang.String, java.lang.Object)</CODE></A></I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.removeAttribute(System.String)">
            <summary>
            Removes the object bound with the specified name from
            this session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.removeValue(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.2, this method is
            replaced by <A HREF="../../../javax/servlet/http/HttpSession.html#removeAttribute(java.lang.String)"><CODE>removeAttribute(java.lang.String)</CODE></A></I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.setAttribute(System.String,System.Object)">
            <summary>
            Binds an object to this session, using the name specified.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSession.setMaxInactiveInterval(System.Int32)">
            <summary>
            Specifies the time, in seconds, between client requests before the
            servlet container will invalidate this session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSessionContext.getIds">
            <summary>
            <B>Deprecated.</B> <I>As of Java Servlet API 2.1 with
            no replacement. This method must return
            an empty <code>Enumeration</code> and will be removed
            in a future version of this API.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpSessionContext.getSession(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of Java Servlet API 2.1 with
            no replacement. This method must
            return null and will be removed in
            a future version of this API.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.RequestDispatcher.forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)">
            <summary>
            Forwards a request from
            a servlet to another resource (servlet, JSP file, or
            HTML file) on the server.
            </summary>
        </member>
        <member name="M:javax.servlet.RequestDispatcher.include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)">
            <summary>
            Includes the content of a resource (servlet, JSP page,
            HTML file) in the response.
            </summary>
        </member>
        <member name="M:javax.servlet.Servlet.destroy">
            <summary>
            Called by the servlet container to indicate to a servlet that the
            servlet is being taken out of service.
            </summary>
        </member>
        <member name="M:javax.servlet.Servlet.getServletConfig">
            <summary>
            Returns a <A HREF="../../javax/servlet/ServletConfig.html" title="interface in javax.servlet"><CODE>ServletConfig</CODE></A> object, which contains
            initialization and startup parameters for this servlet.
            </summary>
        </member>
        <member name="M:javax.servlet.Servlet.getServletInfo">
            <summary>
            Returns information about the servlet, such
            as author, version, and copyright.
            </summary>
        </member>
        <member name="M:javax.servlet.Servlet.init(javax.servlet.ServletConfig)">
            <summary>
            Called by the servlet container to indicate to a servlet that the
            servlet is being placed into service.
            </summary>
        </member>
        <member name="M:javax.servlet.Servlet.service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)">
            <summary>
            Called by the servlet container to allow the servlet to respond to
            a request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletConfig.getInitParameter(System.String)">
            <summary>
            Returns a <code>String</code> containing the value of the
            named initialization parameter, or <code>null</code> if
            the parameter does not exist.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletConfig.getInitParameterNames">
            <summary>
            Returns the names of the servlet's initialization parameters
            as an <code>Enumeration</code> of <code>String</code> objects,
            or an empty <code>Enumeration</code> if the servlet has
            no initialization parameters.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletConfig.getServletContext">
            <summary>
            Returns a reference to the <A HREF="../../javax/servlet/ServletContext.html" title="interface in javax.servlet"><CODE>ServletContext</CODE></A> in which the caller
            is executing.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletConfig.getServletName">
            <summary>
            Returns the name of this servlet instance.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getAttribute(System.String)">
            <summary>
            Returns the servlet container attribute with the given name,
            or <code>null</code> if there is no attribute by that name.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getAttributeNames">
            <summary>
            Returns an <code>Enumeration</code> containing the
            attribute names available
            within this servlet context.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getContext(System.String)">
            <summary>
            Returns a <code>ServletContext</code> object that
            corresponds to a specified URL on the server.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getInitParameter(System.String)">
            <summary>
            Returns a <code>String</code> containing the value of the named
            context-wide initialization parameter, or <code>null</code> if the
            parameter does not exist.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getInitParameterNames">
            <summary>
            Returns the names of the context's initialization parameters as an
            <code>Enumeration</code> of <code>String</code> objects, or an
            empty <code>Enumeration</code> if the context has no initialization
            parameters.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getMajorVersion">
            <summary>
            Returns the major version of the Java Servlet API that this
            servlet container supports.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getMimeType(System.String)">
            <summary>
            Returns the MIME type of the specified file, or <code>null</code> if
            the MIME type is not known.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getMinorVersion">
            <summary>
            Returns the minor version of the Servlet API that this
            servlet container supports.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getNamedDispatcher(System.String)">
            <summary>
            Returns a <A HREF="../../javax/servlet/RequestDispatcher.html" title="interface in javax.servlet"><CODE>RequestDispatcher</CODE></A> object that acts
            as a wrapper for the named servlet.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getRealPath(System.String)">
            <summary>
            Returns a <code>String</code> containing the real path
            for a given virtual path.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getRequestDispatcher(System.String)">
            <summary>
            Returns a <A HREF="../../javax/servlet/RequestDispatcher.html" title="interface in javax.servlet"><CODE>RequestDispatcher</CODE></A> object that acts
            as a wrapper for the resource located at the given path.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getResource(System.String)">
            <summary>
            Returns a URL to the resource that is mapped to a specified
            path.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getResourceAsStream(System.String)">
            <summary>
            Returns the resource located at the named path as
            an <code>InputStream</code> object.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getResourcePaths(System.String)">
            <summary>
            Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path
            matches the supplied path argument.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.getServerInfo">
            <summary>
            Returns the name and version of the servlet container on which
            the servlet is running.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.servlet.ServletContext.getServlet(System.String)" -->
        <member name="M:javax.servlet.ServletContext.getServletContextName">
            <summary>
            Returns the name of this web application correponding to this ServletContext as specified in the deployment
            descriptor for this web application by the display-name element.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.servlet.ServletContext.getServletNames" -->
        <!-- Badly formed XML comment ignored for member "M:javax.servlet.ServletContext.getServlets" -->
        <!-- Badly formed XML comment ignored for member "M:javax.servlet.ServletContext.log(java.lang.Exception,System.String)" -->
        <member name="M:javax.servlet.ServletContext.log(System.String)">
            <summary>
            Writes the specified message to a servlet log file, usually
            an event log.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.log(System.String,java.lang.Throwable)">
            <summary>
            Writes an explanatory message and a stack trace
            for a given <code>Throwable</code> exception
            to the servlet log file.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.removeAttribute(System.String)">
            <summary>
            Removes the attribute with the given name from
            the servlet context.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletContext.setAttribute(System.String,System.Object)">
            <summary>
            Binds an object to a given attribute name in this servlet context.
            </summary>
        </member>
        <member name="M:java.io.InputStream.available">
            <summary>
            Returns the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.
            </summary>
        </member>
        <member name="M:java.io.InputStream.close">
            <summary>
            Closes this input stream and releases any system resources associated with the stream.
            </summary>
        </member>
        <member name="M:java.io.InputStream.mark(System.Int32)">
            <summary>
            Marks the current position in this input stream.
            </summary>
        </member>
        <member name="M:java.io.InputStream.markSupported">
            <summary>
            Tests if this input stream supports the <code>mark</code> and <code>reset</code> methods.
            </summary>
        </member>
        <member name="M:java.io.InputStream.read">
            <summary>
            Reads the next sbyte of data from the input stream.
            </summary>
        </member>
        <member name="M:java.io.InputStream.read(System.SByte[])">
            <summary>
            Reads some number of bytes from the input stream and stores them into the buffer array <code>b</code>.
            </summary>
        </member>
        <member name="M:java.io.InputStream.read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads up to <code>len</code> bytes of data from the input stream into an array of bytes.
            </summary>
        </member>
        <member name="M:java.io.InputStream.reset">
            <summary>
            Repositions this stream to the position at the time the <code>mark</code> method was last called on this input stream.
            </summary>
        </member>
        <member name="M:java.io.InputStream.skip(System.Int64)">
            <summary>
            Skips over and discards <code>n</code> bytes of data from this input stream.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletInputStream.#ctor">
            <summary>
            Does nothing, because this is an abstract class.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletInputStream.readLine(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads the input stream, one line at a time.
            </summary>
        </member>
        <member name="M:java.io.OutputStream.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.io.OutputStream.close">
            <summary>
            Closes this output stream and releases any system resources
            associated with this stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStream.flush">
            <summary>
            Flushes this output stream and forces any buffered output bytes
            to be written out.
            </summary>
        </member>
        <member name="M:java.io.OutputStream.write(System.SByte[])">
            <summary>
            Writes <code>b.length</code> bytes from the specified sbyte array
            to this output stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStream.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes <code>len</code> bytes from the specified sbyte array
            starting at offset <code>off</code> to this output stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStream.write(System.Int32)">
            <summary>
            Writes the specified sbyte to this output stream.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getAttribute(System.String)">
            <summary>
            Returns the value of the named attribute as an <code>Object</code>,
            or <code>null</code> if no attribute of the given name exists.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getAttributeNames">
            <summary>
            Returns an <code>Enumeration</code> containing the
            names of the attributes available to this request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getCharacterEncoding">
            <summary>
            Returns the name of the character encoding used in the body of this
            request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getContentLength">
            <summary>
            Returns the length, in bytes, of the request body
            and made available by the input stream, or -1 if the
            length is not known.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getContentType">
            <summary>
            Returns the MIME type of the body of the request, or
            <code>null</code> if the type is not known.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getInputStream">
            <summary>
            Retrieves the body of the request as binary data using
            a <A HREF="../../javax/servlet/ServletInputStream.html" title="class in javax.servlet"><CODE>ServletInputStream</CODE></A>.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getLocalAddr">
            <summary>
            Returns the Internet Protocol (IP) address of the interface on
            which the request  was received.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getLocale">
            <summary>
            Returns the preferred <code>Locale</code> that the client will
            accept content in, based on the Accept-Language header.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getLocales">
            <summary>
            Returns an <code>Enumeration</code> of <code>Locale</code> objects
            indicating, in decreasing order starting with the preferred locale, the
            locales that are acceptable to the client based on the Accept-Language
            header.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getLocalName">
            <summary>
            Returns the host name of the Internet Protocol (IP) interface on
            which the request was received.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getLocalPort">
            <summary>
            Returns the Internet Protocol (IP) port number of the interface
            on which the request was received.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getParameter(System.String)">
            <summary>
            Returns the value of a request parameter as a <code>String</code>,
            or <code>null</code> if the parameter does not exist.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getParameterMap">
            <summary>
            Returns a java.util.Map of the parameters of this request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getParameterNames">
            <summary>
            Returns an <code>Enumeration</code> of <code>String</code>
            objects containing the names of the parameters contained
            in this request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getParameterValues(System.String)">
            <summary>
            Returns an array of <code>String</code> objects containing
            all of the values the given request parameter has, or
            <code>null</code> if the parameter does not exist.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getProtocol">
            <summary>
            Returns the name and version of the protocol the request uses
            in the form <i>protocol/majorVersion.minorVersion</i>, for
            example, HTTP/1.1.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getReader">
            <summary>
            Retrieves the body of the request as character data using
            a <code>BufferedReader</code>.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getRealPath(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.1 of the Java Servlet API,
            use <A HREF="../../javax/servlet/ServletContext.html#getRealPath(java.lang.String)"><CODE>ServletContext.getRealPath(java.lang.String)</CODE></A> instead.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getRemoteAddr">
            <summary>
            Returns the Internet Protocol (IP) address of the client
            or last proxy that sent the request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getRemoteHost">
            <summary>
            Returns the fully qualified name of the client
            or the last proxy that sent the request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getRemotePort">
            <summary>
            Returns the Internet Protocol (IP) source port of the client
            or last proxy that sent the request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getRequestDispatcher(System.String)">
            <summary>
            Returns a <A HREF="../../javax/servlet/RequestDispatcher.html" title="interface in javax.servlet"><CODE>RequestDispatcher</CODE></A> object that acts as a wrapper for
            the resource located at the given path.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getScheme">
            <summary>
            Returns the name of the scheme used to make this request,
            for example,
            <code>http</code>, <code>https</code>, or <code>ftp</code>.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getServerName">
            <summary>
            Returns the host name of the server to which the request was sent.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.getServerPort">
            <summary>
            Returns the port number to which the request was sent.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.isSecure">
            <summary>
            Returns a boolean indicating whether this request was made using a
            secure channel, such as HTTPS.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.removeAttribute(System.String)">
            <summary>
            Removes an attribute from this request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.setAttribute(System.String,System.Object)">
            <summary>
            Stores an attribute in this request.
            </summary>
        </member>
        <member name="M:javax.servlet.ServletRequest.setCharacterEncoding(System.String)">
            <summary>
            Overrides the name of the character encoding used in the body of this
            request.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFileFormat.getByteLength">
            <summary>
            Obtains the size in bytes of the entire audio file (not just its audio data).
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFileFormat.getFormat">
            <summary>
            Obtains the format of the audio data contained in the audio file.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFileFormat.getFrameLength">
            <summary>
            Obtains the length of the audio data contained in the file, expressed in sample frames.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFileFormat.ToString">
            <summary>
            Provides a string representation of the file format.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.#ctor(System.Single,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs an <code>AudioFormat</code> with a linear PCM encoding and
            the given parameters.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.getChannels">
            <summary>
            Obtains the number of channels.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.getFrameRate">
            <summary>
            Obtains the frame rate in frames per second.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.getFrameSize">
            <summary>
            Obtains the frame size in bytes.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.getSampleRate">
            <summary>
            Obtains the sample rate.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.getSampleSizeInBits">
            <summary>
            Obtains the size of a sample.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.isBigEndian">
            <summary>
            Indicates whether the audio data is stored in big-endian or little-endian
            sbyte order.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.matches(javax.sound.sampled.AudioFormat)">
            <summary>
            Indicates whether this format matches the one specified.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioFormat.ToString">
            <summary>
            Returns a string that describes the format, such as:
            "PCM SIGNED 22050 Hz 16 bit mono big-endian audio data".
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.#ctor(java.io.InputStream,javax.sound.sampled.AudioFormat,System.Int64)">
            <summary>
            Constructs an audio input stream that has the requested format and length in sample frames,
            using audio data from the specified input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.#ctor(javax.sound.sampled.TargetDataLine)">
            <summary>
            Constructs an audio input stream that reads its data from the target
            data line indicated.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.available">
            <summary>
            Returns the maximum number of bytes that can be read (or skipped over) from this
            audio input stream without blocking.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.close">
            <summary>
            Closes this audio input stream and releases any system resources associated
            with the stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.getFormat">
            <summary>
            Obtains the audio format of the sound data in this audio input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.getFrameLength">
            <summary>
            Obtains the length of the stream, expressed in sample frames rather than bytes.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.mark(System.Int32)">
            <summary>
            Marks the current position in this audio input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.markSupported">
            <summary>
            Tests whether this audio input stream supports the <code>mark</code> and
            <code>reset</code> methods.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.read">
            <summary>
            Reads the next sbyte of data from the audio input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.read(System.SByte[])">
            <summary>
            Reads some number of bytes from the audio input stream and stores them into
            the buffer array <code>b</code>.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads up to a specified maximum number of bytes of data from the audio
            stream, putting them into the given sbyte array.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.reset">
            <summary>
            Repositions this audio input stream to the position it had at the time its
            <code>mark</code> method was last invoked.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioInputStream.skip(System.Int64)">
            <summary>
            Skips over and discards a specified number of bytes from this
            audio input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.File)">
            <summary>
            Obtains the audio file format of the specified <code>File</code>.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioFileFormat(java.io.InputStream)">
            <summary>
            Obtains the audio file format of the provided input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioFileFormat(java.net.URL)">
            <summary>
            Obtains the audio file format of the specified URL.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioInputStream(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioInputStream)">
            <summary>
            Obtains an audio input stream of the indicated format, by converting the
            provided audio input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.File)">
            <summary>
            Obtains an audio input stream from the provided <code>File</code>.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioInputStream(java.io.InputStream)">
            <summary>
            Obtains an audio input stream from the provided input stream.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.getAudioInputStream(java.net.URL)">
            <summary>
            Obtains an audio input stream from the URL provided.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.AudioSystem.isConversionSupported(javax.sound.sampled.AudioFormat,javax.sound.sampled.AudioFormat)">
            <summary>
            Indicates whether an audio input stream of a specified format
            can be obtained from an audio input stream of another specified format.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Control.ToString">
            <summary>
            Obtains a String describing the control type and its current state.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.addLineListener(javax.sound.sampled.LineListener)">
            <summary>
            Adds a listener to this line.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.close">
            <summary>
            Closes the line, indicating that any system resources
            in use by the line can be released.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.getControls">
            <summary>
            Obtains the set of controls associated with this line.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.isOpen">
            <summary>
            Indicates whether the line is open, meaning that it has reserved
            system resources and is operational, although it might not currently be
            playing or capturing sound.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.open">
            <summary>
            Opens the line, indicating that it should acquire any required
            system resources and become operational.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Line.removeLineListener(javax.sound.sampled.LineListener)">
            <summary>
            Removes the specified listener from this line's list of listeners.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.available">
            <summary>
            Obtains the number of bytes of data currently available to the
            application for processing in the data line's internal buffer.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.drain">
            <summary>
            Drains queued data from the line by continuing data I/O until the
            data line's internal buffer has been emptied.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.flush">
            <summary>
            Flushes queued data from the line.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.getBufferSize">
            <summary>
            Obtains the maximum number of bytes of data that will fit in the data line's
            internal buffer.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.getFormat">
            <summary>
            Obtains the current format (encoding, sample rate, number of channels,
            etc.) of the data line's audio data.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.getFramePosition">
            <summary>
            Obtains the current position in the audio data, in sample frames.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.getLevel">
            <summary>
            Obtains the current volume level for the line.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.getMicrosecondPosition">
            <summary>
            Obtains the current position in the audio data, in microseconds.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.isActive">
            <summary>
            Indicates whether the line is engaging in active I/O (such as playback
            or capture).
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.isRunning">
            <summary>
            Indicates whether the line is running.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.start">
            <summary>
            Allows a line to engage in data I/O.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.DataLine.stop">
            <summary>
            Stops the line.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.LineEvent.getFramePosition">
            <summary>
            Obtains the position in the line's audio data when the event occurred, expressed in sample frames.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.LineEvent.getLine">
            <summary>
            Obtains the audio line that is the source of this event.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.LineEvent.ToString">
            <summary>
            Obtains a string representation of the event.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.LineListener.update(javax.sound.sampled.LineEvent)">
            <summary>
            Informs the listener that a line's state has changed.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Mixer.getSourceLines">
            <summary>
            Obtains the set of all source lines currently open to this mixer.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Mixer.getTargetLines">
            <summary>
            Obtains the set of all target lines currently open from this mixer.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Mixer.isSynchronizationSupported(javax.sound.sampled.Line[],System.Boolean)">
            <summary>
            Reports whether this mixer supports synchronization of the specified set of lines.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Mixer.synchronize(javax.sound.sampled.Line[],System.Boolean)">
            <summary>
            Synchronizes two or more lines.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.Mixer.unsynchronize(javax.sound.sampled.Line[])">
            <summary>
            Releases synchronization for the specified lines.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat)">
            <summary>
            Opens the line with the specified format, causing the line to acquire any
            required system resources and become operational.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.TargetDataLine.open(javax.sound.sampled.AudioFormat,System.Int32)">
            <summary>
            Opens the line with the specified format and requested buffer size,
            causing the line to acquire any required system resources and become
            operational.
            </summary>
        </member>
        <member name="M:javax.sound.sampled.TargetDataLine.read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads audio data from the data line's input buffer.
            </summary>
        </member>
        <member name="M:java.awt.MenuContainer.getFont">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.MenuContainer.postEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1
            replaced by dispatchEvent(AWTEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuContainer.remove(java.awt.MenuComponent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.Component.#ctor">
            <summary>
            Constructs a new component.
            </summary>
        </member>
        <member name="M:java.awt.Component.action(java.awt.Event,System.Object)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            should register this component as ActionListener on component
            which fires action events.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.add(java.awt.PopupMenu)">
            <summary>
            Adds the specified popup menu to the component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addComponentListener(java.awt.event.ComponentListener)">
            <summary>
            Adds the specified component listener to receive component events from
            this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addFocusListener(java.awt.event.FocusListener)">
            <summary>
            Adds the specified focus listener to receive focus events from
            this component when this component gains input focus.
            </summary>
        </member>
        <member name="M:java.awt.Component.addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)">
            <summary>
            Adds the specified hierarchy bounds listener to receive hierarchy
            bounds events from this component when the hierarchy to which this
            container belongs changes.
            </summary>
        </member>
        <member name="M:java.awt.Component.addHierarchyListener(java.awt.event.HierarchyListener)">
            <summary>
            Adds the specified hierarchy listener to receive hierarchy changed
            events from this component when the hierarchy to which this container
            belongs changes.
            </summary>
        </member>
        <member name="M:java.awt.Component.addInputMethodListener(java.awt.event.InputMethodListener)">
            <summary>
            Adds the specified input method listener to receive
            input method events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addKeyListener(java.awt.event.KeyListener)">
            <summary>
            Adds the specified key listener to receive key events from
            this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addMouseListener(java.awt.event.MouseListener)">
            <summary>
            Adds the specified mouse listener to receive mouse events from
            this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)">
            <summary>
            Adds the specified mouse motion listener to receive mouse motion
            events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addMouseWheelListener(java.awt.event.MouseWheelListener)">
            <summary>
            Adds the specified mouse wheel listener to receive mouse wheel events
            from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.addNotify">
            <summary>
            Makes this <code>Component</code> displayable by connecting it to a
            native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Component.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list.
            </summary>
        </member>
        <member name="M:java.awt.Component.addPropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list for a specific
            property.
            </summary>
        </member>
        <member name="M:java.awt.Component.applyComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the <code>ComponentOrientation</code> property of this component
            and all components contained within it.
            </summary>
        </member>
        <member name="M:java.awt.Component.areFocusTraversalKeysSet(System.Int32)">
            <summary>
            Returns whether the Set of focus traversal keys for the given focus
            traversal operation has been explicitly defined for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.bounds">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getBounds()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.checkImage(java.awt.Image,java.awt.image.ImageObserver)">
            <summary>
            Returns the status of the construction of a screen representation
            of the specified image.
            </summary>
        </member>
        <member name="M:java.awt.Component.checkImage(java.awt.Image,System.Int32,System.Int32,java.awt.image.ImageObserver)">
            <summary>
            Returns the status of the construction of a screen representation
            of the specified image.
            </summary>
        </member>
        <member name="M:java.awt.Component.coalesceEvents(java.awt.AWTEvent,java.awt.AWTEvent)">
            <summary>
            Potentially coalesce an event being posted with an existing
            event.
            </summary>
        </member>
        <member name="M:java.awt.Component.contains(System.Int32,System.Int32)">
            <summary>
            Checks whether this component "contains" the specified point,
            where <code>x</code> and <code>y</code> are defined to be
            relative to the coordinate system of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.contains(java.awt.Point)">
            <summary>
            Checks whether this component "contains" the specified point,
            where the point's <i>x</i> and <i>y</i> coordinates are defined
            to be relative to the coordinate system of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.createImage(java.awt.image.ImageProducer)">
            <summary>
            Creates an image from the specified image producer.
            </summary>
        </member>
        <member name="M:java.awt.Component.createImage(System.Int32,System.Int32)">
            <summary>
            Creates an off-screen drawable image
            to be used for double buffering.
            </summary>
        </member>
        <member name="M:java.awt.Component.createVolatileImage(System.Int32,System.Int32)">
            <summary>
            Creates a volatile off-screen drawable image
            to be used for double buffering.
            </summary>
        </member>
        <member name="M:java.awt.Component.createVolatileImage(System.Int32,System.Int32,java.awt.ImageCapabilities)">
            <summary>
            Creates a volatile off-screen drawable image, with the given capabilities.
            </summary>
        </member>
        <member name="M:java.awt.Component.deliverEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>dispatchEvent(AWTEvent e)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.disable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.disableEvents(System.Int64)">
            <summary>
            Disables the events defined by the specified event mask parameter
            from being delivered to this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.dispatchEvent(java.awt.AWTEvent)">
            <summary>
            Dispatches an event to this component or one of its sub components.
            </summary>
        </member>
        <member name="M:java.awt.Component.doLayout">
            <summary>
            Prompts the layout manager to lay out this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.enable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.enable(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.enableEvents(System.Int64)">
            <summary>
            Enables the events defined by the specified event mask parameter
            to be delivered to this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.enableInputMethods(System.Boolean)">
            <summary>
            Enables or disables input method support for this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.firePropertyChange(System.String,System.Boolean,System.Boolean)">
            <summary>
            Support for reporting bound property changes for boolean properties.
            </summary>
        </member>
        <member name="M:java.awt.Component.firePropertyChange(System.String,System.Int32,System.Int32)">
            <summary>
            Support for reporting bound property changes for integer properties.
            </summary>
        </member>
        <member name="M:java.awt.Component.firePropertyChange(System.String,System.Object,System.Object)">
            <summary>
            Support for reporting bound property changes for Object properties.
            </summary>
        </member>
        <member name="M:java.awt.Component.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated
            with this <code>Component</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getAlignmentX">
            <summary>
            Returns the alignment along the x axis.
            </summary>
        </member>
        <member name="M:java.awt.Component.getAlignmentY">
            <summary>
            Returns the alignment along the y axis.
            </summary>
        </member>
        <member name="M:java.awt.Component.getBackground">
            <summary>
            Gets the background color of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getBounds">
            <summary>
            Gets the bounds of this component in the form of a
            <code>Rectangle</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Component.getBounds(java.awt.Rectangle)">
            <summary>
            Stores the bounds of this component into "return value" <b>rv</b> and
            return <b>rv</b>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getColorModel">
            <summary>
            Gets the instance of <code>ColorModel</code> used to display
            the component on the output device.
            </summary>
        </member>
        <member name="M:java.awt.Component.getComponentAt(System.Int32,System.Int32)">
            <summary>
            Determines if this component or one of its immediate
            subcomponents contains the (<i>x</i>, <i>y</i>) location,
            and if so, returns the containing component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getComponentAt(java.awt.Point)">
            <summary>
            Returns the component or subcomponent that contains the
            specified point.
            </summary>
        </member>
        <member name="M:java.awt.Component.getComponentListeners">
            <summary>
            Returns an array of all the component listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getComponentOrientation">
            <summary>
            Retrieves the language-sensitive orientation that is to be used to order
            the elements or text within this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getCursor">
            <summary>
            Gets the cursor set in the component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getDropTarget">
            <summary>
            Gets the <code>DropTarget</code> associated with this
            <code>Component</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFocusCycleRootAncestor">
            <summary>
            Returns the Container which is the focus cycle root of this Component's
            focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFocusListeners">
            <summary>
            Returns an array of all the focus listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFocusTraversalKeys(System.Int32)">
            <summary>
            Returns the Set of focus traversal keys for a given traversal operation
            for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFocusTraversalKeysEnabled">
            <summary>
            Returns whether focus traversal keys are enabled for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFont">
            <summary>
            Gets the font of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getFontMetrics(java.awt.Font)">
            <summary>
            Gets the font metrics for the specified font.
            </summary>
        </member>
        <member name="M:java.awt.Component.getForeground">
            <summary>
            Gets the foreground color of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getGraphics">
            <summary>
            Creates a graphics context for this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getGraphicsConfiguration">
            <summary>
            Gets the <code>GraphicsConfiguration</code> associated with this
            <code>Component</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getHeight">
            <summary>
            Returns the current height of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getHierarchyBoundsListeners">
            <summary>
            Returns an array of all the hierarchy bounds listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getHierarchyListeners">
            <summary>
            Returns an array of all the hierarchy listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getIgnoreRepaint">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.Component.getInputContext">
            <summary>
            Gets the input context used by this component for handling
            the communication with input methods when text is entered
            in this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getInputMethodListeners">
            <summary>
            Returns an array of all the input method listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getInputMethodRequests">
            <summary>
            Gets the input method request handler which supports
            requests from input methods for this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getKeyListeners">
            <summary>
            Returns an array of all the key listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this <code>Component</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getLocale">
            <summary>
            Gets the locale of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getLocation">
            <summary>
            Gets the location of this component in the form of a
            point specifying the component's top-left corner.
            </summary>
        </member>
        <member name="M:java.awt.Component.getLocation(java.awt.Point)">
            <summary>
            Stores the x,y origin of this component into "return value" <b>rv</b>
            and return <b>rv</b>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getLocationOnScreen">
            <summary>
            Gets the location of this component in the form of a point
            specifying the component's top-left corner in the screen's
            coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.Component.getMaximumSize">
            <summary>
            Gets the maximum size of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getMinimumSize">
            <summary>
            Gets the mininimum size of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getMouseListeners">
            <summary>
            Returns an array of all the mouse listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getMouseMotionListeners">
            <summary>
            Returns an array of all the mouse motion listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getMouseWheelListeners">
            <summary>
            Returns an array of all the mouse wheel listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getName">
            <summary>
            Gets the name of the component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getParent">
            <summary>
            Gets the parent of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getPreferredSize">
            <summary>
            Gets the preferred size of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getPropertyChangeListeners">
            <summary>
            Returns an array of all the property change listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getPropertyChangeListeners(System.String)">
            <summary>
            Returns an array of all the listeners which have been associated
            with the named property.
            </summary>
        </member>
        <member name="M:java.awt.Component.getSize">
            <summary>
            Returns the size of this component in the form of a
            <code>Dimension</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Component.getSize(java.awt.Dimension)">
            <summary>
            Stores the width/height of this component into "return value" <b>rv</b>
            and return <b>rv</b>.
            </summary>
        </member>
        <member name="M:java.awt.Component.getToolkit">
            <summary>
            Gets the toolkit of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getTreeLock">
            <summary>
            Gets this component's locking object (the object that owns the thread
            sychronization monitor) for AWT component-tree and layout
            operations.
            </summary>
        </member>
        <member name="M:java.awt.Component.getWidth">
            <summary>
            Returns the current width of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.getX">
            <summary>
            Returns the current x coordinate of the components origin.
            </summary>
        </member>
        <member name="M:java.awt.Component.getY">
            <summary>
            Returns the current y coordinate of the components origin.
            </summary>
        </member>
        <member name="M:java.awt.Component.gotFocus(java.awt.Event,System.Object)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processFocusEvent(FocusEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.handleEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1
            replaced by processEvent(AWTEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.hasFocus">
            <summary>
            Returns <code>true</code> if this <code>Component</code> is the
            focus owner.
            </summary>
        </member>
        <member name="M:java.awt.Component.hide">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setVisible(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.imageUpdate(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Repaints the component when the image has changed.
            </summary>
        </member>
        <member name="M:java.awt.Component.inside(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by contains(int, int).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.invalidate">
            <summary>
            Invalidates this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.isBackgroundSet">
            <summary>
            Returns whether the background color has been explicitly set for this
            Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.isCursorSet">
            <summary>
            Returns whether the cursor has been explicitly set for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.isDisplayable">
            <summary>
            Determines whether this component is displayable.
            </summary>
        </member>
        <member name="M:java.awt.Component.isDoubleBuffered">
            <summary>
            Returns true if this component is painted to an offscreen image
            ("buffer") that's copied to the screen later.
            </summary>
        </member>
        <member name="M:java.awt.Component.isEnabled">
            <summary>
            Determines whether this component is enabled.
            </summary>
        </member>
        <member name="M:java.awt.Component.isFocusable">
            <summary>
            Returns whether this Component can be focused.
            </summary>
        </member>
        <member name="M:java.awt.Component.isFocusCycleRoot(java.awt.Container)">
            <summary>
            Returns whether the specified Container is the focus cycle root of this
            Component's focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Component.isFocusOwner">
            <summary>
            Returns <code>true</code> if this <code>Component</code> is the
            focus owner.
            </summary>
        </member>
        <member name="M:java.awt.Component.isFocusTraversable">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by <code>isFocusable()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.isFontSet">
            <summary>
            Returns whether the font has been explicitly set for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.isForegroundSet">
            <summary>
            Returns whether the foreground color has been explicitly set for this
            Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.isLightweight">
            <summary>
            A lightweight component doesn't have a native toolkit peer.
            </summary>
        </member>
        <member name="M:java.awt.Component.isOpaque">
            <summary>
            Returns true if this component is completely opaque, returns
            false by default.
            </summary>
        </member>
        <member name="M:java.awt.Component.isShowing">
            <summary>
            Determines whether this component is showing on screen.
            </summary>
        </member>
        <member name="M:java.awt.Component.isValid">
            <summary>
            Determines whether this component is valid.
            </summary>
        </member>
        <member name="M:java.awt.Component.isVisible">
            <summary>
            Determines whether this component should be visible when its
            parent is visible.
            </summary>
        </member>
        <member name="M:java.awt.Component.keyDown(java.awt.Event,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processKeyEvent(KeyEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.keyUp(java.awt.Event,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processKeyEvent(KeyEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.layout">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>doLayout()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.list">
            <summary>
            Prints a listing of this component to the standard system output
            stream <code>System.out</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.list(java.io.PrintStream)">
            <summary>
            Prints a listing of this component to the specified output
            stream.
            </summary>
        </member>
        <member name="M:java.awt.Component.list(java.io.PrintStream,System.Int32)">
            <summary>
            Prints out a list, starting at the specified indentation, to the
            specified print stream.
            </summary>
        </member>
        <member name="M:java.awt.Component.list(java.io.PrintWriter)">
            <summary>
            Prints a listing to the specified print writer.
            </summary>
        </member>
        <member name="M:java.awt.Component.list(java.io.PrintWriter,System.Int32)">
            <summary>
            Prints out a list, starting at the specified indentation, to
            the specified print writer.
            </summary>
        </member>
        <member name="M:java.awt.Component.locate(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by getComponentAt(int, int).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.location">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getLocation()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.lostFocus(java.awt.Event,System.Object)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processFocusEvent(FocusEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.minimumSize">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getMinimumSize()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseDown(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseDrag(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseMotionEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseEnter(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseExit(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseMove(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseMotionEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.mouseUp(java.awt.Event,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by processMouseEvent(MouseEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.move(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setLocation(int, int)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.nextFocus">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by transferFocus().</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.paint(java.awt.Graphics)">
            <summary>
            Paints this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.paintAll(java.awt.Graphics)">
            <summary>
            Paints this component and all of its subcomponents.
            </summary>
        </member>
        <member name="M:java.awt.Component.paramString">
            <summary>
            Returns a string representing the state of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.postEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by dispatchEvent(AWTEvent).</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.preferredSize">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getPreferredSize()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.prepareImage(java.awt.Image,java.awt.image.ImageObserver)">
            <summary>
            Prepares an image for rendering on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.prepareImage(java.awt.Image,System.Int32,System.Int32,java.awt.image.ImageObserver)">
            <summary>
            Prepares an image for rendering on this component at the
            specified width and height.
            </summary>
        </member>
        <member name="M:java.awt.Component.print(java.awt.Graphics)">
            <summary>
            Prints this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.printAll(java.awt.Graphics)">
            <summary>
            Prints this component and all of its subcomponents.
            </summary>
        </member>
        <member name="M:java.awt.Component.processComponentEvent(java.awt.event.ComponentEvent)">
            <summary>
            Processes component events occurring on this component by
            dispatching them to any registered
            <code>ComponentListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processEvent(java.awt.AWTEvent)">
            <summary>
            Processes events occurring on this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.processFocusEvent(java.awt.event.FocusEvent)">
            <summary>
            Processes focus events occurring on this component by
            dispatching them to any registered
            <code>FocusListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processHierarchyBoundsEvent(java.awt.event.HierarchyEvent)">
            <summary>
            Processes hierarchy bounds events occurring on this component by
            dispatching them to any registered
            <code>HierarchyBoundsListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processHierarchyEvent(java.awt.event.HierarchyEvent)">
            <summary>
            Processes hierarchy events occurring on this component by
            dispatching them to any registered
            <code>HierarchyListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processInputMethodEvent(java.awt.event.InputMethodEvent)">
            <summary>
            Processes input method events occurring on this component by
            dispatching them to any registered
            <code>InputMethodListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            Processes key events occurring on this component by
            dispatching them to any registered
            <code>KeyListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processMouseEvent(java.awt.event.MouseEvent)">
            <summary>
            Processes mouse events occurring on this component by
            dispatching them to any registered
            <code>MouseListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processMouseMotionEvent(java.awt.event.MouseEvent)">
            <summary>
            Processes mouse motion events occurring on this component by
            dispatching them to any registered
            <code>MouseMotionListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.processMouseWheelEvent(java.awt.event.MouseWheelEvent)">
            <summary>
            Processes mouse wheel events occurring on this component by
            dispatching them to any registered
            <code>MouseWheelListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.Component.remove(java.awt.MenuComponent)">
            <summary>
            Removes the specified popup menu from the component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeComponentListener(java.awt.event.ComponentListener)">
            <summary>
            Removes the specified component listener so that it no longer
            receives component events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeFocusListener(java.awt.event.FocusListener)">
            <summary>
            Removes the specified focus listener so that it no longer
            receives focus events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)">
            <summary>
            Removes the specified hierarchy bounds listener so that it no longer
            receives hierarchy bounds events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeHierarchyListener(java.awt.event.HierarchyListener)">
            <summary>
            Removes the specified hierarchy listener so that it no longer
            receives hierarchy changed events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeInputMethodListener(java.awt.event.InputMethodListener)">
            <summary>
            Removes the specified input method listener so that it no longer
            receives input method events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeKeyListener(java.awt.event.KeyListener)">
            <summary>
            Removes the specified key listener so that it no longer
            receives key events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeMouseListener(java.awt.event.MouseListener)">
            <summary>
            Removes the specified mouse listener so that it no longer
            receives mouse events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)">
            <summary>
            Removes the specified mouse motion listener so that it no longer
            receives mouse motion events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeMouseWheelListener(java.awt.event.MouseWheelListener)">
            <summary>
            Removes the specified mouse wheel listener so that it no longer
            receives mouse wheel events from this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.removeNotify">
            <summary>
            Makes this <code>Component</code> undisplayable by destroying it native
            screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a PropertyChangeListener from the listener list.
            </summary>
        </member>
        <member name="M:java.awt.Component.removePropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Removes a PropertyChangeListener from the listener list for a specific
            property.
            </summary>
        </member>
        <member name="M:java.awt.Component.repaint">
            <summary>
            Repaints this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.repaint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Repaints the specified rectangle of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.repaint(System.Int64)">
            <summary>
            Repaints the component.
            </summary>
        </member>
        <member name="M:java.awt.Component.repaint(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Repaints the specified rectangle of this component within
            <code>tm</code> milliseconds.
            </summary>
        </member>
        <member name="M:java.awt.Component.requestFocus">
            <summary>
            Requests that this Component get the input focus, and that this
            Component's top-level ancestor become the focused Window.
            </summary>
        </member>
        <member name="M:java.awt.Component.requestFocus(System.Boolean)">
            <summary>
            Requests that this Component get the input focus, and that this
            Component's top-level ancestor become the focused Window.
            </summary>
        </member>
        <member name="M:java.awt.Component.requestFocusInWindow">
            <summary>
            Requests that this Component get the input focus, if this Component's
            top-level ancestor is already the focused Window.
            </summary>
        </member>
        <member name="M:java.awt.Component.requestFocusInWindow(System.Boolean)">
            <summary>
            Requests that this Component get the input focus, if this Component's
            top-level ancestor is already the focused Window.
            </summary>
        </member>
        <member name="M:java.awt.Component.reshape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setBounds(int, int, int, int)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.resize(java.awt.Dimension)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setSize(Dimension)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.resize(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setSize(int, int)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.setBackground(java.awt.Color)">
            <summary>
            Sets the background color of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves and resizes this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setBounds(java.awt.Rectangle)">
            <summary>
            Moves and resizes this component to conform to the new
            bounding rectangle <code>r</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.setComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the language-sensitive orientation that is to be used to order
            the elements or text within this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setCursor(java.awt.Cursor)">
            <summary>
            Sets the cursor image to the specified cursor.
            </summary>
        </member>
        <member name="M:java.awt.Component.setDropTarget(java.awt.dnd.DropTarget)">
            <summary>
            Associate a <code>DropTarget</code> with this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setEnabled(System.Boolean)">
            <summary>
            Enables or disables this component, depending on the value of the
            parameter <code>b</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.setFocusable(System.Boolean)">
            <summary>
            Sets the focusable state of this Component to the specified value.
            </summary>
        </member>
        <member name="M:java.awt.Component.setFocusTraversalKeys(System.Int32,java.util.Set)">
            <summary>
            Sets the focus traversal keys for a given traversal operation for this
            Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setFocusTraversalKeysEnabled(System.Boolean)">
            <summary>
            Sets whether focus traversal keys are enabled for this Component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setFont(java.awt.Font)">
            <summary>
            Sets the font of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setForeground(java.awt.Color)">
            <summary>
            Sets the foreground color of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setIgnoreRepaint(System.Boolean)">
            <summary>
            Sets whether or not paint messages received from the operating system
            should be ignored.
            </summary>
        </member>
        <member name="M:java.awt.Component.setLocale(java.util.Locale)">
            <summary>
            Sets the locale of this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.setLocation(System.Int32,System.Int32)">
            <summary>
            Moves this component to a new location.
            </summary>
        </member>
        <member name="M:java.awt.Component.setLocation(java.awt.Point)">
            <summary>
            Moves this component to a new location.
            </summary>
        </member>
        <member name="M:java.awt.Component.setName(System.String)">
            <summary>
            Sets the name of the component to the specified string.
            </summary>
        </member>
        <member name="M:java.awt.Component.setSize(java.awt.Dimension)">
            <summary>
            Resizes this component so that it has width <code>d.width</code>
            and height <code>d.height</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.setSize(System.Int32,System.Int32)">
            <summary>
            Resizes this component so that it has width <code>width</code>
            and height <code>height</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.setVisible(System.Boolean)">
            <summary>
            Shows or hides this component depending on the value of parameter
            <code>b</code>.
            </summary>
        </member>
        <member name="M:java.awt.Component.show">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setVisible(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.show(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setVisible(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.size">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getSize()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Component.ToString">
            <summary>
            Returns a string representation of this component and its values.
            </summary>
        </member>
        <member name="M:java.awt.Component.transferFocus">
            <summary>
            Transfers the focus to the next component, as though this Component were
            the focus owner.
            </summary>
        </member>
        <member name="M:java.awt.Component.transferFocusBackward">
            <summary>
            Transfers the focus to the previous component, as though this Component
            were the focus owner.
            </summary>
        </member>
        <member name="M:java.awt.Component.transferFocusUpCycle">
            <summary>
            Transfers the focus up one focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Component.update(java.awt.Graphics)">
            <summary>
            Updates this component.
            </summary>
        </member>
        <member name="M:java.awt.Component.validate">
            <summary>
            Ensures that this component has a valid layout.
            </summary>
        </member>
        <member name="M:java.awt.Container.#ctor">
            <summary>
            Constructs a new Container.
            </summary>
        </member>
        <member name="M:java.awt.Container.add(java.awt.Component)">
            <summary>
            Appends the specified component to the end of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.add(java.awt.Component,System.Int32)">
            <summary>
            Adds the specified component to this container at the given
            position.
            </summary>
        </member>
        <member name="M:java.awt.Container.add(java.awt.Component,System.Object)">
            <summary>
            Adds the specified component to the end of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.add(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Adds the specified component to this container with the specified
            constraints at the specified index.
            </summary>
        </member>
        <member name="M:java.awt.Container.add(System.String,java.awt.Component)">
            <summary>
            Adds the specified component to this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.addContainerListener(java.awt.event.ContainerListener)">
            <summary>
            Adds the specified container listener to receive container events
            from this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Adds the specified component to this container at the specified
            index.
            </summary>
        </member>
        <member name="M:java.awt.Container.addNotify">
            <summary>
            Makes this Container displayable by connecting it to
            a native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list.
            </summary>
        </member>
        <member name="M:java.awt.Container.addPropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list for a specific
            property.
            </summary>
        </member>
        <member name="M:java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the <code>ComponentOrientation</code> property of this container
            and all components contained within it.
            </summary>
        </member>
        <member name="M:java.awt.Container.areFocusTraversalKeysSet(System.Int32)">
            <summary>
            Returns whether the Set of focus traversal keys for the given focus
            traversal operation has been explicitly defined for this Container.
            </summary>
        </member>
        <member name="M:java.awt.Container.countComponents">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by getComponentCount().</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.deliverEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>dispatchEvent(AWTEvent e)</code></I>
            </summary>
        </member>
        <member name="M:java.awt.Container.doLayout">
            <summary>
            Causes this container to lay out its components.
            </summary>
        </member>
        <member name="M:java.awt.Container.findComponentAt(System.Int32,System.Int32)">
            <summary>
            Locates the visible child component that contains the specified
            position.
            </summary>
        </member>
        <member name="M:java.awt.Container.findComponentAt(java.awt.Point)">
            <summary>
            Locates the visible child component that contains the specified
            point.
            </summary>
        </member>
        <member name="M:java.awt.Container.getAlignmentX">
            <summary>
            Returns the alignment along the x axis.
            </summary>
        </member>
        <member name="M:java.awt.Container.getAlignmentY">
            <summary>
            Returns the alignment along the y axis.
            </summary>
        </member>
        <member name="M:java.awt.Container.getComponent(System.Int32)">
            <summary>
            Gets the nth component in this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getComponentAt(System.Int32,System.Int32)">
            <summary>
            Locates the component that contains the x,y position.
            </summary>
        </member>
        <member name="M:java.awt.Container.getComponentAt(java.awt.Point)">
            <summary>
            Gets the component that contains the specified point.
            </summary>
        </member>
        <member name="M:java.awt.Container.getComponentCount">
            <summary>
            Gets the number of components in this panel.
            </summary>
        </member>
        <member name="M:java.awt.Container.getComponents">
            <summary>
            Gets all the components in this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getContainerListeners">
            <summary>
            Returns an array of all the container listeners
            registered on this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getFocusTraversalKeys(System.Int32)">
            <summary>
            Returns the Set of focus traversal keys for a given traversal operation
            for this Container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getFocusTraversalPolicy">
            <summary>
            Returns the focus traversal policy that will manage keyboard traversal
            of this Container's children, or null if this Container is not a focus
            cycle root.
            </summary>
        </member>
        <member name="M:java.awt.Container.getInsets">
            <summary>
            Determines the insets of this container, which indicate the size
            of the container's border.
            </summary>
        </member>
        <member name="M:java.awt.Container.getLayout">
            <summary>
            Gets the layout manager for this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this <code>Container</code>.
            </summary>
        </member>
        <member name="M:java.awt.Container.getMaximumSize">
            <summary>
            Returns the maximum size of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getMinimumSize">
            <summary>
            Returns the minimum size of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.getPreferredSize">
            <summary>
            Returns the preferred size of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.insets">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getInsets()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.invalidate">
            <summary>
            Invalidates the container.
            </summary>
        </member>
        <member name="M:java.awt.Container.isAncestorOf(java.awt.Component)">
            <summary>
            Checks if the component is contained in the component hierarchy of
            this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.isFocusCycleRoot">
            <summary>
            Returns whether this Container is the root of a focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Container.isFocusCycleRoot(java.awt.Container)">
            <summary>
            Returns whether the specified Container is the focus cycle root of this
            Container's focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Container.isFocusTraversalPolicySet">
            <summary>
            Returns whether the focus traversal policy has been explicitly set for
            this Container.
            </summary>
        </member>
        <member name="M:java.awt.Container.layout">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>doLayout()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.list(java.io.PrintStream,System.Int32)">
            <summary>
            Prints a listing of this container to the specified output
            stream.
            </summary>
        </member>
        <member name="M:java.awt.Container.list(java.io.PrintWriter,System.Int32)">
            <summary>
            Prints out a list, starting at the specified indention, to the specified
            print writer.
            </summary>
        </member>
        <member name="M:java.awt.Container.locate(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getComponentAt(int, int)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.minimumSize">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getMinimumSize()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.paint(java.awt.Graphics)">
            <summary>
            Paints the container.
            </summary>
        </member>
        <member name="M:java.awt.Container.paintComponents(java.awt.Graphics)">
            <summary>
            Paints each of the components in this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.paramString">
            <summary>
            Returns a string representing the state of this <code>Container</code>.
            </summary>
        </member>
        <member name="M:java.awt.Container.preferredSize">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getPreferredSize()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Container.print(java.awt.Graphics)">
            <summary>
            Prints the container.
            </summary>
        </member>
        <member name="M:java.awt.Container.printComponents(java.awt.Graphics)">
            <summary>
            Prints each of the components in this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.processContainerEvent(java.awt.event.ContainerEvent)">
            <summary>
            Processes container events occurring on this container by
            dispatching them to any registered ContainerListener objects.
            </summary>
        </member>
        <member name="M:java.awt.Container.processEvent(java.awt.AWTEvent)">
            <summary>
            Processes events on this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.remove(java.awt.Component)">
            <summary>
            Removes the specified component from this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.remove(System.Int32)">
            <summary>
            Removes the component, specified by <code>index</code>,
            from this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.removeAll">
            <summary>
            Removes all the components from this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)">
            <summary>
            Removes the specified container listener so it no longer receives
            container events from this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.removeNotify">
            <summary>
            Makes this Container undisplayable by removing its connection
            to its native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Container.setFocusCycleRoot(System.Boolean)">
            <summary>
            Sets whether this Container is the root of a focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Container.setFocusTraversalKeys(System.Int32,java.util.Set)">
            <summary>
            Sets the focus traversal keys for a given traversal operation for this
            Container.
            </summary>
        </member>
        <member name="M:java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)">
            <summary>
            Sets the focus traversal policy that will manage keyboard traversal of
            this Container's children, if this Container is a focus cycle root.
            </summary>
        </member>
        <member name="M:java.awt.Container.setFont(java.awt.Font)">
            <summary>
            Sets the font of this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.setLayout(java.awt.LayoutManager)">
            <summary>
            Sets the layout manager for this container.
            </summary>
        </member>
        <member name="M:java.awt.Container.transferFocusBackward">
            <summary>
            Transfers the focus to the previous component, as though this Component
            were the focus owner.
            </summary>
        </member>
        <member name="M:java.awt.Container.transferFocusDownCycle">
            <summary>
            Transfers the focus down one focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Container.update(java.awt.Graphics)">
            <summary>
            Updates the container.
            </summary>
        </member>
        <member name="M:java.awt.Container.validate">
            <summary>
            Validates this container and all of its subcomponents.
            </summary>
        </member>
        <member name="M:java.awt.Container.validateTree">
            <summary>
            Recursively descends the container tree and recomputes the
            layout for any subtrees marked as needing it (those marked as
            invalid).
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.#ctor">
            <summary>
            Default <code>JComponent</code> constructor.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)">
            <summary>
            Registers <code>listener</code> so that it will receive
            <code>AncestorEvents</code> when it or any of its ancestors
            move or are made visible or invisible.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.addNotify">
            <summary>
            Notifies this component that it now has a parent component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChangeListener</code> to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.addPropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChangeListener</code> for a specific property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)">
            <summary>
            Adds a <code>VetoableChangeListener</code> to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)">
            <summary>
            Returns the <code>Component</code>'s "visible rect rectangle" -  the
            intersection of the visible rectangles for this component
            and all of its ancestors.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.contains(System.Int32,System.Int32)">
            <summary>
            Gives the UI delegate an opportunity to define the precise
            shape of this component for the sake of mouse processing.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.createToolTip">
            <summary>
            Returns the instance of <code>JToolTip</code> that should be used
            to display the tooltip.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.disable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>java.awt.Component.setEnable(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.enable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>java.awt.Component.setEnable(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Boolean,System.Boolean)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.SByte,System.SByte)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Char,System.Char)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Double,System.Double)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Single,System.Single)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Int32,System.Int32)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Int64,System.Int64)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Object,System.Object)">
            <summary>
            Supports reporting bound property changes.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.firePropertyChange(System.String,System.Int16,System.Int16)">
            <summary>
            Reports a bound property change.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.fireVetoableChange(System.String,System.Object,System.Object)">
            <summary>
            Supports reporting constrained property changes.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getAccessibleContext">
            <summary>
            Returns the <code>AccessibleContext</code> associated with this
            <code>JComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)">
            <summary>
            Returns the object that will perform the action registered for a
            given keystroke.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getActionMap">
            <summary>
            Returns the <code>ActionMap</code> used to determine what
            <code>Action</code> to fire for particular <code>KeyStroke</code>
            binding.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getAlignmentX">
            <summary>
            Overrides <code>Container.getAlignmentX</code> to return
            the vertical alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getAlignmentY">
            <summary>
            Overrides <code>Container.getAlignmentY</code> to return
            the horizontal alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getAncestorListeners">
            <summary>
            Returns an array of all the ancestor listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getAutoscrolls">
            <summary>
            Gets the <code>autoscrolls</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getBorder">
            <summary>
            Returns the border of this component or <code>null</code> if no
            border is currently set.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getBounds(java.awt.Rectangle)">
            <summary>
            Stores the bounds of this component into "return value"
            <code>rv</code> and returns <code>rv</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getClientProperty(System.Object)">
            <summary>
            Returns the value of the property with the specified key.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getComponentGraphics(java.awt.Graphics)">
            <summary>
            Returns the graphics object used to paint this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)">
            <summary>
            Returns the condition that determines whether a registered action
            occurs in response to the specified keystroke.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getDebugGraphicsOptions">
            <summary>
            Returns the state of graphics debugging.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getDefaultLocale">
            <summary>
            Returns the default locale used to initialize each JComponent's
            locale property upon creation.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getGraphics">
            <summary>
            Returns this component's graphics context, which lets you draw
            on a component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getHeight">
            <summary>
            Returns the current height of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getInputMap">
            <summary>
            Returns the <code>InputMap</code> that is used when the
            component has focus.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getInputMap(System.Int32)">
            <summary>
            Returns the <code>InputMap</code> that is used during
            <code>condition</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getInputVerifier">
            <summary>
            Returns the input verifier for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getInsets">
            <summary>
            If a border has been set on this component, returns the
            border's insets; otherwise calls <code>super.getInsets</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getInsets(java.awt.Insets)">
            <summary>
            Returns an <code>Insets</code> object containing this component's inset
            values.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this <code>JComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getLocation(java.awt.Point)">
            <summary>
            Stores the x,y origin of this component into "return value"
            <code>rv</code> and returns <code>rv</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getMaximumSize">
            <summary>
            If the maximum size has been set to a non-<code>null</code> value
            just returns it.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getMinimumSize">
            <summary>
            If the minimum size has been set to a non-<code>null</code> value
            just returns it.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getNextFocusableComponent">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by <code>FocusTraversalPolicy</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getPreferredSize">
            <summary>
            If the <code>preferredSize</code> has been set to a
            non-<code>null</code> value just returns it.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getPropertyChangeListeners">
            <summary>
            Returns an array of all the <code>PropertyChangeListener</code>s
            added to this Component with addPropertyChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getPropertyChangeListeners(System.String)">
            <summary>
            Returns an array of all the listeners which have been associated
            with the named property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getRegisteredKeyStrokes">
            <summary>
            Returns the <code>KeyStrokes</code> that will initiate
            registered actions.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getRootPane">
            <summary>
            Returns the <code>JRootPane</code> ancestor for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getSize(java.awt.Dimension)">
            <summary>
            Stores the width/height of this component into "return value"
            <code>rv</code> and returns <code>rv</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)">
            <summary>
            Returns the tooltip location in this component's coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getToolTipText">
            <summary>
            Returns the tooltip string that has been set with
            <code>setToolTipText</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)">
            <summary>
            Returns the string to be used as the tooltip for <i>event</i>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getTopLevelAncestor">
            <summary>
            Returns the top-level ancestor of this component (either the
            containing <code>Window</code> or <code>Applet</code>),
            or <code>null</code> if this component has not
            been added to any container.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getTransferHandler">
            <summary>
            Gets the <code>transferHandler</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getUIClassID">
            <summary>
            Returns the <code>UIDefaults</code> key used to
            look up the name of the <code>swing.plaf.ComponentUI</code>
            class that defines the look and feel
            for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getVerifyInputWhenFocusTarget">
            <summary>
            Returns the value that indicates whether the input verifier for the
            current focus owner will be called before this component requests
            focus.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getVetoableChangeListeners">
            <summary>
            Returns an array of all the vetoable change listeners
            registered on this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getVisibleRect">
            <summary>
            Returns the <code>Component</code>'s "visible rectangle" -  the
            intersection of this component's visible rectangle:
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getWidth">
            <summary>
            Returns the current width of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getX">
            <summary>
            Returns the current x coordinate of the component's origin.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.getY">
            <summary>
            Returns the current y coordinate of the component's origin.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.grabFocus">
            <summary>
            Requests that this Component get the input focus, and that this
            Component's top-level ancestor become the focused Window.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isDoubleBuffered">
            <summary>
            Returns whether this component should use a buffer to paint.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isLightweightComponent(java.awt.Component)">
            <summary>
            Returns true if this component is lightweight, that is, if it doesn't
            have a native window system peer.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isManagingFocus">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by
            <code>Component.setFocusTraversalKeys(int, Set)</code> and
            <code>Container.setFocusCycleRoot(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isMaximumSizeSet">
            <summary>
            Returns true if the maximum size has been set to a non-<code>null</code>
            value otherwise returns false.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isMinimumSizeSet">
            <summary>
            Returns true if the minimum size has been set to a non-<code>null</code>
            value otherwise returns false.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isOpaque">
            <summary>
            Returns true if this component is completely opaque.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isOptimizedDrawingEnabled">
            <summary>
            Returns true if this component tiles its children -- that is, if
            it can guarantee that the children will not overlap.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isPaintingTile">
            <summary>
            Returns true if the component is currently painting a tile.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isPreferredSizeSet">
            <summary>
            Returns true if the preferred size has been set to a
            non-<code>null</code> value otherwise returns false.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isRequestFocusEnabled">
            <summary>
            Returns <code>true</code> if this <code>JComponent</code> should
            get focus; otherwise returns <code>false</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.isValidateRoot">
            <summary>
            If this method returns true, <code>revalidate</code> calls by
            descendants of this component will cause the entire tree
            beginning with this root to be validated.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paint(java.awt.Graphics)">
            <summary>
            Invoked by Swing to draw components.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paintBorder(java.awt.Graphics)">
            <summary>
            Paints the component's border.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paintChildren(java.awt.Graphics)">
            <summary>
            Paints this component's children.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paintComponent(java.awt.Graphics)">
            <summary>
            Calls the UI delegate's paint method, if the UI delegate
            is non-<code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paintImmediately(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the specified region in this component and all of its
            descendants that overlap the region, immediately.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paintImmediately(java.awt.Rectangle)">
            <summary>
            Paints the specified region now.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.paramString">
            <summary>
            Returns a string representation of this <code>JComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.print(java.awt.Graphics)">
            <summary>
            Invoke this method to print the component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.printAll(java.awt.Graphics)">
            <summary>
            Invoke this method to print the component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.printBorder(java.awt.Graphics)">
            <summary>
            Prints the component's border.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.printChildren(java.awt.Graphics)">
            <summary>
            Prints this component's children.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.printComponent(java.awt.Graphics)">
            <summary>
            This is invoked during a printing operation.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.processComponentKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            Processes any key events that the component itself
            recognizes.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,System.Int32,System.Boolean)">
            <summary>
            Invoked to process the key bindings for <code>ks</code> as the result
            of the <code>KeyEvent</code> <code>e</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.processKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            Overrides <code>processKeyEvent</code> to process events.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.processMouseMotionEvent(java.awt.event.MouseEvent)">
            <summary>
            Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.putClientProperty(System.Object,System.Object)">
            <summary>
            Adds an arbitrary key/value "client property" to this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,System.Int32)">
            <summary>
            This method is now obsolete, please use a combination of
            <code>getActionMap()</code> and <code>getInputMap()</code> for
            similiar behavior.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,System.String,javax.swing.KeyStroke,System.Int32)">
            <summary>
            This method is now obsolete, please use a combination of
            <code>getActionMap()</code> and <code>getInputMap()</code> for
            similiar behavior.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)">
            <summary>
            Unregisters <code>listener</code> so that it will no longer receive
            <code>AncestorEvents</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.removeNotify">
            <summary>
            Notifies this component that it no longer has a parent component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChangeListener</code> from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.removePropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChangeListener</code> for a specific property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)">
            <summary>
            Removes a <code>VetoableChangeListener</code> from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.repaint(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the specified region to the dirty region list if the component
            is showing.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.repaint(java.awt.Rectangle)">
            <summary>
            Adds the specified region to the dirty region list if the component
            is showing.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.requestDefaultFocus">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by
            <code>FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.requestFocus">
            <summary>
            Requests that this Component get the input focus, and that this
            Component's top-level ancestor become the focused Window.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.requestFocus(System.Boolean)">
            <summary>
            <code>JComponent</code> overrides <code>requestFocus</code> solely
            to make the method public so that UI implementations can cause
            temporary focus changes.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.requestFocusInWindow">
            <summary>
            Requests that this Component get the input focus, if this Component's
            top-level ancestor is already the focused Window.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.requestFocusInWindow(System.Boolean)">
            <summary>
            <code>JComponent</code> overrides <code>requestFocusInWindow</code>
            solely to make the method public so that UI implementations can cause
            temporary focus changes.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.resetKeyboardActions">
            <summary>
            Unregisters all the bindings in the first tier <code>InputMaps</code>
            and <code>ActionMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.reshape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves and resizes this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.revalidate">
            <summary>
            Supports deferred automatic layout.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)">
            <summary>
            Forwards the <code>scrollRectToVisible()</code> message to the
            <code>JComponent</code>'s parent.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setActionMap(javax.swing.ActionMap)">
            <summary>
            Sets the <code>ActionMap</code> to <code>am</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setAlignmentX(System.Single)">
            <summary>
            Sets the the vertical alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setAlignmentY(System.Single)">
            <summary>
            Sets the the horizontal alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setAutoscrolls(System.Boolean)">
            <summary>
            Sets the <code>autoscrolls</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setBackground(java.awt.Color)">
            <summary>
            Sets the background color of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setBorder(javax.swing.border.Border)">
            <summary>
            Sets the border of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setDebugGraphicsOptions(System.Int32)">
            <summary>
            Enables or disables diagnostic information about every graphics
            operation performed within the component or one of its children.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setDefaultLocale(java.util.Locale)">
            <summary>
            Sets the default locale used to initialize each JComponent's locale
            property upon creation.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setDoubleBuffered(System.Boolean)">
            <summary>
            Sets whether the this component should use a buffer to paint.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setEnabled(System.Boolean)">
            <summary>
            Sets whether or not this component is enabled.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setFont(java.awt.Font)">
            <summary>
            Sets the font for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setForeground(java.awt.Color)">
            <summary>
            Sets the foreground color of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setInputMap(System.Int32,javax.swing.InputMap)">
            <summary>
            Sets the <code>InputMap</code> to use under the condition
            <code>condition</code> to
            <code>map</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)">
            <summary>
            Sets the input verifier for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setMaximumSize(java.awt.Dimension)">
            <summary>
            Sets the maximum size of this component to a constant
            value.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setMinimumSize(java.awt.Dimension)">
            <summary>
            Sets the minimum size of this component to a constant
            value.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by <code>FocusTraversalPolicy</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setOpaque(System.Boolean)">
            <summary>
            If true the component paints every pixel within its bounds.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setPreferredSize(java.awt.Dimension)">
            <summary>
            Sets the preferred size of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setRequestFocusEnabled(System.Boolean)">
            <summary>
            Provides a hint as to whether or not this <code>JComponent</code>
            should get focus.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setToolTipText(System.String)">
            <summary>
            Registers the text to display in a tool tip.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)">
            <summary>
            Sets the <code>transferHandler</code> property,
            which is <code>null</code> if the component does
            not support data transfer operations.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setUI(javax.swing.plaf.ComponentUI)">
            <summary>
            Sets the look and feel delegate for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setVerifyInputWhenFocusTarget(System.Boolean)">
            <summary>
            Sets the value to indicate whether input verifier for the
            current focus owner will be called before this component requests
            focus.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.setVisible(System.Boolean)">
            <summary>
            Makes the component visible or invisible.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)">
            <summary>
            This method is now obsolete.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.update(java.awt.Graphics)">
            <summary>
            Calls <code>paint</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JComponent.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)">
            <summary>
            Adds an <code>ActionListener</code> to the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a <code>ChangeListener</code> to the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)">
            <summary>
            Adds an <code>ItemListener</code> to the <code>checkbox</code>.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.checkHorizontalKey(System.Int32,System.String)">
            <summary>
            Verify that key is a legal value for the
            <code>horizontalAlignment</code> properties.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.checkVerticalKey(System.Int32,System.String)">
            <summary>
            Ensures that the key is a valid.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>ActionEvent</code>
            source's properties according to values from the
            <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.createActionListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.createActionPropertyChangeListener(javax.swing.Action)">
            <summary>
            Factory method which creates the <code>PropertyChangeListener</code>
            used to update the <code>ActionEvent</code> source as properties
            change on its <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.createChangeListener">
            <summary>
            Subclasses that want to handle <code>ChangeEvents</code> differently
            can override this to return another <code>ChangeListener</code>
            implementation.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.createItemListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.doClick">
            <summary>
            Programmatically perform a "click".
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.doClick(System.Int32)">
            <summary>
            Programmatically perform a "click".
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.fireActionPerformed(java.awt.event.ActionEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.fireItemStateChanged(java.awt.event.ItemEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.fireStateChanged">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getAction">
            <summary>
            Returns the currently set <code>Action</code> for this
            <code>ActionEvent</code> source, or <code>null</code>
            if no <code>Action</code> is set.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getActionCommand">
            <summary>
            Returns the action command for this button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getActionListeners">
            <summary>
            Returns an array of all the <code>ActionListener</code>s added
            to this AbstractButton with addActionListener().
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getChangeListeners">
            <summary>
            Returns an array of all the <code>ChangeListener</code>s added
            to this AbstractButton with addChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getDisabledIcon">
            <summary>
            Returns the icon used by the button when it's disabled.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getDisabledSelectedIcon">
            <summary>
            Returns the icon used by the button when it's disabled and selected.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getDisplayedMnemonicIndex">
            <summary>
            Returns the character, as an index, that the look and feel should
            provide decoration for as representing the mnemonic character.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getHorizontalAlignment">
            <summary>
            Returns the horizontal alignment of the icon and text.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getHorizontalTextPosition">
            <summary>
            Returns the horizontal position of the text relative to the icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getIcon">
            <summary>
            Returns the default icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getIconTextGap">
            <summary>
            Returns the amount of space between the text and the icon
            displayed in this button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getItemListeners">
            <summary>
            Returns an array of all the <code>ItemListener</code>s added
            to this AbstractButton with addItemListener().
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getLabel">
            <summary>
            <B>Deprecated.</B> <I>- Replaced by <code>getText</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getMargin">
            <summary>
            Returns the margin between the button's border and
            the label.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getMnemonic">
            <summary>
            Returns the keyboard mnemonic from the the current model.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getModel">
            <summary>
            Returns the model that this button represents.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getMultiClickThreshhold">
            <summary>
            Gets the amount of time (in milliseconds) required between
            mouse press events for the button to generate the corresponding
            action events.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getPressedIcon">
            <summary>
            Returns the pressed icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getRolloverIcon">
            <summary>
            Returns the rollover icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getRolloverSelectedIcon">
            <summary>
            Returns the rollover selection icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getSelectedIcon">
            <summary>
            Returns the selected icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getSelectedObjects">
            <summary>
            Returns an array (length 1) containing the label or
            <code>null</code> if the button is not selected.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getText">
            <summary>
            Returns the button's text.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.AbstractButton.getUI" -->
        <member name="M:javax.swing.AbstractButton.getVerticalAlignment">
            <summary>
            Returns the vertical alignment of the text and icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.getVerticalTextPosition">
            <summary>
            Returns the vertical position of the text relative to the icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.imageUpdate(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is overridden to return false if the current <code>Icon</code>'s
            <code>Image</code> is not equal to the
            passed in <code>Image</code> <code>img</code>.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.init(System.String,javax.swing.Icon)">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.isBorderPainted">
            <summary>
            Gets the <code>borderPainted</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.isContentAreaFilled">
            <summary>
            Gets the <code>contentAreaFilled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.isFocusPainted">
            <summary>
            Gets the <code>paintFocus</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.isRolloverEnabled">
            <summary>
            Gets the <code>rolloverEnabled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.isSelected">
            <summary>
            Returns the state of the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.paintBorder(java.awt.Graphics)">
            <summary>
            Paint the button's border if <code>BorderPainted</code>
            property is true and the button has a border.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.paramString">
            <summary>
            Returns a string representation of this <code>AbstractButton</code>.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.removeActionListener(java.awt.event.ActionListener)">
            <summary>
            Removes an <code>ActionListener</code> from the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a ChangeListener from the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)">
            <summary>
            Removes an <code>ItemListener</code> from the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setAction(javax.swing.Action)">
            <summary>
            Sets the <code>Action</code> for the <code>ActionEvent</code> source.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setActionCommand(System.String)">
            <summary>
            Sets the action command for this button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setBorderPainted(System.Boolean)">
            <summary>
            Sets the <code>borderPainted</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setContentAreaFilled(System.Boolean)">
            <summary>
            Sets the <code>contentAreaFilled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setDisabledIcon(javax.swing.Icon)">
            <summary>
            Sets the disabled icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setDisabledSelectedIcon(javax.swing.Icon)">
            <summary>
            Sets the disabled selection icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setDisplayedMnemonicIndex(System.Int32)">
            <summary>
            Provides a hint to the look and feel as to which character in the
            text should be decorated to represent the mnemonic.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setEnabled(System.Boolean)">
            <summary>
            Enables (or disables) the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setFocusPainted(System.Boolean)">
            <summary>
            Sets the <code>paintFocus</code> property, which must
            be <code>true</code> for the focus state to be painted.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setHorizontalAlignment(System.Int32)">
            <summary>
            Sets the horizontal alignment of the icon and text.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setHorizontalTextPosition(System.Int32)">
            <summary>
            Sets the horizontal position of the text relative to the icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setIcon(javax.swing.Icon)">
            <summary>
            Sets the button's default icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setIconTextGap(System.Int32)">
            <summary>
            If both the icon and text properties are set, this property
            defines the space between them.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setLabel(System.String)">
            <summary>
            <B>Deprecated.</B> <I>- Replaced by <code>setText(text)</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setMargin(java.awt.Insets)">
            <summary>
            Sets space for margin between the button's border and
            the label.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setMnemonic(System.Char)">
            <summary>
            This method is now obsolete, please use <code>setMnemonic(int)</code>
            to set the mnemonic for a button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setMnemonic(System.Int32)">
            <summary>
            Sets the keyboard mnemonic on the current model.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setModel(javax.swing.ButtonModel)">
            <summary>
            Sets the model that this button represents.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setMultiClickThreshhold(System.Int64)">
            <summary>
            Sets the amount of time (in milliseconds) required between
            mouse press events for the button to generate the corresponding
            action events.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setPressedIcon(javax.swing.Icon)">
            <summary>
            Sets the pressed icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setRolloverEnabled(System.Boolean)">
            <summary>
            Sets the <code>rolloverEnabled</code> property, which
            must be <code>true</code> for rollover effects to occur.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setRolloverIcon(javax.swing.Icon)">
            <summary>
            Sets the rollover icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setRolloverSelectedIcon(javax.swing.Icon)">
            <summary>
            Sets the rollover selected icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setSelected(System.Boolean)">
            <summary>
            Sets the state of the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setSelectedIcon(javax.swing.Icon)">
            <summary>
            Sets the selected icon for the button.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setText(System.String)">
            <summary>
            Sets the button's text.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.AbstractButton.setUI(javax.swing.plaf.ButtonUI)" -->
        <member name="M:javax.swing.AbstractButton.setVerticalAlignment(System.Int32)">
            <summary>
            Sets the vertical alignment of the icon and text.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.setVerticalTextPosition(System.Int32)">
            <summary>
            Sets the vertical position of the text relative to the icon.
            </summary>
        </member>
        <member name="M:javax.swing.AbstractButton.updateUI">
            <summary>
            Resets the UI property to a value from the current look
            and feel.
            </summary>
        </member>
        <member name="M:javax.swing.Action.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChange</code> listener.
            </summary>
        </member>
        <member name="M:javax.swing.Action.getValue(System.String)">
            <summary>
            Gets one of this object's properties
            using the associated key.
            </summary>
        </member>
        <member name="M:javax.swing.Action.isEnabled">
            <summary>
            Returns the enabled state of the <code>Action</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Action.putValue(System.String,System.Object)">
            <summary>
            Sets one of this object's properties
            using the associated key.
            </summary>
        </member>
        <member name="M:javax.swing.Action.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChange</code> listener.
            </summary>
        </member>
        <member name="M:javax.swing.Action.setEnabled(System.Boolean)">
            <summary>
            Sets the enabled state of the <code>Action</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.#ctor">
            <summary>
            Creates an <code>ActionMap</code> with no parent and no mappings.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.allKeys">
            <summary>
            Returns an array of the keys defined in this <code>ActionMap</code> and
            its parent.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.clear">
            <summary>
            Removes all the mappings from this <code>ActionMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.get(System.Object)">
            <summary>
            Returns the binding for <code>key</code>, messaging the
            parent <code>ActionMap</code> if the binding is not locally defined.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.getParent">
            <summary>
            Returns this <code>ActionMap</code>'s parent.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.keys">
            <summary>
            Returns the <code>Action</code> names that are bound in this <code>ActionMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.put(System.Object,javax.swing.Action)">
            <summary>
            Adds a binding for <code>key</code> to <code>action</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.remove(System.Object)">
            <summary>
            Removes the binding for <code>key</code> from this <code>ActionMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.setParent(javax.swing.ActionMap)">
            <summary>
            Sets this <code>ActionMap</code>'s parent.
            </summary>
        </member>
        <member name="M:javax.swing.ActionMap.size">
            <summary>
            Returns the number of <code>KeyStroke</code> bindings.
            </summary>
        </member>
        <member name="M:javax.swing.border.Border.getBorderInsets(java.awt.Component)">
            <summary>
            Returns the insets of the border.
            </summary>
        </member>
        <member name="M:javax.swing.border.Border.isBorderOpaque">
            <summary>
            Returns whether or not the border is opaque.
            </summary>
        </member>
        <member name="M:javax.swing.border.Border.paintBorder(java.awt.Component,java.awt.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints the border for the specified component with the specified
            position and size.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a ChangeListener to the model's listener list.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.getExtent">
            <summary>
            Returns the model's extent, the length of the inner range that
            begins at the model's value.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.getMaximum">
            <summary>
            Returns the model's maximum.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.getMinimum">
            <summary>
            Returns the minimum acceptable value.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.getValue">
            <summary>
            Returns the model's current value.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.getValueIsAdjusting">
            <summary>
            Returns true if the current changes to the value property are part
            of a series of changes.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a ChangeListener from the model's listener list.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setExtent(System.Int32)">
            <summary>
            Sets the model's extent.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setMaximum(System.Int32)">
            <summary>
            Sets the model's maximum to <I>newMaximum</I>.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setMinimum(System.Int32)">
            <summary>
            Sets the model's minimum to <I>newMinimum</I>.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setRangeProperties(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method sets all of the model's data with a single method call.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setValue(System.Int32)">
            <summary>
            Sets the model's current value to <code>newValue</code> if <code>newValue</code>
            satisfies the model's constraints.
            </summary>
        </member>
        <member name="M:javax.swing.BoundedRangeModel.setValueIsAdjusting(System.Boolean)">
            <summary>
            This attribute indicates that any upcoming changes to the value
            of the model should be considered a single event.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.#ctor">
            <summary>
            Creates a new <code>ButtonGroup</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.add(javax.swing.AbstractButton)">
            <summary>
            Adds the button to the group.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.getButtonCount">
            <summary>
            Returns the number of buttons in the group.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.getElements">
            <summary>
            Returns all the buttons that are participating in
            this group.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.getSelection">
            <summary>
            Returns the model of the selected button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.isSelected(javax.swing.ButtonModel)">
            <summary>
            Returns whether a <code>ButtonModel</code> is selected.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.remove(javax.swing.AbstractButton)">
            <summary>
            Removes the button from the group.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonGroup.setSelected(javax.swing.ButtonModel,System.Boolean)">
            <summary>
            Sets the selected value for the <code>ButtonModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.ItemSelectable.addItemListener(java.awt.event.ItemListener)">
            <summary>
            Adds a listener to receive item events when the state of an item is
            changed by the user.
            </summary>
        </member>
        <member name="M:java.awt.ItemSelectable.getSelectedObjects">
            <summary>
            Returns the selected items or <code>null</code> if no
            items are selected.
            </summary>
        </member>
        <member name="M:java.awt.ItemSelectable.removeItemListener(java.awt.event.ItemListener)">
            <summary>
            Removes an item listener.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.addActionListener(java.awt.event.ActionListener)">
            <summary>
            Adds an ActionListener to the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a ChangeListener to the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.addItemListener(java.awt.event.ItemListener)">
            <summary>
            Adds an ItemListener to the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.getActionCommand">
            <summary>
            Returns the action command for this button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.getMnemonic">
            <summary>
            Gets the keyboard mnemonic for this model
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.isArmed">
            <summary>
            Indicates partial commitment towards pressing the
            button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.isEnabled">
            <summary>
            Indicates if the button can be selected or pressed by
            an input device (such as a mouse pointer).
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.isPressed">
            <summary>
            Indicates if button has been pressed.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.isRollover">
            <summary>
            Indicates that the mouse is over the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.isSelected">
            <summary>
            Indicates if the button has been selected.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.removeActionListener(java.awt.event.ActionListener)">
            <summary>
            Removes an ActionListener from the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a ChangeListener from the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.removeItemListener(java.awt.event.ItemListener)">
            <summary>
            Removes an ItemListener from the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setActionCommand(System.String)">
            <summary>
            Sets the actionCommand string that gets sent as part of the
            event when the button is pressed.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setArmed(System.Boolean)">
            <summary>
            Marks the button as "armed".
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setEnabled(System.Boolean)">
            <summary>
            Enables or disables the button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setGroup(javax.swing.ButtonGroup)">
            <summary>
            Identifies the group this button belongs to --
            needed for radio buttons, which are mutually
            exclusive within their group.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setMnemonic(System.Int32)">
            <summary>
            Sets the keyboard mnemonic (shortcut key or
            accelerator key) for this button.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setPressed(System.Boolean)">
            <summary>
            Sets the button to pressed or unpressed.
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setRollover(System.Boolean)">
            <summary>
            Sets or clears the button's rollover state
            </summary>
        </member>
        <member name="M:javax.swing.ButtonModel.setSelected(System.Boolean)">
            <summary>
            Selects or deselects the button.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.addCellEditorListener(javax.swing.event.CellEditorListener)">
            <summary>
            Adds a listener to the list that's notified when the editor
            stops, or cancels editing.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.cancelCellEditing">
            <summary>
            Tells the editor to cancel editing and not accept any partially
            edited value.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.getCellEditorValue">
            <summary>
            Returns the value contained in the editor.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.isCellEditable(java.util.EventObject)">
            <summary>
            Asks the editor if it can start editing using <code>anEvent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.removeCellEditorListener(javax.swing.event.CellEditorListener)">
            <summary>
            Removes a listener from the list that's notified
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.shouldSelectCell(java.util.EventObject)">
            <summary>
            Returns true if the editing cell should be selected, false otherwise.
            </summary>
        </member>
        <member name="M:javax.swing.CellEditor.stopCellEditing">
            <summary>
            Tells the editor to stop editing and accept any partially edited
            value as the value of the editor.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.#ctor">
            <summary>
            Creates an <code>InputMap</code> with no parent and no mappings.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.allKeys">
            <summary>
            Returns an array of the <code>KeyStroke</code>s defined in this
            <code>InputMap</code> and its parent.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.clear">
            <summary>
            Removes all the mappings from this <code>InputMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.get(javax.swing.KeyStroke)">
            <summary>
            Returns the binding for <code>keyStroke</code>, messaging the
            parent <code>InputMap</code> if the binding is not locally defined.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.getParent">
            <summary>
            Gets this <code>InputMap</code>'s parent.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.keys">
            <summary>
            Returns the <code>KeyStroke</code>s that are bound in this <code>InputMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.put(javax.swing.KeyStroke,System.Object)">
            <summary>
            Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.remove(javax.swing.KeyStroke)">
            <summary>
            Removes the binding for <code>key</code> from this
            <code>InputMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.setParent(javax.swing.InputMap)">
            <summary>
            Sets this <code>InputMap</code>'s parent.
            </summary>
        </member>
        <member name="M:javax.swing.InputMap.size">
            <summary>
            Returns the number of <code>KeyStroke</code> bindings.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.#ctor(javax.swing.JComponent)">
            <summary>
            Creates a <code>ComponentInputMap</code> associated with the
            specified component.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.clear">
            <summary>
            Removes all the mappings from this object.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.getComponent">
            <summary>
            Returns the component the <code>InputMap</code> was created for.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.put(javax.swing.KeyStroke,System.Object)">
            <summary>
            Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.remove(javax.swing.KeyStroke)">
            <summary>
            Removes the binding for <code>key</code> from this object.
            </summary>
        </member>
        <member name="M:javax.swing.ComponentInputMap.setParent(javax.swing.InputMap)">
            <summary>
            Sets the parent, which must be a <code>ComponentInputMap</code>
            associated with the same component as this
            <code>ComponentInputMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.activateFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, indicate that this frame has focus.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.beginDraggingFrame(javax.swing.JComponent)">
            <summary>
            This method is normally called when the user has indicated that
            they will begin dragging a component around.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.beginResizingFrame(javax.swing.JComponent,System.Int32)">
            <summary>
            This methods is normally called when the user has indicated that
            they will begin resizing the frame.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.closeFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, this call should remove the frame from it's parent.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.deactivateFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, indicate that this frame has lost focus.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.deiconifyFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, remove any iconic representation that is present and restore the
            frame to it's original size and location.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.dragFrame(javax.swing.JComponent,System.Int32,System.Int32)">
            <summary>
            The user has moved the frame.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.endDraggingFrame(javax.swing.JComponent)">
            <summary>
            This method signals the end of the dragging session.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.endResizingFrame(javax.swing.JComponent)">
            <summary>
            This method signals the end of the resize session.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.iconifyFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, remove this frame from it's parent and add an iconic representation.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.maximizeFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, the frame should be resized to match it's parents bounds.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.minimizeFrame(javax.swing.JInternalFrame)">
            <summary>
            Generally, this indicates that the frame should be restored to it's
            size and position prior to a maximizeFrame() call.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.openFrame(javax.swing.JInternalFrame)">
            <summary>
            If possible, display this frame in an appropriate location.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.resizeFrame(javax.swing.JComponent,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The user has resized the component.
            </summary>
        </member>
        <member name="M:javax.swing.DesktopManager.setBoundsForFrame(javax.swing.JComponent,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is a primitive reshape method.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorEvent.#ctor(javax.swing.JComponent,System.Int32,java.awt.Container,java.awt.Container)">
            <summary>
            Constructs an AncestorEvent object to identify a change
            in an ancestor-component's display-status.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorEvent.getAncestor">
            <summary>
            Returns the ancestor that the event actually occurred on.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorEvent.getAncestorParent">
            <summary>
            Returns the parent of the ancestor the event actually occurred on.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorEvent.getComponent">
            <summary>
            Returns the component that the listener was added to.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorListener.ancestorAdded(javax.swing.event.AncestorEvent)">
            <summary>
            Called when the source or one of its ancestors is made visible
            either by setVisible(true) being called or by its being
            added to the component hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorListener.ancestorMoved(javax.swing.event.AncestorEvent)">
            <summary>
            Called when either the source or one of its ancestors is moved.
            </summary>
        </member>
        <member name="M:javax.swing.event.AncestorListener.ancestorRemoved(javax.swing.event.AncestorEvent)">
            <summary>
            Called when the source or one of its ancestors is made invisible
            either by setVisible(false) being called or by its being
            remove from the component hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.event.CaretEvent.#ctor(System.Object)">
            <summary>
            Creates a new CaretEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.CaretEvent.getDot">
            <summary>
            Fetches the location of the caret.
            </summary>
        </member>
        <member name="M:javax.swing.event.CaretEvent.getMark">
            <summary>
            Fetches the location of other end of a logical
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.event.CaretListener.caretUpdate(javax.swing.event.CaretEvent)">
            <summary>
            Called when the caret position is updated.
            </summary>
        </member>
        <member name="M:javax.swing.event.CellEditorListener.editingCanceled(javax.swing.event.ChangeEvent)">
            <summary>
            This tells the listeners the editor has canceled editing
            </summary>
        </member>
        <member name="M:javax.swing.event.CellEditorListener.editingStopped(javax.swing.event.ChangeEvent)">
            <summary>
            This tells the listeners the editor has ended editing
            </summary>
        </member>
        <member name="M:javax.swing.event.ChangeEvent.#ctor(System.Object)">
            <summary>
            Constructs a ChangeEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.ChangeListener.stateChanged(javax.swing.event.ChangeEvent)">
            <summary>
            Invoked when the target of the listener has changed its state.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentEvent.getDocument">
            <summary>
            Gets the document that sourced the change event.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentEvent.getLength">
            <summary>
            Returns the length of the change.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentEvent.getOffset">
            <summary>
            Returns the offset within the document of the start
            of the change.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent)">
            <summary>
            Gives notification that an attribute or set of attributes changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent)">
            <summary>
            Gives notification that there was an insert into the document.
            </summary>
        </member>
        <member name="M:javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent)">
            <summary>
            Gives notification that a portion of the document has been
            removed.
            </summary>
        </member>
        <member name="M:javax.swing.event.HyperlinkEvent.getDescription">
            <summary>
            Get the description of the link as a string.
            </summary>
        </member>
        <member name="M:javax.swing.event.HyperlinkEvent.getSourceElement">
            <summary>
            Returns the <code>Element</code> that corresponds to the source of the
            event.
            </summary>
        </member>
        <member name="M:javax.swing.event.HyperlinkEvent.getURL">
            <summary>
            Gets the URL that the link refers to.
            </summary>
        </member>
        <member name="M:javax.swing.event.HyperlinkListener.hyperlinkUpdate(javax.swing.event.HyperlinkEvent)">
            <summary>
            Called when a hypertext link is updated.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameEvent.#ctor(javax.swing.JInternalFrame,System.Int32)">
            <summary>
            Constructs an <code>InternalFrameEvent</code> object.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameEvent.getInternalFrame">
            <summary>
            Returns the originator of the event.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameActivated(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame is activated.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameClosed(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame has been closed.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameClosing(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame is in the process of being closed.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameDeactivated(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame is de-activated.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameDeiconified(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame is de-iconified.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameIconified(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when an internal frame is iconified.
            </summary>
        </member>
        <member name="M:javax.swing.event.InternalFrameListener.internalFrameOpened(javax.swing.event.InternalFrameEvent)">
            <summary>
            Invoked when a internal frame has been opened.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.event.ListSelectionEvent.#ctor(System.Object,System.Int32,System.Int32,System.Boolean)" -->
        <member name="M:javax.swing.event.ListSelectionEvent.getFirstIndex">
            <summary>
            Returns the index of the first row whose selection may have changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.ListSelectionEvent.getLastIndex">
            <summary>
            Returns the index of the last row whose selection may have changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.ListSelectionEvent.getValueIsAdjusting">
            <summary>
            Returns true if this is one of multiple change events.
            </summary>
        </member>
        <member name="M:javax.swing.event.ListSelectionEvent.ToString">
            <summary>
            Returns a string that displays and identifies this
            object's properties.
            </summary>
        </member>
        <member name="M:javax.swing.event.ListSelectionListener.valueChanged(javax.swing.event.ListSelectionEvent)">
            <summary>
            Called whenever the value of the selection changes.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseEvent.#ctor(java.awt.Component,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Constructs a MenuDragMouseEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseEvent.getMenuSelectionManager">
            <summary>
            Returns the current menu selection manager.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseEvent.getPath">
            <summary>
            Returns the path to the selected menu item.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseListener.menuDragMouseDragged(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Invoked when the mouse is being dragged in a menu component's
            display area.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseListener.menuDragMouseEntered(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Invoked when the dragged mouse has entered a menu component's
            display area.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseListener.menuDragMouseExited(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Invoked when the dragged mouse has left a menu component's
            display area.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuDragMouseListener.menuDragMouseReleased(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Invoked when a dragged mouse is release in a menu component's
            display area.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuEvent.#ctor(System.Object)">
            <summary>
            Constructs a MenuEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyEvent.#ctor(java.awt.Component,System.Int32,System.Int64,System.Int32,System.Int32,System.Char,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Constructs a MenuKeyEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyEvent.getMenuSelectionManager">
            <summary>
            Returns the current menu selection manager.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyEvent.getPath">
            <summary>
            Returns the path to the menu item referenced by this event.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyListener.menuKeyPressed(javax.swing.event.MenuKeyEvent)">
            <summary>
            Invoked when a key has been pressed.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyListener.menuKeyReleased(javax.swing.event.MenuKeyEvent)">
            <summary>
            Invoked when a key has been released.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuKeyListener.menuKeyTyped(javax.swing.event.MenuKeyEvent)">
            <summary>
            Invoked when a key has been typed.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuListener.menuCanceled(javax.swing.event.MenuEvent)">
            <summary>
            Invoked when the menu is canceled.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuListener.menuDeselected(javax.swing.event.MenuEvent)">
            <summary>
            Invoked when the menu is deselected.
            </summary>
        </member>
        <member name="M:javax.swing.event.MenuListener.menuSelected(javax.swing.event.MenuEvent)">
            <summary>
            Invoked when a menu is selected.
            </summary>
        </member>
        <member name="M:javax.swing.event.PopupMenuEvent.#ctor(System.Object)">
            <summary>
            Constructs a PopupMenuEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.PopupMenuListener.popupMenuCanceled(javax.swing.event.PopupMenuEvent)">
            <summary>
            This method is called when the popup menu is canceled
            </summary>
        </member>
        <member name="M:javax.swing.event.PopupMenuListener.popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent)">
            <summary>
            This method is called before the popup menu becomes invisible
            Note that a JPopupMenu can become invisible any time
            </summary>
        </member>
        <member name="M:javax.swing.event.PopupMenuListener.popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent)">
            <summary>
            This method is called before the popup menu becomes visible
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelEvent.#ctor(javax.swing.table.TableColumnModel,System.Int32,System.Int32)">
            <summary>
            Constructs a TableColumnModelEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelEvent.getFromIndex">
            <summary>
            Returns the fromIndex.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelEvent.getToIndex">
            <summary>
            Returns the toIndex.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelListener.columnAdded(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Tells listeners that a column was added to the model.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelListener.columnMarginChanged(javax.swing.event.ChangeEvent)">
            <summary>
            Tells listeners that a column was moved due to a margin change.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelListener.columnMoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Tells listeners that a column was repositioned.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelListener.columnRemoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Tells listeners that a column was removed from the model.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableColumnModelListener.columnSelectionChanged(javax.swing.event.ListSelectionEvent)">
            <summary>
            Tells listeners that the selection model of the
            TableColumnModel changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.#ctor(javax.swing.table.TableModel)">
            <summary>
            All row data in the table has changed, listeners should discard any state
            that was based on the rows and requery the <code>TableModel</code>
            to get the new row count and all the appropriate values.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.#ctor(javax.swing.table.TableModel,System.Int32)">
            <summary>
            This row of data has been updated.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.#ctor(javax.swing.table.TableModel,System.Int32,System.Int32)">
            <summary>
            The data in rows [<I>firstRow</I>, <I>lastRow</I>] have been updated.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.#ctor(javax.swing.table.TableModel,System.Int32,System.Int32,System.Int32)">
            <summary>
            The cells in column <I>column</I> in the range
            [<I>firstRow</I>, <I>lastRow</I>] have been updated.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.#ctor(javax.swing.table.TableModel,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The cells from (firstRow, column) to (lastRow, column) have been changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.getColumn">
            <summary>
            Returns the column for the event.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.getFirstRow">
            <summary>
            Returns the first row that changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.getLastRow">
            <summary>
            Returns the last row that changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelEvent.getType">
            <summary>
            Returns the type of event - one of: INSERT, UPDATE and DELETE.
            </summary>
        </member>
        <member name="M:javax.swing.event.TableModelListener.tableChanged(javax.swing.event.TableModelEvent)">
            <summary>
            This fine grain notification tells listeners the exact range
            of cells, rows, or columns that changed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeExpansionEvent.#ctor(System.Object,javax.swing.tree.TreePath)">
            <summary>
            Constructs a TreeExpansionEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeExpansionEvent.getPath">
            <summary>
            Returns the path to the value that has been expanded/collapsed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeExpansionListener.treeCollapsed(javax.swing.event.TreeExpansionEvent)">
            <summary>
            Called whenever an item in the tree has been collapsed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeExpansionListener.treeExpanded(javax.swing.event.TreeExpansionEvent)">
            <summary>
            Called whenever an item in the tree has been expanded.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.#ctor(System.Object,System.Object[])">
            <summary>
            Used to create an event when the node structure has changed in some way,
            identifying the path to the root of a modified subtree as an array of
            Objects.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.#ctor(System.Object,System.Object[],System.Int32[],System.Object[])">
            <summary>
            Used to create an event when nodes have been changed, inserted, or
            removed, identifying the path to the parent of the modified items as
            an array of Objects.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.#ctor(System.Object,javax.swing.tree.TreePath)">
            <summary>
            Used to create an event when the node structure has changed in some way,
            identifying the path to the root of the modified subtree as a TreePath
            object.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.#ctor(System.Object,javax.swing.tree.TreePath,System.Int32[],System.Object[])">
            <summary>
            Used to create an event when nodes have been changed, inserted, or
            removed, identifying the path to the parent of the modified items as
            a TreePath object.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.getChildIndices">
            <summary>
            Returns the values of the child indexes.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.getChildren">
            <summary>
            Returns the objects that are children of the node identified by
            <code>getPath</code> at the locations specified by
            <code>getChildIndices</code>.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.getPath">
            <summary>
            Convenience method to get the array of objects from the TreePath
            instance that this event wraps.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.getTreePath">
            <summary>
            For all events, except treeStructureChanged,
            returns the parent of the changed nodes.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelEvent.ToString">
            <summary>
            Returns a string that displays and identifies this object's
            properties.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelListener.treeNodesChanged(javax.swing.event.TreeModelEvent)">
            <summary>
            Invoked after a node (or a set of siblings) has changed in some
            way.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelListener.treeNodesInserted(javax.swing.event.TreeModelEvent)">
            <summary>
            Invoked after nodes have been inserted into the tree.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelListener.treeNodesRemoved(javax.swing.event.TreeModelEvent)">
            <summary>
            Invoked after nodes have been removed from the tree.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeModelListener.treeStructureChanged(javax.swing.event.TreeModelEvent)">
            <summary>
            Invoked after the tree has drastically changed structure from a
            given node down.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.#ctor(System.Object,javax.swing.tree.TreePath[],System.Boolean[],javax.swing.tree.TreePath,javax.swing.tree.TreePath)">
            <summary>
            Represents a change in the selection of a TreeSelectionModel.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.#ctor(System.Object,javax.swing.tree.TreePath,System.Boolean,javax.swing.tree.TreePath,javax.swing.tree.TreePath)">
            <summary>
            Represents a change in the selection of a TreeSelectionModel.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.cloneWithSource(System.Object)">
            <summary>
            Returns a copy of the receiver, but with the source being newSource.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.getNewLeadSelectionPath">
            <summary>
            Returns the current lead path.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.getOldLeadSelectionPath">
            <summary>
            Returns the path that was previously the lead path.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.getPath">
            <summary>
            Returns the first path element.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.getPaths">
            <summary>
            Returns the paths that have been added or removed from the
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.isAddedPath">
            <summary>
            Returns true if the first path element has been added to the
            selection, a return value of false means the first path has been
            removed from the selection.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.isAddedPath(System.Int32)">
            <summary>
            Returns true if the path identified by <code>index</code> was added to
            the selection.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionEvent.isAddedPath(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the path identified by path was added to the
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeSelectionListener.valueChanged(javax.swing.event.TreeSelectionEvent)">
            <summary>
            Called whenever the value of the selection changes.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeWillExpandListener.treeWillCollapse(javax.swing.event.TreeExpansionEvent)">
            <summary>
            Invoked whenever a node in the tree is about to be collapsed.
            </summary>
        </member>
        <member name="M:javax.swing.event.TreeWillExpandListener.treeWillExpand(javax.swing.event.TreeExpansionEvent)">
            <summary>
            Invoked whenever a node in the tree is about to be expanded.
            </summary>
        </member>
        <member name="M:javax.swing.event.UndoableEditEvent.#ctor(System.Object,javax.swing.undo.UndoableEdit)">
            <summary>
            Constructs an UndoableEditEvent object.
            </summary>
        </member>
        <member name="M:javax.swing.event.UndoableEditEvent.getEdit">
            <summary>
            Returns the edit value.
            </summary>
        </member>
        <member name="M:javax.swing.event.UndoableEditListener.undoableEditHappened(javax.swing.event.UndoableEditEvent)">
            <summary>
            An undoable edit happened
            </summary>
        </member>
        <member name="M:javax.swing.Icon.getIconHeight">
            <summary>
            Returns the icon's height.
            </summary>
        </member>
        <member name="M:javax.swing.Icon.getIconWidth">
            <summary>
            Returns the icon's width.
            </summary>
        </member>
        <member name="M:javax.swing.Icon.paintIcon(java.awt.Component,java.awt.Graphics,System.Int32,System.Int32)">
            <summary>
            Draw the icon at the specified location.
            </summary>
        </member>
        <member name="M:javax.swing.InputVerifier.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.InputVerifier.shouldYieldFocus(javax.swing.JComponent)">
            <summary>
            Calls <code>verify(input)</code> to ensure that the input is valid.
            </summary>
        </member>
        <member name="M:javax.swing.InputVerifier.verify(javax.swing.JComponent)">
            <summary>
            Checks whether the JComponent's input is valid.
            </summary>
        </member>
        <member name="M:java.applet.Applet.getParameter(System.String)">
            <summary>
            Returns the value of the named parameter in the HTML tag.
            </summary>
        </member>
        <member name="P:java.applet.Applet.DocumentBase">
            <summary>
            Gets the URL of the document in which this applet is embedded.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.#ctor">
            <summary>
            Creates a swing applet instance.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            By default, children may not be added directly to a this component,
            they must be added to its contentPane instead.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.createRootPane">
            <summary>
            Called by the constructor methods to create the default rootPane.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JApplet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getContentPane">
            <summary>
            Returns the contentPane object for this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getGlassPane">
            <summary>
            Returns the glassPane object for this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getJMenuBar">
            <summary>
            Returns the menubar set on this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getLayeredPane">
            <summary>
            Returns the layeredPane object for this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.getRootPane">
            <summary>
            Returns the rootPane object for this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.isRootPaneCheckingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.paramString">
            <summary>
            Returns a string representation of this JApplet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.remove(java.awt.Component)">
            <summary>
            Removes the specified component from this container.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setContentPane(java.awt.Container)">
            <summary>
            Sets the contentPane property.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setGlassPane(java.awt.Component)">
            <summary>
            Sets the glassPane property.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setJMenuBar(javax.swing.JMenuBar)">
            <summary>
            Sets the menubar for this applet.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setLayeredPane(javax.swing.JLayeredPane)">
            <summary>
            Sets the layeredPane property.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setLayout(java.awt.LayoutManager)">
            <summary>
            By default the layout of this component may not be set,
            the layout of its contentPane should be set instead.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setRootPane(javax.swing.JRootPane)">
            <summary>
            Sets the rootPane property.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.setRootPaneCheckingEnabled(System.Boolean)">
            <summary>
            If true then calls to add() and setLayout() will cause an exception
            to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JApplet.update(java.awt.Graphics)">
            <summary>
            Just calls <code>paint(g)</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.#ctor">
            <summary>
            Creates a button with no set text or icon.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.#ctor(javax.swing.Action)">
            <summary>
            Creates a button where properties are taken from the
            <code>Action</code> supplied.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.#ctor(javax.swing.Icon)">
            <summary>
            Creates a button with an icon.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.#ctor(System.String)">
            <summary>
            Creates a button with text.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.#ctor(System.String,javax.swing.Icon)">
            <summary>
            Creates a button with initial text and an icon.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>AbstractButton</code>'s properties
            according to values from the <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JButton</code>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JButton.getUIClassID" -->
        <member name="M:javax.swing.JButton.isDefaultButton">
            <summary>
            Gets the value of the <code>defaultButton</code> property,
            which if <code>true</code> means that this button is the current
            default button for its <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.isDefaultCapable">
            <summary>
            Gets the value of the <code>defaultCapable</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.paramString">
            <summary>
            Returns a string representation of this <code>JButton</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.removeNotify">
            <summary>
            Overrides <code>JComponent.removeNotify</code> to check if
            this button is currently set as the default button on the
            <code>RootPane</code>, and if so, sets the <code>RootPane</code>'s
            default button to <code>null</code> to ensure the
            <code>RootPane</code> doesn't hold onto an invalid button reference.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.setDefaultCapable(System.Boolean)">
            <summary>
            Sets the <code>defaultCapable</code> property,
            which determines whether this button can be
            made the default button for its root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JButton.updateUI">
            <summary>
            Resets the UI property to a value from the current look and
            feel.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.#ctor">
            <summary>
            Create a new JLayeredPane
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Adds the specified component to this container at the specified
            index.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JLayeredPane.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getComponentCountInLayer(System.Int32)">
            <summary>
            Returns the number of children currently in the specified layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getComponentsInLayer(System.Int32)">
            <summary>
            Returns an array of the components in the specified layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getComponentToLayer">
            <summary>
            Returns the hashtable that maps components to layers.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getIndexOf(java.awt.Component)">
            <summary>
            Returns the index of the specified Component.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getLayer(java.awt.Component)">
            <summary>
            Returns the layer attribute for the specified Component.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getLayer(javax.swing.JComponent)">
            <summary>
            Gets the layer property for a JComponent, it
            does not cause any side effects like setLayer().
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getLayeredPaneAbove(java.awt.Component)">
            <summary>
            Convenience method that returns the first JLayeredPane which
            contains the specified component.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getObjectForLayer(System.Int32)">
            <summary>
            Returns the Integer object associated with a specified layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.getPosition(java.awt.Component)">
            <summary>
            Get the relative position of the component within its layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.highestLayer">
            <summary>
            Returns the highest layer value from all current children.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.insertIndexForLayer(System.Int32,System.Int32)">
            <summary>
            Primitive method that determines the proper location to
            insert a new child based on layer and position requests.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.isOptimizedDrawingEnabled">
            <summary>
            Returns false if components in the pane can overlap, which makes
            optimized drawing impossible.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.lowestLayer">
            <summary>
            Returns the lowest layer value from all current children.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.moveToBack(java.awt.Component)">
            <summary>
            Moves the component to the bottom of the components in its current layer
            (position -1).
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.moveToFront(java.awt.Component)">
            <summary>
            Moves the component to the top of the components in its current layer
            (position 0).
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.paint(java.awt.Graphics)">
            <summary>
            Paints this JLayeredPane within the specified graphics context.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.paramString">
            <summary>
            Returns a string representation of this JLayeredPane.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.putLayer(javax.swing.JComponent,System.Int32)">
            <summary>
            Sets the layer property on a JComponent.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.remove(System.Int32)">
            <summary>
            Remove the indexed component from this pane.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.setLayer(java.awt.Component,System.Int32)">
            <summary>
            Sets the layer attribute on the specified component,
            making it the bottommost component in that layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.setLayer(java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Sets the layer attribute for the specified component and
            also sets its position within that layer.
            </summary>
        </member>
        <member name="M:javax.swing.JLayeredPane.setPosition(java.awt.Component,System.Int32)">
            <summary>
            Moves the component to <code>position</code> within its current layer,
            where 0 is the topmost position within the layer and -1 is the bottommost
            position.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.#ctor">
            <summary>
            Creates a new <code>JDesktopPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JDesktopPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getAllFrames">
            <summary>
            Returns all <code>JInternalFrames</code> currently displayed in the
            desktop.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getAllFramesInLayer(System.Int32)">
            <summary>
            Returns all <code>JInternalFrames</code> currently displayed in the
            specified layer of the desktop.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getDesktopManager">
            <summary>
            Returns the <code>DesktopManger</code> that handles
            desktop-specific UI actions.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getDragMode">
            <summary>
            Gets the current "dragging style" used by the desktop pane.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.getSelectedFrame">
            <summary>
            Returns the currently active <code>JInternalFrame</code>
            in this <code>JDesktopPane</code>, or <code>null</code>
            if no <code>JInternalFrame</code> is currently active.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JDesktopPane.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JDesktopPane.getUIClassID" -->
        <member name="M:javax.swing.JDesktopPane.isOpaque">
            <summary>
            Returns true to indicate that this component paints every pixel
            in its range.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.paramString">
            <summary>
            Returns a string representation of this <code>JDesktopPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.setDesktopManager(javax.swing.DesktopManager)">
            <summary>
            Sets the <code>DesktopManger</code> that will handle
            desktop-specific UI actions.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.setDragMode(System.Int32)">
            <summary>
            Sets the "dragging style" used by the desktop pane.
            </summary>
        </member>
        <member name="M:javax.swing.JDesktopPane.setSelectedFrame(javax.swing.JInternalFrame)">
            <summary>
            Sets the currently active <code>JInternalFrame</code>
            in this <code>JDesktopPane</code>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JDesktopPane.setUI(javax.swing.plaf.DesktopPaneUI)" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JDesktopPane.updateUI" -->
        <member name="M:java.awt.Window.#ctor(java.awt.Frame)">
            <summary>
            Constructs a new invisible window with the specified
            <code>Frame</code> as its owner.
            </summary>
        </member>
        <member name="M:java.awt.Window.#ctor(java.awt.Window)">
            <summary>
            Constructs a new invisible window with the specified
            <code>Window</code> as its owner.
            </summary>
        </member>
        <member name="M:java.awt.Window.#ctor(java.awt.Window,java.awt.GraphicsConfiguration)">
            <summary>
            Constructs a new invisible window with the specified
            window as its owner and a
            <code>GraphicsConfiguration</code> of a screen device.
            </summary>
        </member>
        <member name="M:java.awt.Window.addNotify">
            <summary>
            Makes this Window displayable by creating the connection to its
            native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list.
            </summary>
        </member>
        <member name="M:java.awt.Window.addPropertyChangeListener(System.String,java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list for a specific
            property.
            </summary>
        </member>
        <member name="M:java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener)">
            <summary>
            Adds the specified window focus listener to receive window events
            from this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.addWindowListener(java.awt.event.WindowListener)">
            <summary>
            Adds the specified window listener to receive window events from
            this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener)">
            <summary>
            Adds the specified window state listener to receive window
            events from this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.applyResourceBundle(java.util.ResourceBundle)">
            <summary>
            <B>Deprecated.</B> <I>As of J2SE 1.4, replaced by
            <A HREF="../../java/awt/Component.html#applyComponentOrientation(java.awt.ComponentOrientation)"><CODE>Component.applyComponentOrientation</CODE></A>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Window.applyResourceBundle(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of J2SE 1.4, replaced by
            <A HREF="../../java/awt/Component.html#applyComponentOrientation(java.awt.ComponentOrientation)"><CODE>Component.applyComponentOrientation</CODE></A>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Window.createBufferStrategy(System.Int32)">
            <summary>
            Creates a new strategy for multi-buffering on this component.
            </summary>
        </member>
        <member name="M:java.awt.Window.createBufferStrategy(System.Int32,java.awt.BufferCapabilities)">
            <summary>
            Creates a new strategy for multi-buffering on this component with the
            required buffer capabilities.
            </summary>
        </member>
        <member name="M:java.awt.Window.dispose">
            <summary>
            Releases all of the native screen resources used by this
            <code>Window</code>, its subcomponents, and all of its owned
            children.
            </summary>
        </member>
        <member name="M:java.awt.Window.finalize">
            <summary>
            Disposes of the input methods and context, and removes the WeakReference
            which formerly pointed to this Window from the parent's owned Window
            list.
            </summary>
        </member>
        <member name="M:java.awt.Window.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this Window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getBufferStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.Window.getFocusableWindowState">
            <summary>
            Returns whether this Window can become the focused Window if it meets
            the other requirements outlined in <code>isFocusableWindow</code>.
            </summary>
        </member>
        <member name="M:java.awt.Window.getFocusCycleRootAncestor">
            <summary>
            Always returns <code>null</code> because Windows have no ancestors; they
            represent the top of the Component hierarchy.
            </summary>
        </member>
        <member name="M:java.awt.Window.getFocusOwner">
            <summary>
            Returns the child Component of this Window that has focus if this Window
            is focused; returns null otherwise.
            </summary>
        </member>
        <member name="M:java.awt.Window.getFocusTraversalKeys(System.Int32)">
            <summary>
            Gets a focus traversal key for this Window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getGraphicsConfiguration">
            <summary>
            This method returns the GraphicsConfiguration used by this Window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getInputContext">
            <summary>
            Gets the input context for this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this <code>Window</code>.
            </summary>
        </member>
        <member name="M:java.awt.Window.getLocale">
            <summary>
            Gets the <code>Locale</code> object that is associated
            with this window, if the locale has been set.
            </summary>
        </member>
        <member name="M:java.awt.Window.getMostRecentFocusOwner">
            <summary>
            Returns the child Component of this Window that will receive the focus
            when this Window is focused.
            </summary>
        </member>
        <member name="M:java.awt.Window.getOwnedWindows">
            <summary>
            Return an array containing all the windows this
            window currently owns.
            </summary>
        </member>
        <member name="M:java.awt.Window.getOwner">
            <summary>
            Returns the owner of this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getToolkit">
            <summary>
            Returns the toolkit of this frame.
            </summary>
        </member>
        <member name="M:java.awt.Window.getWarningString">
            <summary>
            Gets the warning string that is displayed with this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getWindowFocusListeners">
            <summary>
            Returns an array of all the window focus listeners
            registered on this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getWindowListeners">
            <summary>
            Returns an array of all the window listeners
            registered on this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.getWindowStateListeners">
            <summary>
            Returns an array of all the window state listeners
            registered on this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.hide">
            <summary>
            Hide this Window, its subcomponents, and all of its owned children.
            </summary>
        </member>
        <member name="M:java.awt.Window.isActive">
            <summary>
            Returns whether this Window is active.
            </summary>
        </member>
        <member name="M:java.awt.Window.isFocusableWindow">
            <summary>
            Returns whether this Window can become the focused Window, that is,
            whether this Window or any of its subcomponents can become the focus
            owner.
            </summary>
        </member>
        <member name="M:java.awt.Window.isFocusCycleRoot">
            <summary>
            Always returns <code>true</code> because all Windows must be roots of a
            focus traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.Window.isFocused">
            <summary>
            Returns whether this Window is focused.
            </summary>
        </member>
        <member name="M:java.awt.Window.isShowing">
            <summary>
            Checks if this Window is showing on screen.
            </summary>
        </member>
        <member name="M:java.awt.Window.pack">
            <summary>
            Causes this Window to be sized to fit the preferred size
            and layouts of its subcomponents.
            </summary>
        </member>
        <member name="M:java.awt.Window.postEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1
            replaced by <code>dispatchEvent(AWTEvent)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Window.processEvent(java.awt.AWTEvent)">
            <summary>
            Processes events on this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.processWindowEvent(java.awt.event.WindowEvent)">
            <summary>
            Processes window events occurring on this window by
            dispatching them to any registered WindowListener objects.
            </summary>
        </member>
        <member name="M:java.awt.Window.processWindowFocusEvent(java.awt.event.WindowEvent)">
            <summary>
            Processes window focus event occuring on this window by
            dispatching them to any registered WindowFocusListener objects.
            </summary>
        </member>
        <member name="M:java.awt.Window.processWindowStateEvent(java.awt.event.WindowEvent)">
            <summary>
            Processes window state event occuring on this window by
            dispatching them to any registered <code>WindowStateListener</code>
            objects.
            </summary>
        </member>
        <member name="M:java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener)">
            <summary>
            Removes the specified window focus listener so that it no longer
            receives window events from this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.removeWindowListener(java.awt.event.WindowListener)">
            <summary>
            Removes the specified window listener so that it no longer
            receives window events from this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener)">
            <summary>
            Removes the specified window state listener so that it no
            longer receives window events from this window.
            </summary>
        </member>
        <member name="M:java.awt.Window.setCursor(java.awt.Cursor)">
            <summary>
            Set the cursor image to a specified cursor.
            </summary>
        </member>
        <member name="M:java.awt.Window.setFocusableWindowState(System.Boolean)">
            <summary>
            Sets whether this Window can become the focused Window if it meets
            the other requirements outlined in <code>isFocusableWindow</code>.
            </summary>
        </member>
        <member name="M:java.awt.Window.setFocusCycleRoot(System.Boolean)">
            <summary>
            Does nothing because Windows must always be roots of a focus traversal
            cycle.
            </summary>
        </member>
        <member name="M:java.awt.Window.setLocationRelativeTo(java.awt.Component)">
            <summary>
            Sets the location of the window relative to the specified
            component.
            </summary>
        </member>
        <member name="M:java.awt.Window.show">
            <summary>
            Makes the Window visible.
            </summary>
        </member>
        <member name="M:java.awt.Window.toBack">
            <summary>
            If this Window is visible, sends this Window to the back and may cause
            it to lose focus or activation if it is the focused or active Window.
            </summary>
        </member>
        <member name="M:java.awt.Window.toFront">
            <summary>
            If this Window is visible, brings this Window to the front and may make
            it the focused Window.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Dialog)">
            <summary>
            Constructs an initially invisible, non-modal Dialog with
            an empty title and the specified owner dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Dialog,System.String)">
            <summary>
            Constructs an initially invisible, non-modal Dialog
            with the specified owner dialog and title.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Dialog,System.String,System.Boolean)">
            <summary>
            Constructs an initially invisible <code>Dialog</code> with the
            specified owner dialog, title, and modality.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Dialog,System.String,System.Boolean,java.awt.GraphicsConfiguration)">
            <summary>
            Constructs an initially invisible <code>Dialog</code> with the
            specified owner dialog, title, modality, and
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Frame)">
            <summary>
            Constructs an initially invisible, non-modal <code>Dialog</code> with
            an empty title and the specified owner frame.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Frame,System.Boolean)">
            <summary>
            Constructs an initially invisible <code>Dialog</code> with an empty title,
            the specified owner frame and modality.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Frame,System.String)">
            <summary>
            Constructs an initially invisible, non-modal <code>Dialog</code> with
            the specified owner frame and title.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Frame,System.String,System.Boolean)">
            <summary>
            Constructs an initially invisible <code>Dialog</code> with the
            specified owner frame, title, and modality.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.#ctor(java.awt.Frame,System.String,System.Boolean,java.awt.GraphicsConfiguration)">
            <summary>
            Constructs an initially invisible Dialog with the
            specified owner frame, title, modality, and
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.addNotify">
            <summary>
            Makes this Dialog displayable by connecting it to
            a native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.dispose">
            <summary>
            Disposes the Dialog and then causes show() to return if it is currently
            blocked.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this Dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.getTitle">
            <summary>
            Gets the title of the dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.hide">
            <summary>
            Hides the Dialog and then causes show() to return if it is currently
            blocked.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.isModal">
            <summary>
            Indicates whether the dialog is modal.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.isResizable">
            <summary>
            Indicates whether this dialog is resizable by the user.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.isUndecorated">
            <summary>
            Indicates whether this dialog is undecorated.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.paramString">
            <summary>
            Returns a string representing the state of this dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.setModal(System.Boolean)">
            <summary>
            Specifies whether this dialog should be modal.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.setResizable(System.Boolean)">
            <summary>
            Sets whether this dialog is resizable by the user.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.setTitle(System.String)">
            <summary>
            Sets the title of the Dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.setUndecorated(System.Boolean)">
            <summary>
            Disables or enables decorations for this dialog.
            </summary>
        </member>
        <member name="M:java.awt.Dialog.show">
            <summary>
            Makes the Dialog visible.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor">
            <summary>
            Creates a non-modal dialog without a title and without a specified
            <code>Frame</code> owner.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Dialog)">
            <summary>
            Creates a non-modal dialog without a title with the
            specified <code>Dialog</code> as its owner.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Dialog,System.Boolean)">
            <summary>
            Creates a modal or non-modal dialog without a title and
            with the specified owner dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Dialog,System.String)">
            <summary>
            Creates a non-modal dialog with the specified title and
            with the specified owner dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Dialog,System.String,System.Boolean)">
            <summary>
            Creates a modal or non-modal dialog with the specified title
            and the specified owner frame.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Dialog,System.String,System.Boolean,java.awt.GraphicsConfiguration)">
            <summary>
            Creates a modal or non-modal dialog with the specified title,
            owner <code>Dialog</code>, and <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Frame)">
            <summary>
            Creates a non-modal dialog without a title with the
            specified <code>Frame</code> as its owner.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Frame,System.Boolean)">
            <summary>
            Creates a modal or non-modal dialog without a title and
            with the specified owner <code>Frame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Frame,System.String)">
            <summary>
            Creates a non-modal dialog with the specified title and
            with the specified owner frame.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Frame,System.String,System.Boolean)">
            <summary>
            Creates a modal or non-modal dialog with the specified title
            and the specified owner <code>Frame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.#ctor(java.awt.Frame,System.String,System.Boolean,java.awt.GraphicsConfiguration)">
            <summary>
            Creates a modal or non-modal dialog with the specified title,
            owner <code>Frame</code>, and <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            By default, children may not be added directly to this component,
            they must be added to its <code>contentPane</code> instead.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.createRootPane">
            <summary>
            Called by the constructor methods to create the default
            <code>rootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.dialogInit">
            <summary>
            Called by the constructors to init the <code>JDialog</code> properly.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JDialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getContentPane">
            <summary>
            Returns the <code>contentPane</code> object for this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getDefaultCloseOperation">
            <summary>
            Returns the operation which occurs when the user
            initiates a "close" on this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getGlassPane">
            <summary>
            Returns the <code>glassPane</code> object for this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getJMenuBar">
            <summary>
            Returns the menubar set on this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getLayeredPane">
            <summary>
            Returns the <code>layeredPane</code> object for this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.getRootPane">
            <summary>
            Returns the <code>rootPane</code> object for this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.isDefaultLookAndFeelDecorated">
            <summary>
            Returns true if newly created <code>JDialog</code>s should have their
            Window decorations provided by the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.isRootPaneCheckingEnabled">
            <summary>
            Returns true if the methods <code>add</code> and <code>setLayout</code>
            should be checked.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.paramString">
            <summary>
            Returns a string representation of this <code>JDialog</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.processWindowEvent(java.awt.event.WindowEvent)">
            <summary>
            Handles window events depending on the state of the
            <code>defaultCloseOperation</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.remove(java.awt.Component)">
            <summary>
            Removes the specified component from this container.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setContentPane(java.awt.Container)">
            <summary>
            Sets the <code>contentPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setDefaultCloseOperation(System.Int32)">
            <summary>
            Sets the operation which will happen by default when
            the user initiates a "close" on this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setDefaultLookAndFeelDecorated(System.Boolean)">
            <summary>
            Provides a hint as to whether or not newly created <code>JDialog</code>s
            should have their Window decorations (such as borders, widgets to
            close the window, title...) provided by the current look
            and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setGlassPane(java.awt.Component)">
            <summary>
            Sets the <code>glassPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setJMenuBar(javax.swing.JMenuBar)">
            <summary>
            Sets the menubar for this dialog.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setLayeredPane(javax.swing.JLayeredPane)">
            <summary>
            Sets the <code>layeredPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setLayout(java.awt.LayoutManager)">
            <summary>
            By default the layout of this component may not be set,
            the layout of its <code>contentPane</code> should be set instead.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setRootPane(javax.swing.JRootPane)">
            <summary>
            Sets the <code>rootPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.setRootPaneCheckingEnabled(System.Boolean)">
            <summary>
            If true then calls to <code>add</code> and <code>setLayout</code>
            will cause an exception to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JDialog.update(java.awt.Graphics)">
            <summary>
            Calls <code>paint(g)</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.#ctor">
            <summary>
            Creates a new <code>JTextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.addCaretListener(javax.swing.event.CaretListener)">
            <summary>
            Adds a caret listener for notification of any changes
            to the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.addInputMethodListener(java.awt.event.InputMethodListener)">
            <summary>
            Adds the specified input method listener to receive
            input method events from this component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.addKeymap(System.String,javax.swing.text.Keymap)">
            <summary>
            Adds a new keymap into the keymap hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.copy">
            <summary>
            Transfers the currently selected range in the associated
            text model to the system clipboard, leaving the contents
            in the text model.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.cut">
            <summary>
            Transfers the currently selected range in the associated
            text model to the system clipboard, removing the contents
            from the model.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.fireCaretUpdate(javax.swing.event.CaretEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JTextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getActions">
            <summary>
            Fetches the command list for the editor.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getCaret">
            <summary>
            Fetches the caret that allows text-oriented navigation over
            the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getCaretColor">
            <summary>
            Fetches the current color used to render the
            caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getCaretListeners">
            <summary>
            Returns an array of all the caret listeners
            registered on this text component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getCaretPosition">
            <summary>
            Returns the position of the text insertion caret for the
            text component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getDisabledTextColor">
            <summary>
            Fetches the current color used to render the
            selected text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getDocument">
            <summary>
            Fetches the model associated with the editor.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getDragEnabled">
            <summary>
            Gets the <code>dragEnabled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getFocusAccelerator">
            <summary>
            Returns the key accelerator that will cause the receiving
            text component to get the focus.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getHighlighter">
            <summary>
            Fetches the object responsible for making highlights.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getInputMethodRequests">
            <summary>
            Gets the input method request handler which supports
            requests from input methods for this component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getKeymap">
            <summary>
            Fetches the keymap currently active in this text
            component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getKeymap(System.String)">
            <summary>
            Fetches a named keymap previously added to the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getMargin">
            <summary>
            Returns the margin between the text component's border and
            its text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getNavigationFilter">
            <summary>
            Returns the <code>NavigationFilter</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getPreferredScrollableViewportSize">
            <summary>
            Returns the preferred size of the viewport for a view component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getScrollableBlockIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Components that display logical rows or columns should compute
            the scroll increment that will completely expose one block
            of rows or columns, depending on the value of orientation.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getScrollableTracksViewportHeight">
            <summary>
            Returns true if a viewport should always force the height of this
            <code>Scrollable</code> to match the height of the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getScrollableTracksViewportWidth">
            <summary>
            Returns true if a viewport should always force the width of this
            <code>Scrollable</code> to match the width of the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getScrollableUnitIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Components that display logical rows or columns should compute
            the scroll increment that will completely expose one new row
            or column, depending on the value of orientation.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getSelectedText">
            <summary>
            Returns the selected text contained in this
            <code>TextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getSelectedTextColor">
            <summary>
            Fetches the current color used to render the
            selected text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getSelectionColor">
            <summary>
            Fetches the current color used to render the
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getSelectionEnd">
            <summary>
            Returns the selected text's end position.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getSelectionStart">
            <summary>
            Returns the selected text's start position.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getText">
            <summary>
            Returns the text contained in this <code>TextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getText(System.Int32,System.Int32)">
            <summary>
            Fetches a portion of the text represented by the
            component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getToolTipText(java.awt.event.MouseEvent)">
            <summary>
            Returns the string to be used as the tooltip for <code>event</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.getUI">
            <summary>
            Fetches the user-interface factory for this text-oriented editor.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.isEditable">
            <summary>
            Returns the boolean indicating whether this
            <code>TextComponent</code> is editable or not.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.modelToView(System.Int32)">
            <summary>
            Converts the given location in the model to a place in
            the view coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.moveCaretPosition(System.Int32)">
            <summary>
            Moves the caret to a new position, leaving behind a mark
            defined by the last time <code>setCaretPosition</code> was
            called.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.paramString">
            <summary>
            Returns a string representation of this <code>JTextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.paste">
            <summary>
            Transfers the contents of the system clipboard into the
            associated text model.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.processInputMethodEvent(java.awt.event.InputMethodEvent)">
            <summary>
            Processes input method events occurring on this component by
            dispatching them to any registered
            <code>InputMethodListener</code> objects.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.read(java.io.Reader,System.Object)">
            <summary>
            Initializes from a stream.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.removeCaretListener(javax.swing.event.CaretListener)">
            <summary>
            Removes a caret listener.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.removeKeymap(System.String)">
            <summary>
            Removes a named keymap previously added to the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.removeNotify">
            <summary>
            Notifies this component that it no longer has a parent component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.replaceSelection(System.String)">
            <summary>
            Replaces the currently selected content with new content
            represented by the given string.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.select(System.Int32,System.Int32)">
            <summary>
            Selects the text between the specified start and end positions.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.selectAll">
            <summary>
            Selects all the text in the <code>TextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)">
            <summary>
            Sets the caret to be used.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setCaretColor(java.awt.Color)">
            <summary>
            Sets the current color used to render the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setCaretPosition(System.Int32)">
            <summary>
            Sets the position of the text insertion caret for the
            <code>TextComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the language-sensitive orientation that is to be used to order
            the elements or text within this component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setDisabledTextColor(java.awt.Color)">
            <summary>
            Sets the current color used to render the
            disabled text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setDocument(javax.swing.text.Document)">
            <summary>
            Associates the editor with a text document.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setDragEnabled(System.Boolean)">
            <summary>
            Sets the <code>dragEnabled</code> property,
            which must be <code>true</code> to enable
            automatic drag handling (the first part of drag and drop)
            on this component.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setEditable(System.Boolean)">
            <summary>
            Sets the specified boolean to indicate whether or not this
            <code>TextComponent</code> should be editable.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setFocusAccelerator(System.Char)">
            <summary>
            Sets the key accelerator that will cause the receiving text
            component to get the focus.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setHighlighter(javax.swing.text.Highlighter)">
            <summary>
            Sets the highlighter to be used.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setKeymap(javax.swing.text.Keymap)">
            <summary>
            Sets the keymap to use for binding events to
            actions.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setMargin(java.awt.Insets)">
            <summary>
            Sets margin space between the text component's border
            and its text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setNavigationFilter(javax.swing.text.NavigationFilter)">
            <summary>
            Sets the <code>NavigationFilter</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setSelectedTextColor(java.awt.Color)">
            <summary>
            Sets the current color used to render the selected text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setSelectionColor(java.awt.Color)">
            <summary>
            Sets the current color used to render the selection.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setSelectionEnd(System.Int32)">
            <summary>
            Sets the selection end to the specified position.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setSelectionStart(System.Int32)">
            <summary>
            Sets the selection start to the specified position.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setText(System.String)">
            <summary>
            Sets the text of this <code>TextComponent</code>
            to the specified text.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.setUI(javax.swing.plaf.TextUI)">
            <summary>
            Sets the user-interface factory for this text-oriented editor.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.updateUI">
            <summary>
            Reloads the pluggable UI.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.viewToModel(java.awt.Point)">
            <summary>
            Converts the given place in the view coordinate system
            to the nearest representative location in the model.
            </summary>
        </member>
        <member name="M:javax.swing.text.JTextComponent.write(java.io.Writer)">
            <summary>
            Stores the contents of the model into the given
            stream.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.#ctor">
            <summary>
            Creates a new <code>JEditorPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.#ctor(System.String)">
            <summary>
            Creates a <code>JEditorPane</code> based on a string containing
            a URL specification.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.#ctor(System.String,System.String)">
            <summary>
            Creates a <code>JEditorPane</code> that has been initialized
            to the given text.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.#ctor(java.net.URL)">
            <summary>
            Creates a <code>JEditorPane</code> based on a specified URL for input.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.addHyperlinkListener(javax.swing.event.HyperlinkListener)">
            <summary>
            Adds a hyperlink listener for notification of any changes, for example
            when a link is selected and entered.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.createDefaultEditorKit">
            <summary>
            Creates the default editor kit (<code>PlainEditorKit</code>) for when
            the component is first created.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.createEditorKitForContentType(System.String)">
            <summary>
            Creates a handler for the given type from the default registry
            of editor kits.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.fireHyperlinkUpdate(javax.swing.event.HyperlinkEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JEditorPane.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getContentType">
            <summary>
            Gets the type of content that this editor
            is currently set to deal with.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getEditorKit">
            <summary>
            Fetches the currently installed kit for handling content.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getEditorKitClassNameForContentType(System.String)">
            <summary>
            Returns the currently registered <code>EditorKit</code>
            class name for the type <code>type</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getEditorKitForContentType(System.String)">
            <summary>
            Fetches the editor kit to use for the given type
            of content.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getHyperlinkListeners">
            <summary>
            Returns an array of all the <code>HyperLinkListener</code>s added
            to this JEditorPane with addHyperlinkListener().
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getPage">
            <summary>
            Gets the current URL being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getPreferredSize">
            <summary>
            Returns the preferred size for the <code>JEditorPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getScrollableTracksViewportHeight">
            <summary>
            Returns true if a viewport should always force the height of this
            <code>Scrollable</code> to match the height of the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getScrollableTracksViewportWidth">
            <summary>
            Returns true if a viewport should always force the width of this
            <code>Scrollable</code> to match the width of the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getStream(java.net.URL)">
            <summary>
            Fetches a stream for the given URL, which is about to
            be loaded by the <code>setPage</code> method.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getText">
            <summary>
            Returns the text contained in this <code>TextComponent</code>
            in terms of the
            content type of this editor.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.getUIClassID">
            <summary>
            Gets the class ID for the UI.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.paramString">
            <summary>
            Returns a string representation of this <code>JEditorPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.read(java.io.InputStream,System.Object)">
            <summary>
            This method initializes from a stream.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.registerEditorKitForContentType(System.String,System.String)">
            <summary>
            Establishes the default bindings of <code>type</code> to
            <code>classname</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.registerEditorKitForContentType(System.String,System.String,java.lang.ClassLoader)">
            <summary>
            Establishes the default bindings of <code>type</code> to
            <code>classname</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.removeHyperlinkListener(javax.swing.event.HyperlinkListener)">
            <summary>
            Removes a hyperlink listener.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.replaceSelection(System.String)">
            <summary>
            Replaces the currently selected content with new content
            represented by the given string.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.scrollToReference(System.String)">
            <summary>
            Scrolls the view to the given reference location
            (that is, the value returned by the <code>UL.getRef</code>
            method for the URL being displayed).
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setContentType(System.String)">
            <summary>
            Sets the type of content that this editor
            handles.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setEditorKit(javax.swing.text.EditorKit)">
            <summary>
            Sets the currently installed kit for handling
            content.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setEditorKitForContentType(System.String,javax.swing.text.EditorKit)">
            <summary>
            Directly sets the editor kit to use for the given type.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setPage(System.String)">
            <summary>
            Sets the current URL being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setPage(java.net.URL)">
            <summary>
            Sets the current URL being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JEditorPane.setText(System.String)">
            <summary>
            Sets the text of this <code>TextComponent</code> to the specified
            content,
            which is expected to be in the format of the content type of
            this editor.
            </summary>
        </member>
        <member name="M:java.awt.Frame.#ctor">
            <summary>
            Constructs a new instance of <code>Frame</code> that is
            initially invisible.
            </summary>
        </member>
        <member name="M:java.awt.Frame.#ctor(java.awt.GraphicsConfiguration)">
            <summary>
            Create a <code>Frame</code> with the specified
            <code>GraphicsConfiguration</code> of
            a screen device.
            </summary>
        </member>
        <member name="M:java.awt.Frame.#ctor(System.String)">
            <summary>
            Constructs a new, initially invisible <code>Frame</code> object
            with the specified title.
            </summary>
        </member>
        <member name="M:java.awt.Frame.#ctor(System.String,java.awt.GraphicsConfiguration)">
            <summary>
            Constructs a new, initially invisible <code>Frame</code> object
            with the specified title and a
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.Frame.addNotify">
            <summary>
            Makes this Frame displayable by connecting it to
            a native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Frame.finalize">
            <summary>
            We have to remove the (hard) reference to weakThis in the
            Vector, otherwise the WeakReference instance will never get
            garbage collected.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this Frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getCursorType">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>Component.getCursor()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Frame.getExtendedState">
            <summary>
            Gets the state of this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getFrames">
            <summary>
            Returns an array containing all Frames created by the application.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getIconImage">
            <summary>
            Gets the image to be displayed in the minimized icon
            for this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getMaximizedBounds">
            <summary>
            Gets maximized bounds for this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getMenuBar">
            <summary>
            Gets the menu bar for this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.getState">
            <summary>
            Gets the state of this frame (obsolete).
            </summary>
        </member>
        <member name="M:java.awt.Frame.getTitle">
            <summary>
            Gets the title of the frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.isResizable">
            <summary>
            Indicates whether this frame is resizable by the user.
            </summary>
        </member>
        <member name="M:java.awt.Frame.isUndecorated">
            <summary>
            Indicates whether this frame is undecorated.
            </summary>
        </member>
        <member name="M:java.awt.Frame.paramString">
            <summary>
            Returns a string representing the state of this <code>Frame</code>.
            </summary>
        </member>
        <member name="M:java.awt.Frame.remove(java.awt.MenuComponent)">
            <summary>
            Removes the specified menu bar from this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.removeNotify">
            <summary>
            Makes this Frame undisplayable by removing its connection
            to its native screen resource.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setCursor(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>Component.setCursor(Cursor)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Frame.setExtendedState(System.Int32)">
            <summary>
            Sets the state of this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setIconImage(java.awt.Image)">
            <summary>
            Sets the image to be displayed in the minimized icon for this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setMaximizedBounds(java.awt.Rectangle)">
            <summary>
            Sets the maximized bounds for this frame.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setMenuBar(java.awt.MenuBar)">
            <summary>
            Sets the menu bar for this frame to the specified menu bar.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setResizable(System.Boolean)">
            <summary>
            Sets whether this frame is resizable by the user.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setState(System.Int32)">
            <summary>
            Sets the state of this frame (obsolete).
            </summary>
        </member>
        <member name="M:java.awt.Frame.setTitle(System.String)">
            <summary>
            Sets the title for this frame to the specified string.
            </summary>
        </member>
        <member name="M:java.awt.Frame.setUndecorated(System.Boolean)">
            <summary>
            Disables or enables decorations for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.#ctor">
            <summary>
            Constructs a new frame that is initially invisible.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.#ctor(java.awt.GraphicsConfiguration)">
            <summary>
            Creates a <code>Frame</code> in the specified
            <code>GraphicsConfiguration</code> of
            a screen device and a blank title.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.#ctor(System.String)">
            <summary>
            Creates a new, initially invisible <code>Frame</code> with the
            specified title.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.#ctor(System.String,java.awt.GraphicsConfiguration)">
            <summary>
            Creates a <code>JFrame</code> with the specified title and the
            specified <code>GraphicsConfiguration</code> of a screen device.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            By default, children may not be added directly to this component,
            they must be added to its contentPane instead.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.createRootPane">
            <summary>
            Called by the constructor methods to create the default
            <code>rootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.frameInit">
            <summary>
            Called by the constructors to init the <code>JFrame</code> properly.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JFrame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getContentPane">
            <summary>
            Returns the <code>contentPane</code> object for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getDefaultCloseOperation">
            <summary>
            Returns the operation that occurs when the user
            initiates a "close" on this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getGlassPane">
            <summary>
            Returns the <code>glassPane</code> object for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getJMenuBar">
            <summary>
            Returns the menubar set on this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getLayeredPane">
            <summary>
            Returns the <code>layeredPane</code> object for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.getRootPane">
            <summary>
            Returns the <code>rootPane</code> object for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.isDefaultLookAndFeelDecorated">
            <summary>
            Returns true if newly created <code>JFrame</code>s should have their
            Window decorations provided by the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.isRootPaneCheckingEnabled">
            <summary>
            Returns whether calls to <code>add</code> and
            <code>setLayout</code> cause an exception to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.paramString">
            <summary>
            Returns a string representation of this <code>JFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.processWindowEvent(java.awt.event.WindowEvent)">
            <summary>
            Processes window events occurring on this component.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.remove(java.awt.Component)">
            <summary>
            Removes the specified component from this container.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setContentPane(java.awt.Container)">
            <summary>
            Sets the <code>contentPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setDefaultCloseOperation(System.Int32)">
            <summary>
            Sets the operation that will happen by default when
            the user initiates a "close" on this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setDefaultLookAndFeelDecorated(System.Boolean)">
            <summary>
            Provides a hint as to whether or not newly created <code>JFrame</code>s
            should have their Window decorations (such as borders, widgets to
            close the window, title...) provided by the current look
            and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setGlassPane(java.awt.Component)">
            <summary>
            Sets the <code>glassPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setJMenuBar(javax.swing.JMenuBar)">
            <summary>
            Sets the menubar for this frame.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setLayeredPane(javax.swing.JLayeredPane)">
            <summary>
            Sets the <code>layeredPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setLayout(java.awt.LayoutManager)">
            <summary>
            By default the layout of this component may not be set,
            the layout of its <code>contentPane</code> should be set instead.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setRootPane(javax.swing.JRootPane)">
            <summary>
            Sets the <code>rootPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.setRootPaneCheckingEnabled(System.Boolean)">
            <summary>
            Determines whether calls to <code>add</code> and
            <code>setLayout</code> will cause an exception to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JFrame.update(java.awt.Graphics)">
            <summary>
            Just calls <code>paint(g)</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor">
            <summary>
            Creates a non-resizable, non-closable, non-maximizable,
            non-iconifiable <code>JInternalFrame</code> with no title.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor(System.String)">
            <summary>
            Creates a non-resizable, non-closable, non-maximizable,
            non-iconifiable <code>JInternalFrame</code> with the specified title.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a non-closable, non-maximizable, non-iconifiable
            <code>JInternalFrame</code> with the specified title
            and resizability.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a non-maximizable, non-iconifiable <code>JInternalFrame</code>
            with the specified title, resizability, and
            closability.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a non-iconifiable <code>JInternalFrame</code>
            with the specified title,
            resizability, closability, and maximizability.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <code>JInternalFrame</code> with the specified title,
            resizability, closability, maximizability, and iconifiability.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Ensures that, by default, children cannot be added
            directly to this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.addInternalFrameListener(javax.swing.event.InternalFrameListener)">
            <summary>
            Adds the specified listener to receive internal
            frame events from this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.createRootPane">
            <summary>
            Called by the constructor to set up the <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.dispose">
            <summary>
            Makes this internal frame
            invisible, unselected, and closed.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.doDefaultCloseAction">
            <summary>
            Fires an
            <code>INTERNAL_FRAME_CLOSING</code> event
            and then performs the action specified by
            the internal frame's default close operation.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.fireInternalFrameEvent(System.Int32)">
            <summary>
            Fires an internal frame event.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getContentPane">
            <summary>
            Returns the content pane for this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getDefaultCloseOperation">
            <summary>
            Returns the default operation that occurs when the user
            initiates a "close" on this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getDesktopPane">
            <summary>
            Convenience method that searches the ancestor hierarchy for a
            <code>JDesktop</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getFocusCycleRootAncestor">
            <summary>
            Always returns <code>null</code> because <code>JInternalFrame</code>s
            must always be roots of a focus
            traversal cycle.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getFocusOwner">
            <summary>
            If this <code>JInternalFrame</code> is active,
            returns the child that has focus.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getFrameIcon">
            <summary>
            Returns the image displayed in the title bar of this internal frame (usually
            in the top-left corner).
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getGlassPane">
            <summary>
            Returns the glass pane for this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getInternalFrameListeners">
            <summary>
            Returns an array of all the <code>InternalFrameListener</code>s added
            to this <code>JInternalFrame</code> with
            <code>addInternalFrameListener</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getJMenuBar">
            <summary>
            Returns the current <code>JMenuBar</code> for this
            <code>JInternalFrame</code>, or <code>null</code>
            if no menu bar has been set.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getLayer">
            <summary>
            Convenience method for getting the layer attribute of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getLayeredPane">
            <summary>
            Returns the layered pane for this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getMenuBar">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.3,
            replaced by <code>getJMenuBar()</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getMostRecentFocusOwner">
            <summary>
            Returns the child component of this <code>JInternalFrame</code>
            that will receive the
            focus when this <code>JInternalFrame</code> is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getNormalBounds">
            <summary>
            If the <code>JInternalFrame</code> is not in maximized state, returns
            <code>getBounds()</code>; otherwise, returns the bounds that the
            <code>JInternalFrame</code> would be restored to.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getRootPane">
            <summary>
            Returns the <code>rootPane</code> object for this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getTitle">
            <summary>
            Returns the title of the <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getUI">
            <summary>
            Returns the look-and-feel object that renders this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getUIClassID">
            <summary>
            Returns the name of the look-and-feel
            class that renders this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.getWarningString">
            <summary>
            Gets the warning string that is displayed with this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.hide">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isClosable">
            <summary>
            Returns whether this <code>JInternalFrame</code> can be closed by
            some user action.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isClosed">
            <summary>
            Returns whether this <code>JInternalFrame</code> is currently closed.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isFocusCycleRoot">
            <summary>
            Always returns <code>true</code> because all <code>JInternalFrame</code>s must be
            roots of a focus traversal cycle.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isIcon">
            <summary>
            Returns whether the <code>JInternalFrame</code> is currently iconified.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isIconifiable">
            <summary>
            Gets the <code>iconable</code> property,
            which by default is <code>false</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isMaximizable">
            <summary>
            Gets the value of the <code>maximizable</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isMaximum">
            <summary>
            Returns whether the <code>JInternalFrame</code> is currently maximized.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isResizable">
            <summary>
            Returns whether the <code>JInternalFrame</code> can be resized
            by some user action.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isRootPaneCheckingEnabled">
            <summary>
            Returns whether calls to <code>add</code> and
            <code>setLayout</code> cause an exception to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.isSelected">
            <summary>
            Returns whether the <code>JInternalFrame</code> is the
            currently "selected" or active frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.moveToBack">
            <summary>
            Convenience method that moves this component to position -1 if its
            parent is a <code>JLayeredPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.moveToFront">
            <summary>
            Convenience method that moves this component to position 0 if its
            parent is a <code>JLayeredPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.pack">
            <summary>
            Causes subcomponents of this <code>JInternalFrame</code>
            to be laid out at their preferred size.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.paintComponent(java.awt.Graphics)">
            <summary>
            Overridden to allow optimized painting when the
            internal frame is being dragged.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.paramString">
            <summary>
            Returns a string representation of this <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.remove(java.awt.Component)">
            <summary>
            Removes the specified component from this container.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.removeInternalFrameListener(javax.swing.event.InternalFrameListener)">
            <summary>
            Removes the specified internal frame listener so that it no longer
            receives internal frame events from this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.reshape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves and resizes this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.restoreSubcomponentFocus">
            <summary>
            Requests the internal frame to restore focus to the
            last subcomponent that had focus.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setClosable(System.Boolean)">
            <summary>
            Sets whether this <code>JInternalFrame</code> can be closed by
            some user action.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setClosed(System.Boolean)">
            <summary>
            Closes this internal frame if the argument is <code>true</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setContentPane(java.awt.Container)">
            <summary>
            Sets this <code>JInternalFrame</code>'s <code>contentPane</code>
            property.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setDefaultCloseOperation(System.Int32)">
            <summary>
            Sets the operation that will happen by default when
            the user initiates a "close" on this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setFocusCycleRoot(System.Boolean)">
            <summary>
            Does nothing because <code>JInternalFrame</code>s must always be roots of a focus
            traversal cycle.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setFrameIcon(javax.swing.Icon)">
            <summary>
            Sets an image to be displayed in the titlebar of this internal frame (usually
            in the top-left corner).
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setGlassPane(java.awt.Component)">
            <summary>
            Sets this <code>JInternalFrame</code>'s
            <code>glassPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setIcon(System.Boolean)">
            <summary>
            Iconifies or de-iconifies this internal frame,
            if the look and feel supports iconification.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setIconifiable(System.Boolean)">
            <summary>
            Sets the <code>iconable</code> property,
            which must be <code>true</code>
            for the user to be able to
            make the <code>JInternalFrame</code> an icon.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setJMenuBar(javax.swing.JMenuBar)">
            <summary>
            Sets the <code>menuBar</code> property for this <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setLayer(System.Int32)">
            <summary>
            Convenience method for setting the layer attribute of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setLayer(java.lang.Integer)">
            <summary>
            Convenience method for setting the layer attribute of this component.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setLayeredPane(javax.swing.JLayeredPane)">
            <summary>
            Sets this <code>JInternalFrame</code>'s
            <code>layeredPane</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setLayout(java.awt.LayoutManager)">
            <summary>
            Ensures that, by default, the layout of this component cannot be set.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setMaximizable(System.Boolean)">
            <summary>
            Sets the <code>maximizable</code> property,
            which determines whether the <code>JInternalFrame</code>
            can be maximized by
            some user action.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setMaximum(System.Boolean)">
            <summary>
            Maximizes and restores this internal frame.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setMenuBar(javax.swing.JMenuBar)">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.3
            replaced by <code>setJMenuBar(JMenuBar m)</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setNormalBounds(java.awt.Rectangle)">
            <summary>
            Sets the normal bounds for this internal frame, the bounds that
            this internal frame would be restored to from its maximized state.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setResizable(System.Boolean)">
            <summary>
            Sets whether the <code>JInternalFrame</code> can be resized by some
            user action.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setRootPane(javax.swing.JRootPane)">
            <summary>
            Sets the <code>rootPane</code> property
            for this <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setRootPaneCheckingEnabled(System.Boolean)">
            <summary>
            Determines whether calls to <code>add</code> and
            <code>setLayout</code> cause an exception to be thrown.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setSelected(System.Boolean)">
            <summary>
            Selects or deselects the internal frame
            if it's showing.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setTitle(System.String)">
            <summary>
            Sets the <code>JInternalFrame</code> title.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.setUI(javax.swing.plaf.InternalFrameUI)">
            <summary>
            Sets the UI delegate for this <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.show">
            <summary>
            If the internal frame is not visible,
            brings the internal frame to the front,
            makes it visible,
            and attempts to select it.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.toBack">
            <summary>
            Sends this internal frame to the back.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.toFront">
            <summary>
            Brings this internal frame to the front.
            </summary>
        </member>
        <member name="M:javax.swing.JInternalFrame.updateUI">
            <summary>
            Notification from the <code>UIManager</code> that the look and feel
            has changed.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor">
            <summary>
            Creates a <code>JLabel</code> instance with
            no image and with an empty string for the title.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor(javax.swing.Icon)">
            <summary>
            Creates a <code>JLabel</code> instance with the specified image.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor(javax.swing.Icon,System.Int32)">
            <summary>
            Creates a <code>JLabel</code> instance with the specified
            image and horizontal alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor(System.String)">
            <summary>
            Creates a <code>JLabel</code> instance with the specified text.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor(System.String,javax.swing.Icon,System.Int32)">
            <summary>
            Creates a <code>JLabel</code> instance with the specified
            text, image, and horizontal alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.#ctor(System.String,System.Int32)">
            <summary>
            Creates a <code>JLabel</code> instance with the specified
            text and horizontal alignment.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.checkHorizontalKey(System.Int32,System.String)">
            <summary>
            Verify that key is a legal value for the horizontalAlignment properties.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.checkVerticalKey(System.Int32,System.String)">
            <summary>
            Verify that key is a legal value for the
            verticalAlignment or verticalTextPosition properties.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getAccessibleContext">
            <summary>
            Get the AccessibleContext of this object
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getDisabledIcon">
            <summary>
            Returns the value of the disabledIcon property if it's been set,
            If it hasn't been set and the value of the icon property is
            an ImageIcon, we compute a "grayed out" version of the icon and
            update the disabledIcon property with that.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getDisplayedMnemonic">
            <summary>
            Return the keycode that indicates a mnemonic key.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getDisplayedMnemonicIndex">
            <summary>
            Returns the character, as an index, that the look and feel should
            provide decoration for as representing the mnemonic character.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getHorizontalAlignment">
            <summary>
            Returns the alignment of the label's contents along the X axis.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getHorizontalTextPosition">
            <summary>
            Returns the horizontal position of the label's text,
            relative to its image.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getIcon">
            <summary>
            Returns the graphic image (glyph, icon) that the label displays.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getIconTextGap">
            <summary>
            Returns the amount of space between the text and the icon
            displayed in this label.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getLabelFor">
            <summary>
            Get the component this is labelling.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getText">
            <summary>
            Returns the text string that the label displays.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JLabel.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JLabel.getUIClassID" -->
        <member name="M:javax.swing.JLabel.getVerticalAlignment">
            <summary>
            Returns the alignment of the label's contents along the Y axis.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.getVerticalTextPosition">
            <summary>
            Returns the vertical position of the label's text,
            relative to its image.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.imageUpdate(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is overridden to return false if the current Icon's Image is
            not equal to the passed in Image <code>img</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.paramString">
            <summary>
            Returns a string representation of this JLabel.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setDisabledIcon(javax.swing.Icon)">
            <summary>
            Set the icon to be displayed if this JLabel is "disabled"
            (JLabel.setEnabled(false)).
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setDisplayedMnemonic(System.Char)">
            <summary>
            Specifies the displayedMnemonic as a char value.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setDisplayedMnemonic(System.Int32)">
            <summary>
            Specify a keycode that indicates a mnemonic key.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setDisplayedMnemonicIndex(System.Int32)">
            <summary>
            Provides a hint to the look and feel as to which character in the
            text should be decorated to represent the mnemonic.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setHorizontalAlignment(System.Int32)">
            <summary>
            Sets the alignment of the label's contents along the X axis.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setHorizontalTextPosition(System.Int32)">
            <summary>
            Sets the horizontal position of the label's text,
            relative to its image.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setIcon(javax.swing.Icon)">
            <summary>
            Defines the icon this component will display.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setIconTextGap(System.Int32)">
            <summary>
            If both the icon and text properties are set, this property
            defines the space between them.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setLabelFor(java.awt.Component)">
            <summary>
            Set the component this is labelling.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setText(System.String)">
            <summary>
            Defines the single line of text this component will display.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JLabel.setUI(javax.swing.plaf.LabelUI)" -->
        <member name="M:javax.swing.JLabel.setVerticalAlignment(System.Int32)">
            <summary>
            Sets the alignment of the label's contents along the Y axis.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.setVerticalTextPosition(System.Int32)">
            <summary>
            Sets the vertical position of the label's text,
            relative to its image.
            </summary>
        </member>
        <member name="M:javax.swing.JLabel.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor">
            <summary>
            Creates a <code>JMenuItem</code> with no set text or icon.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor(javax.swing.Action)">
            <summary>
            Creates a menu item whose properties are taken from the
            specified <code>Action</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor(javax.swing.Icon)">
            <summary>
            Creates a <code>JMenuItem</code> with the specified icon.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor(System.String)">
            <summary>
            Creates a <code>JMenuItem</code> with the specified text.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor(System.String,javax.swing.Icon)">
            <summary>
            Creates a <code>JMenuItem</code> with the specified text and icon.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.#ctor(System.String,System.Int32)">
            <summary>
            Creates a <code>JMenuItem</code> with the specified text and
            keyboard mnemonic.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.addMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)">
            <summary>
            Adds a <code>MenuDragMouseListener</code> to the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.addMenuKeyListener(javax.swing.event.MenuKeyListener)">
            <summary>
            Adds a <code>MenuKeyListener</code> to the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>ActionEvent</code> source's
            properties according to values from the <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.createActionPropertyChangeListener(javax.swing.Action)">
            <summary>
            Factory method which creates the <code>PropertyChangeListener</code>
            used to update the <code>ActionEvent</code> source as properties
            change on its <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuDragMouseDragged(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuDragMouseEntered(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuDragMouseExited(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuDragMouseReleased(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuKeyPressed(javax.swing.event.MenuKeyEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuKeyReleased(javax.swing.event.MenuKeyEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.fireMenuKeyTyped(javax.swing.event.MenuKeyEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getAccelerator">
            <summary>
            Returns the <code>KeyStroke</code> which serves as an accelerator
            for the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getAccessibleContext">
            <summary>
            Returns the <code>AccessibleContext</code> associated with this
            <code>JMenuItem</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getComponent">
            <summary>
            Returns the <code>java.awt.Component</code> used to paint
            this object.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getMenuDragMouseListeners">
            <summary>
            Returns an array of all the <code>MenuDragMouseListener</code>s added
            to this JMenuItem with addMenuDragMouseListener().
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getMenuKeyListeners">
            <summary>
            Returns an array of all the <code>MenuKeyListener</code>s added
            to this JMenuItem with addMenuKeyListener().
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.getSubElements">
            <summary>
            This method returns an array containing the sub-menu
            components for this menu component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JMenuItem.getUIClassID" -->
        <member name="M:javax.swing.JMenuItem.init(System.String,javax.swing.Icon)">
            <summary>
            Initializes the menu item with the specified text and icon.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.isArmed">
            <summary>
            Returns whether the menu item is "armed".
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.menuSelectionChanged(System.Boolean)">
            <summary>
            Called by the <code>MenuSelectionManager</code> when the
            <code>MenuElement</code> is selected or unselected.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.paramString">
            <summary>
            Returns a string representation of this <code>JMenuItem</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Processes a key event forwarded from the
            <code>MenuSelectionManager</code> and changes the menu selection,
            if necessary, by using <code>MenuSelectionManager</code>'s API.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent)">
            <summary>
            Handles mouse drag in a menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.processMenuKeyEvent(javax.swing.event.MenuKeyEvent)">
            <summary>
            Handles a keystroke in a menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Processes a mouse event forwarded from the
            <code>MenuSelectionManager</code> and changes the menu
            selection, if necessary, by using the
            <code>MenuSelectionManager</code>'s API.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.removeMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)">
            <summary>
            Removes a <code>MenuDragMouseListener</code> from the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.removeMenuKeyListener(javax.swing.event.MenuKeyListener)">
            <summary>
            Removes a <code>MenuKeyListener</code> from the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.setAccelerator(javax.swing.KeyStroke)">
            <summary>
            Sets the key combination which invokes the menu item's
            action listeners without navigating the menu hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.setArmed(System.Boolean)">
            <summary>
            Identifies the menu item as "armed".
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.setEnabled(System.Boolean)">
            <summary>
            Enables or disables the menu item.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.setUI(javax.swing.plaf.MenuItemUI)">
            <summary>
            Sets the look and feel object that renders this component.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuItem.updateUI">
            <summary>
            Resets the UI property with a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.#ctor">
            <summary>
            Constructs a new <code>JMenu</code> with no text.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.#ctor(javax.swing.Action)">
            <summary>
            Constructs a menu whose properties are taken from the
            <code>Action</code> supplied.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.#ctor(System.String)">
            <summary>
            Constructs a new <code>JMenu</code> with the supplied string
            as its text.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <code>JMenu</code> with the supplied string as
            its text and specified as a tear-off menu or not.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.add(javax.swing.Action)">
            <summary>
            Creates a new menu item attached to the specified
            <code>Action</code> object and appends it to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.add(java.awt.Component)">
            <summary>
            Appends a component to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.add(java.awt.Component,System.Int32)">
            <summary>
            Adds the specified component to this container at the given
            position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.add(javax.swing.JMenuItem)">
            <summary>
            Appends a menu item to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.add(System.String)">
            <summary>
            Creates a new menu item with the specified text and appends
            it to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.addMenuListener(javax.swing.event.MenuListener)">
            <summary>
            Adds a listener for menu events.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.addSeparator">
            <summary>
            Appends a new separator to the end of the menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.applyComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the <code>ComponentOrientation</code> property of this menu
            and all components contained within it.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>ActionEvent</code>
            source's properties according to values from the
            <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.createActionChangeListener(javax.swing.JMenuItem)">
            <summary>
            Returns a properly configured <code>PropertyChangeListener</code>
            which updates the control as changes to the <code>Action</code> occur.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.createActionComponent(javax.swing.Action)">
            <summary>
            Factory method which creates the <code>JMenuItem</code> for
            <code>Action</code>s added to the <code>JMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.createWinListener(javax.swing.JPopupMenu)">
            <summary>
            Creates a window-closing listener for the popup.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.doClick(System.Int32)">
            <summary>
            Programmatically performs a "click".
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.fireMenuCanceled">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.fireMenuDeselected">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.fireMenuSelected">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JMenu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getComponent">
            <summary>
            Returns the <code>java.awt.Component</code> used to
            paint this <code>MenuElement</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getDelay">
            <summary>
            Returns the suggested delay, in milliseconds, before submenus
            are popped up or down.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getItem(System.Int32)">
            <summary>
            Returns the <code>JMenuItem</code> at the specified position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getItemCount">
            <summary>
            Returns the number of items on the menu, including separators.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getMenuComponent(System.Int32)">
            <summary>
            Returns the component at position <code>n</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getMenuComponentCount">
            <summary>
            Returns the number of components on the menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getMenuComponents">
            <summary>
            Returns an array of <code>Component</code>s of the menu's
            subcomponents.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getMenuListeners">
            <summary>
            Returns an array of all the <code>MenuListener</code>s added
            to this JMenu with addMenuListener().
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getPopupMenu">
            <summary>
            Returns the popupmenu associated with this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getPopupMenuOrigin">
            <summary>
            Computes the origin for the <code>JMenu</code>'s popup menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.getSubElements">
            <summary>
            Returns an array of <code>MenuElement</code>s containing the submenu
            for this menu component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JMenu.getUIClassID" -->
        <member name="M:javax.swing.JMenu.insert(javax.swing.Action,System.Int32)">
            <summary>
            Inserts a new menu item attached to the specified <code>Action</code>
            object at a given position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.insert(javax.swing.JMenuItem,System.Int32)">
            <summary>
            Inserts the specified <code>JMenuitem</code> at a given position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.insert(System.String,System.Int32)">
            <summary>
            Inserts a new menu item with the specified text at a
            given position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.insertSeparator(System.Int32)">
            <summary>
            Inserts a separator at the specified position.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.isMenuComponent(java.awt.Component)">
            <summary>
            Returns true if the specified component exists in the
            submenu hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.isPopupMenuVisible">
            <summary>
            Returns true if the menu's popup window is visible.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.isSelected">
            <summary>
            Returns true if the menu is currently selected (highlighted).
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.isTearOff">
            <summary>
            Returns true if the menu can be torn off.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.isTopLevelMenu">
            <summary>
            Returns true if the menu is a 'top-level menu', that is, if it is
            the direct child of a menubar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.menuSelectionChanged(System.Boolean)">
            <summary>
            Messaged when the menubar selection changes to activate or
            deactivate this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.paramString">
            <summary>
            Returns a string representation of this <code>JMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.processKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            Processes key stroke events such as mnemonics and accelerators.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.remove(java.awt.Component)">
            <summary>
            Removes the component <code>c</code> from this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.remove(System.Int32)">
            <summary>
            Removes the menu item at the specified index from this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.remove(javax.swing.JMenuItem)">
            <summary>
            Removes the specified menu item from this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.removeAll">
            <summary>
            Removes all menu items from this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.removeMenuListener(javax.swing.event.MenuListener)">
            <summary>
            Removes a listener for menu events.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setAccelerator(javax.swing.KeyStroke)">
            <summary>
            <code>setAccelerator</code> is not defined for <code>JMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the language-sensitive orientation that is to be used to order
            the elements or text within this component.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setDelay(System.Int32)">
            <summary>
            Sets the suggested delay before the menu's <code>PopupMenu</code>
            is popped up or down.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setMenuLocation(System.Int32,System.Int32)">
            <summary>
            Sets the location of the popup component.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setModel(javax.swing.ButtonModel)">
            <summary>
            Sets the data model for the "menu button" -- the label
            that the user clicks to open or close the menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setPopupMenuVisible(System.Boolean)">
            <summary>
            Sets the visibility of the menu's popup.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.setSelected(System.Boolean)">
            <summary>
            Sets the selection status of the menu.
            </summary>
        </member>
        <member name="M:javax.swing.JMenu.updateUI">
            <summary>
            Resets the UI property with a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.#ctor">
            <summary>
            Creates a new menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.add(javax.swing.JMenu)">
            <summary>
            Appends the specified menu to the end of the menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.addNotify">
            <summary>
            Overrides <code>JComponent.addNotify</code> to register this
            menu bar with the current keyboard manager.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JMenuBar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getComponent">
            <summary>
            Implemented to be a <code>MenuElement</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getComponentAtIndex(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>replaced by <code>getComponent(int i)</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getComponentIndex(java.awt.Component)">
            <summary>
            Returns the index of the specified component.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getHelpMenu">
            <summary>
            Gets the help menu for the menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getMargin">
            <summary>
            Returns the margin between the menubar's border and
            its menus.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getMenu(System.Int32)">
            <summary>
            Returns the menu at the specified position in the menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getMenuCount">
            <summary>
            Returns the number of items in the menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getSelectionModel">
            <summary>
            Returns the model object that handles single selections.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getSubElements">
            <summary>
            Implemented to be a <code>MenuElement</code> -- returns the
            menus in this menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.getUI">
            <summary>
            Returns the menubar's current UI.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JMenuBar.getUIClassID" -->
        <member name="M:javax.swing.JMenuBar.isBorderPainted">
            <summary>
            Returns true if the menu bars border should be painted.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.isSelected">
            <summary>
            Returns true if the menu bar currently has a component selected.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JMenuBar.menuSelectionChanged(System.Boolean)" -->
        <member name="M:javax.swing.JMenuBar.paintBorder(java.awt.Graphics)">
            <summary>
            Paints the menubar's border if <code>BorderPainted</code>
            property is true.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.paramString">
            <summary>
            Returns a string representation of this <code>JMenuBar</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,System.Int32,System.Boolean)">
            <summary>
            Subclassed to check all the child menus.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Implemented to be a <code>MenuElement</code> -- does nothing.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Implemented to be a <code>MenuElement</code> -- does nothing.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.removeNotify">
            <summary>
            Overrides <code>JComponent.removeNotify</code> to unregister this
            menu bar with the current keyboard manager.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.setBorderPainted(System.Boolean)">
            <summary>
            Sets whether the border should be painted.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.setHelpMenu(javax.swing.JMenu)">
            <summary>
            Sets the help menu that appears when the user selects the
            "help" option in the menu bar.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.setMargin(java.awt.Insets)">
            <summary>
            Sets the margin between the menubar's border and
            its menus.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.setSelected(java.awt.Component)">
            <summary>
            Sets the currently selected component, producing a
            a change to the selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JMenuBar.setSelectionModel(javax.swing.SingleSelectionModel)">
            <summary>
            Sets the model object to handle single selections.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JMenuBar.setUI(javax.swing.plaf.MenuBarUI)" -->
        <member name="M:javax.swing.JMenuBar.updateUI">
            <summary>
            Resets the UI property with a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor">
            <summary>
            Creates a <code>JOptionPane</code> with a test message.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object)">
            <summary>
            Creates a instance of <code>JOptionPane</code> to display a
            message using the
            plain-message message type and the default options delivered by
            the UI.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object,System.Int32)">
            <summary>
            Creates an instance of <code>JOptionPane</code> to display a message
            with the specified message type and the default options,
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <code>JOptionPane</code> to display a message
            with the specified message type and options.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object,System.Int32,System.Int32,javax.swing.Icon)">
            <summary>
            Creates an instance of <code>JOptionPane</code> to display a message
            with the specified message type, options, and icon.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object,System.Int32,System.Int32,javax.swing.Icon,System.Object[])">
            <summary>
            Creates an instance of <code>JOptionPane</code> to display a message
            with the specified message type, icon, and options.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.#ctor(System.Object,System.Int32,System.Int32,javax.swing.Icon,System.Object[],System.Object)">
            <summary>
            Creates an instance of <code>JOptionPane</code> to display a message
            with the specified message type, icon, and options, with the
            initially-selected option specified.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.createDialog(java.awt.Component,System.String)">
            <summary>
            Creates and returns a new <code>JDialog</code> wrapping
            <code>this</code> centered on the <code>parentComponent</code>
            in the <code>parentComponent</code>'s frame.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.createInternalFrame(java.awt.Component,System.String)">
            <summary>
            Creates and returns an instance of <code>JInternalFrame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getAccessibleContext">
            <summary>
            Returns the <code>AccessibleContext</code> associated with this JOptionPane.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getDesktopPaneForComponent(java.awt.Component)">
            <summary>
            Returns the specified component's desktop pane.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getFrameForComponent(java.awt.Component)">
            <summary>
            Returns the specified component's <code>Frame</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getIcon">
            <summary>
            Returns the icon this pane displays.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getInitialSelectionValue">
            <summary>
            Returns the input value that is displayed as initially selected to the user.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getInitialValue">
            <summary>
            Returns the initial value.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getInputValue">
            <summary>
            Returns the value the user has input, if <code>wantsInput</code>
            is true.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getMaxCharactersPerLineCount">
            <summary>
            Returns the maximum number of characters to place on a line in a
            message.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getMessage">
            <summary>
            Returns the message-object this pane displays.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getMessageType">
            <summary>
            Returns the message type.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getOptions">
            <summary>
            Returns the choices the user can make.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getOptionType">
            <summary>
            Returns the type of options that are displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getRootFrame">
            <summary>
            Returns the <code>Frame</code> to use for the class methods in
            which a frame is not provided.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getSelectionValues">
            <summary>
            Returns the input selection values.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JOptionPane.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JOptionPane.getUIClassID" -->
        <member name="M:javax.swing.JOptionPane.getValue">
            <summary>
            Returns the value the user has selected.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.getWantsInput">
            <summary>
            Returns the value of the <code>wantsInput</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.paramString">
            <summary>
            Returns a string representation of this <code>JOptionPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.selectInitialValue">
            <summary>
            Requests that the initial value be selected, which will set
            focus to the initial value.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setIcon(javax.swing.Icon)">
            <summary>
            Sets the icon to display.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setInitialSelectionValue(System.Object)">
            <summary>
            Sets the input value that is initially displayed as selected to the user.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setInitialValue(System.Object)">
            <summary>
            Sets the initial value that is to be enabled -- the
            <code>Component</code>
            that has the focus when the pane is initially displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setInputValue(System.Object)">
            <summary>
            Sets the input value that was selected or input by the user.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setMessage(System.Object)">
            <summary>
            Sets the option pane's message-object.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setMessageType(System.Int32)">
            <summary>
            Sets the option pane's message type.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setOptions(System.Object[])">
            <summary>
            Sets the options this pane displays.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setOptionType(System.Int32)">
            <summary>
            Sets the options to display.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setRootFrame(java.awt.Frame)">
            <summary>
            Sets the frame to use for class methods in which a frame is
            not provided.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setSelectionValues(System.Object[])">
            <summary>
            Sets the input selection values for a pane that provides the user
            with a list of items to choose from.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JOptionPane.setUI(javax.swing.plaf.OptionPaneUI)" -->
        <member name="M:javax.swing.JOptionPane.setValue(System.Object)">
            <summary>
            Sets the value the user has chosen.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.setWantsInput(System.Boolean)">
            <summary>
            Sets the <code>wantsInput</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,System.Object)">
            <summary>
            Brings up a dialog with the options <i>Yes</i>,
            <i>No</i> and <i>Cancel</i>; with the
            title, <b>Select an Option</b>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Brings up a dialog where the number of choices is determined
            by the <code>optionType</code> parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Brings up a dialog where the number of choices is determined
            by the <code>optionType</code> parameter, where the
            <code>messageType</code>
            parameter determines the icon to display.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32,javax.swing.Icon)">
            <summary>
            Brings up a dialog with a specified icon, where the number of
            choices is determined by the <code>optionType</code> parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(java.awt.Component,System.Object)">
            <summary>
            Shows a question-message dialog requesting input from the user
            parented to <code>parentComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(java.awt.Component,System.Object,System.Object)">
            <summary>
            Shows a question-message dialog requesting input from the user and
            parented to <code>parentComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Shows a dialog requesting input from the user parented to
            <code>parentComponent</code> with the dialog having the title
            <code>title</code> and message type <code>messageType</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(java.awt.Component,System.Object,System.String,System.Int32,javax.swing.Icon,System.Object[],System.Object)">
            <summary>
            Prompts the user for input in a blocking dialog where the
            initial selection, possible selections, and all other options can
            be specified.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(System.Object)">
            <summary>
            Shows a question-message dialog requesting input from the user.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInputDialog(System.Object,System.Object)">
            <summary>
            Shows a question-message dialog requesting input from the user, with
            the input value initialized to <code>initialSelectionValue</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,System.Object)">
            <summary>
            Brings up an internal dialog panel with the options <i>Yes</i>, <i>No</i>
            and <i>Cancel</i>; with the title, <b>Select an Option</b>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Brings up a internal dialog panel where the number of choices
            is determined by the <code>optionType</code> parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            Brings up an internal dialog panel where the number of choices
            is determined by the <code>optionType</code> parameter, where
            the <code>messageType</code> parameter determines the icon to display.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalConfirmDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32,javax.swing.Icon)">
            <summary>
            Brings up an internal dialog panel with a specified icon, where
            the number of choices is determined by the <code>optionType</code>
            parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,System.Object)">
            <summary>
            Shows an internal question-message dialog requesting input from
            the user parented to <code>parentComponent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Shows an internal dialog requesting input from the user parented
            to <code>parentComponent</code> with the dialog having the title
            <code>title</code> and message type <code>messageType</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalInputDialog(java.awt.Component,System.Object,System.String,System.Int32,javax.swing.Icon,System.Object[],System.Object)">
            <summary>
            Prompts the user for input in a blocking internal dialog where
            the initial selection, possible selections, and all other
            options can be specified.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,System.Object)">
            <summary>
            Brings up an internal confirmation dialog panel.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Brings up an internal dialog panel that displays a message
            using a default icon determined by the <code>messageType</code>
            parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalMessageDialog(java.awt.Component,System.Object,System.String,System.Int32,javax.swing.Icon)">
            <summary>
            Brings up an internal dialog panel displaying a message,
            specifying all parameters.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showInternalOptionDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32,javax.swing.Icon,System.Object[],System.Object)">
            <summary>
            Brings up an internal dialog panel with a specified icon, where
            the initial choice is determined by the <code>initialValue</code>
            parameter and the number of choices is determined by the
            <code>optionType</code> parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showMessageDialog(java.awt.Component,System.Object)">
            <summary>
            Brings up an information-message dialog titled "Message".
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showMessageDialog(java.awt.Component,System.Object,System.String,System.Int32)">
            <summary>
            Brings up a dialog that displays a message using a default
            icon determined by the <code>messageType</code> parameter.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showMessageDialog(java.awt.Component,System.Object,System.String,System.Int32,javax.swing.Icon)">
            <summary>
            Brings up a dialog displaying a message, specifying all parameters.
            </summary>
        </member>
        <member name="M:javax.swing.JOptionPane.showOptionDialog(java.awt.Component,System.Object,System.String,System.Int32,System.Int32,javax.swing.Icon,System.Object[],System.Object)">
            <summary>
            Brings up a dialog with a specified icon, where the initial
            choice is determined by the <code>initialValue</code> parameter and
            the number of choices is determined by the <code>optionType</code>
            parameter.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JOptionPane.updateUI" -->
        <member name="M:javax.swing.JPanel.#ctor">
            <summary>
            Creates a new <code>JPanel</code> with a double buffer
            and a flow layout.
            </summary>
        </member>
        <member name="M:javax.swing.JPanel.#ctor(System.Boolean)">
            <summary>
            Creates a new <code>JPanel</code> with <code>FlowLayout</code>
            and the specified buffering strategy.
            </summary>
        </member>
        <member name="M:javax.swing.JPanel.#ctor(java.awt.LayoutManager)">
            <summary>
            Create a new buffered JPanel with the specified layout manager
            </summary>
        </member>
        <member name="M:javax.swing.JPanel.#ctor(java.awt.LayoutManager,System.Boolean)">
            <summary>
            Creates a new JPanel with the specified layout manager and buffering
            strategy.
            </summary>
        </member>
        <member name="M:javax.swing.JPanel.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JPanel.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPanel.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPanel.getUIClassID" -->
        <member name="M:javax.swing.JPanel.paramString">
            <summary>
            Returns a string representation of this JPanel.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPanel.setUI(javax.swing.plaf.PanelUI)" -->
        <member name="M:javax.swing.JPanel.updateUI">
            <summary>
            Resets the UI property with a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.#ctor">
            <summary>
            Constructs a <code>JPopupMenu</code> without an "invoker".
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.#ctor(System.String)">
            <summary>
            Constructs a <code>JPopupMenu</code> with the specified title.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.add(javax.swing.Action)">
            <summary>
            Appends a new menu item to the end of the menu which
            dispatches the specified <code>Action</code> object.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.add(javax.swing.JMenuItem)">
            <summary>
            Appends the specified menu item to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.add(System.String)">
            <summary>
            Creates a new menu item with the specified text and appends
            it to the end of this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.addPopupMenuListener(javax.swing.event.PopupMenuListener)">
            <summary>
            Adds a <code>PopupMenu</code> listener.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.addSeparator">
            <summary>
            Appends a new separator at the end of the menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.createActionChangeListener(javax.swing.JMenuItem)">
            <summary>
            Returns a properly configured <code>PropertyChangeListener</code>
            which updates the control as changes to the <code>Action</code> occur.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.createActionComponent(javax.swing.Action)">
            <summary>
            Factory method which creates the <code>JMenuItem</code> for
            <code>Actions</code> added to the <code>JPopupMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.firePopupMenuCanceled">
            <summary>
            Notifies <code>PopupMenuListeners</code> that this popup menu is
            cancelled.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible">
            <summary>
            Notifies <code>PopupMenuListener</code>s that this popup menu will
            become invisible.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible">
            <summary>
            Notifies <code>PopupMenuListener</code>s that this popup menu will
            become visible.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JPopupMenu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getComponent">
            <summary>
            Returns this <code>JPopupMenu</code> component.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getComponentAtIndex(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>replaced by <code>getComponent(int i)</code></I>
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getComponentIndex(java.awt.Component)">
            <summary>
            Returns the index of the specified component.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled">
            <summary>
            Gets the <code>defaultLightWeightPopupEnabled</code> property,
            which by default is <code>true</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getInvoker">
            <summary>
            Returns the component which is the 'invoker' of this
            popup menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getLabel">
            <summary>
            Returns the popup menu's label
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getMargin">
            <summary>
            Returns the margin, in pixels, between the popup menu's border and
            its containees.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getPopupMenuListeners">
            <summary>
            Returns an array of all the <code>PopupMenuListener</code>s added
            to this JMenuItem with addPopupMenuListener().
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getSelectionModel">
            <summary>
            Returns the model object that handles single selections.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.getSubElements">
            <summary>
            Returns an array of <code>MenuElement</code>s containing the submenu
            for this menu component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPopupMenu.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPopupMenu.getUIClassID" -->
        <member name="M:javax.swing.JPopupMenu.insert(javax.swing.Action,System.Int32)">
            <summary>
            Inserts a menu item for the specified <code>Action</code> object at
            a given position.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.insert(java.awt.Component,System.Int32)">
            <summary>
            Inserts the specified component into the menu at a given
            position.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.isBorderPainted">
            <summary>
            Checks whether the border should be painted.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.isLightWeightPopupEnabled">
            <summary>
            Gets the <code>lightWeightPopupEnabled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.isPopupTrigger(java.awt.event.MouseEvent)">
            <summary>
            Returns true if the <code>MouseEvent</code> is considered a popup trigger
            by the <code>JPopupMenu</code>'s currently installed UI.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.isVisible">
            <summary>
            Returns true if the popup menu is visible (currently
            being displayed).
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.menuSelectionChanged(System.Boolean)">
            <summary>
            Messaged when the menubar selection changes to activate or
            deactivate this menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.pack">
            <summary>
            Lays out the container so that it uses the minimum space
            needed to display its contents.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.paintBorder(java.awt.Graphics)">
            <summary>
            Paints the popup menu's border if the <code>borderPainted</code>
            property is <code>true</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.paramString">
            <summary>
            Returns a string representation of this <code>JPopupMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.processFocusEvent(java.awt.event.FocusEvent)">
            <summary>
            Processes focus events occurring on this component by
            dispatching them to any registered
            <code>FocusListener</code> objects.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            Processes key stroke events such as mnemonics and accelerators.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            This method is required to conform to the
            <code>MenuElement</code> interface, but it not implemented.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            This method is required to conform to the
            <code>MenuElement</code> interface, but it not implemented.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.remove(System.Int32)">
            <summary>
            Removes the component at the specified index from this popup menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.removePopupMenuListener(javax.swing.event.PopupMenuListener)">
            <summary>
            Removes a <code>PopupMenu</code> listener.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setBorderPainted(System.Boolean)">
            <summary>
            Sets whether the border should be painted.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(System.Boolean)">
            <summary>
            Sets the default value of the <code>lightWeightPopupEnabled</code>
            property.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setInvoker(java.awt.Component)">
            <summary>
            Sets the invoker of this popup menu -- the component in which
            the popup menu menu is to be displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setLabel(System.String)">
            <summary>
            Sets the popup menu's label.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setLightWeightPopupEnabled(System.Boolean)">
            <summary>
            Sets the value of the <code>lightWeightPopupEnabled</code> property,
            which by default is <code>true</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setLocation(System.Int32,System.Int32)">
            <summary>
            Sets the location of the upper left corner of the
            popup menu using x, y coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setPopupSize(java.awt.Dimension)">
            <summary>
            Sets the size of the Popup window using a <code>Dimension</code> object.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setPopupSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the Popup window to the specified width and
            height.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setSelected(java.awt.Component)">
            <summary>
            Sets the currently selected component,  This will result
            in a change to the selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.setSelectionModel(javax.swing.SingleSelectionModel)">
            <summary>
            Sets the model object to handle single selections.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JPopupMenu.setUI(javax.swing.plaf.PopupMenuUI)" -->
        <member name="M:javax.swing.JPopupMenu.setVisible(System.Boolean)">
            <summary>
            Sets the visibility of the popup menu.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.show(java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Displays the popup menu at the position x,y in the coordinate
            space of the component invoker.
            </summary>
        </member>
        <member name="M:javax.swing.JPopupMenu.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor">
            <summary>
            Creates an initially unselected toggle button
            without setting the text or image.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(javax.swing.Action)">
            <summary>
            Creates a toggle button where properties are taken from the
            Action supplied.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(javax.swing.Icon)">
            <summary>
            Creates an initially unselected toggle button
            with the specified image but no text.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(javax.swing.Icon,System.Boolean)">
            <summary>
            Creates a toggle button with the specified image
            and selection state, but no text.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(System.String)">
            <summary>
            Creates an unselected toggle button with the specified text.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a toggle button with the specified text
            and selection state.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(System.String,javax.swing.Icon)">
            <summary>
            Creates a toggle button that has the specified text and image,
            and that is initially unselected.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.#ctor(System.String,javax.swing.Icon,System.Boolean)">
            <summary>
            Creates a toggle button with the specified text, image, and
            selection state.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JToggleButton.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JToggleButton.getUIClassID" -->
        <member name="M:javax.swing.JToggleButton.paramString">
            <summary>
            Returns a string representation of this JToggleButton.
            </summary>
        </member>
        <member name="M:javax.swing.JToggleButton.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor">
            <summary>
            Creates an initially unselected radio button
            with no set text.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(javax.swing.Action)">
            <summary>
            Creates a radiobutton where properties are taken from the
            Action supplied.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(javax.swing.Icon)">
            <summary>
            Creates an initially unselected radio button
            with the specified image but no text.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(javax.swing.Icon,System.Boolean)">
            <summary>
            Creates a radio button with the specified image
            and selection state, but no text.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(System.String)">
            <summary>
            Creates an unselected radio button with the specified text.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a radio button with the specified text
            and selection state.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(System.String,javax.swing.Icon)">
            <summary>
            Creates a radio button that has the specified text and image,
            and that is initially unselected.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.#ctor(System.String,javax.swing.Icon,System.Boolean)">
            <summary>
            Creates a radio button that has the specified text, image,
            and selection state.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>ActionEvent</code> source's
            properties according to values from the Action instance.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.createActionPropertyChangeListener(javax.swing.Action)">
            <summary>
            Factory method which creates the PropertyChangeListener
            used to update the ActionEvent source as properties change on
            its Action instance.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JRadioButton.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JRadioButton.getUIClassID" -->
        <member name="M:javax.swing.JRadioButton.paramString">
            <summary>
            Returns a string representation of this JRadioButton.
            </summary>
        </member>
        <member name="M:javax.swing.JRadioButton.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.#ctor">
            <summary>
            Creates a <code>JRootPane</code>, setting up its
            <code>glassPane</code>, <code>layeredPane</code>,
            and <code>contentPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Overridden to enforce the position of the glass component as
            the zero child.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.addNotify">
            <summary>
            Register ourselves with the <code>SystemEventQueueUtils</code> as a new
            root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.createContentPane">
            <summary>
            Called by the constructor methods to create the default
            <code>contentPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.createGlassPane">
            <summary>
            Called by the constructor methods to create the default
            <code>glassPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.createLayeredPane">
            <summary>
            Called by the constructor methods to create the default
            <code>layeredPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.createRootLayout">
            <summary>
            Called by the constructor methods to create the default
            <code>layoutManager</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getContentPane">
            <summary>
            Returns the content pane -- the container that holds the components
            parented by the root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getDefaultButton">
            <summary>
            Returns the value of the <code>defaultButton</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getGlassPane">
            <summary>
            Returns the current glass pane for this <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getJMenuBar">
            <summary>
            Returns the menu bar from the layered pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getLayeredPane">
            <summary>
            Gets the layered pane used by the root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.getMenuBar">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.3
            replaced by <code>getJMenubar()</code>.</I>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JRootPane.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JRootPane.getUIClassID" -->
        <member name="M:javax.swing.JRootPane.getWindowDecorationStyle">
            <summary>
            Returns a constant identifying the type of Window decorations the
            <code>JRootPane</code> is providing.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.isOptimizedDrawingEnabled">
            <summary>
            The <code>glassPane</code> and <code>contentPane</code>
            have the same bounds, which means <code>JRootPane</code>
            does not tiles its children and this should return false.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.isValidateRoot">
            <summary>
            If a descendant of this <code>JRootPane</code> calls
            <code>revalidate</code>, validate from here on down.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.paramString">
            <summary>
            Returns a string representation of this <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.removeNotify">
            <summary>
            Unregister ourselves from <code>SystemEventQueueUtils</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setContentPane(java.awt.Container)">
            <summary>
            Sets the content pane -- the container that holds the components
            parented by the root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setDefaultButton(javax.swing.JButton)">
            <summary>
            Sets the <code>defaultButton</code> property,
            which determines the current default button for this <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setGlassPane(java.awt.Component)">
            <summary>
            Sets a specified <code>Component</code> to be the glass pane for this
            root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setJMenuBar(javax.swing.JMenuBar)">
            <summary>
            Adds or changes the menu bar used in the layered pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setLayeredPane(javax.swing.JLayeredPane)">
            <summary>
            Sets the layered pane for the root pane.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.setMenuBar(javax.swing.JMenuBar)">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.3
            replaced by <code>setJMenuBar(JMenuBar menu)</code>.</I>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JRootPane.setUI(javax.swing.plaf.RootPaneUI)" -->
        <member name="M:javax.swing.JRootPane.setWindowDecorationStyle(System.Int32)">
            <summary>
            Sets the type of Window decorations (such as borders, widgets for
            closing a Window, title ...) the <code>JRootPane</code> should
            provide.
            </summary>
        </member>
        <member name="M:javax.swing.JRootPane.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.#ctor">
            <summary>
            Creates a vertical scrollbar with the following initial values:
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.#ctor(System.Int32)">
            <summary>
            Creates a scrollbar with the specified orientation
            and the following initial values:
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a scrollbar with the specified orientation,
            value, extent, minimum, and maximum.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.addAdjustmentListener(java.awt.event.AdjustmentListener)">
            <summary>
            Adds an AdjustmentListener.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.fireAdjustmentValueChanged(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JScrollBar.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getAdjustmentListeners">
            <summary>
            Returns an array of all the <code>AdjustmentListener</code>s added
            to this JScrollBar with addAdjustmentListener().
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getBlockIncrement">
            <summary>
            For backwards compatibility with java.awt.Scrollbar.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getBlockIncrement(System.Int32)">
            <summary>
            Returns the amount to change the scrollbar's value by,
            given a block (usually "page") up/down request.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getMaximum">
            <summary>
            The maximum value of the scrollbar is maximum - extent.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getMaximumSize">
            <summary>
            The scrollbar is flexible along it's scrolling axis and
            rigid along the other axis.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getMinimum">
            <summary>
            Returns the minimum value supported by the scrollbar
            (usually zero).
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getMinimumSize">
            <summary>
            The scrollbar is flexible along it's scrolling axis and
            rigid along the other axis.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getModel">
            <summary>
            Returns data model that handles the scrollbar's four
            fundamental properties: minimum, maximum, value, extent.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getOrientation">
            <summary>
            Returns the component's orientation (horizontal or vertical).
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getUI">
            <summary>
            Returns the delegate that implements the look and feel for
            this component.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getUIClassID">
            <summary>
            Returns the name of the LookAndFeel class for this component.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getUnitIncrement">
            <summary>
            For backwards compatibility with java.awt.Scrollbar.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getUnitIncrement(System.Int32)">
            <summary>
            Returns the amount to change the scrollbar's value by,
            given a unit up/down request.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getValue">
            <summary>
            Returns the scrollbar's value.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getValueIsAdjusting">
            <summary>
            True if the scrollbar knob is being dragged.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.getVisibleAmount">
            <summary>
            Returns the scrollbar's extent, aka its "visibleAmount".
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.paramString">
            <summary>
            Returns a string representation of this JScrollBar.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.removeAdjustmentListener(java.awt.event.AdjustmentListener)">
            <summary>
            Removes an AdjustmentEvent listener.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setBlockIncrement(System.Int32)">
            <summary>
            Sets the blockIncrement property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setEnabled(System.Boolean)">
            <summary>
            Enables the component so that the knob position can be changed.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setMaximum(System.Int32)">
            <summary>
            Sets the model's maximum property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setMinimum(System.Int32)">
            <summary>
            Sets the model's minimum property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setModel(javax.swing.BoundedRangeModel)">
            <summary>
            Sets the model that handles the scrollbar's four
            fundamental properties: minimum, maximum, value, extent.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setOrientation(System.Int32)">
            <summary>
            Set the scrollbar's orientation to either VERTICAL or
            HORIZONTAL.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JScrollBar.setUI(javax.swing.plaf.ScrollBarUI)" -->
        <member name="M:javax.swing.JScrollBar.setUnitIncrement(System.Int32)">
            <summary>
            Sets the unitIncrement property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setValue(System.Int32)">
            <summary>
            Sets the scrollbar's value.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setValueIsAdjusting(System.Boolean)">
            <summary>
            Sets the model's valueIsAdjusting property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setValues(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the four BoundedRangeModel properties after forcing
            the arguments to obey the usual constraints:
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.setVisibleAmount(System.Int32)">
            <summary>
            Set the model's extent property.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollBar.updateUI">
            <summary>
            Overrides <code>JComponent.updateUI</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.#ctor">
            <summary>
            Creates an empty (no viewport view) <code>JScrollPane</code>
            where both horizontal and vertical scrollbars appear when needed.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.#ctor(java.awt.Component)">
            <summary>
            Creates a <code>JScrollPane</code> that displays the
            contents of the specified
            component, where both horizontal and vertical scrollbars appear
            whenever the component's contents are larger than the view.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.#ctor(java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Creates a <code>JScrollPane</code> that displays the view
            component in a viewport
            whose view position can be controlled with a pair of scrollbars.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an empty (no viewport view) <code>JScrollPane</code>
            with specified
            scrollbar policies.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.createHorizontalScrollBar">
            <summary>
            Returns a <code>JScrollPane.ScrollBar</code> by default.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.createVerticalScrollBar">
            <summary>
            Returns a <code>JScrollPane.ScrollBar</code> by default.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.createViewport">
            <summary>
            Returns a new <code>JViewport</code> by default.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JScrollPane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getColumnHeader">
            <summary>
            Returns the column header.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getCorner(System.String)">
            <summary>
            Returns the component at the specified corner.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getHorizontalScrollBar">
            <summary>
            Returns the horizontal scroll bar that controls the viewport's
            horizontal view position.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getHorizontalScrollBarPolicy">
            <summary>
            Returns the horizontal scroll bar policy value.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getRowHeader">
            <summary>
            Returns the row header.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JScrollPane.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JScrollPane.getUIClassID" -->
        <member name="M:javax.swing.JScrollPane.getVerticalScrollBar">
            <summary>
            Returns the vertical scroll bar that controls the viewports
            vertical view position.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getVerticalScrollBarPolicy">
            <summary>
            Returns the vertical scroll bar policy value.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getViewport">
            <summary>
            Returns the current <code>JViewport</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getViewportBorder">
            <summary>
            Returns the <code>Border</code> object that surrounds the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.getViewportBorderBounds">
            <summary>
            Returns the bounds of the viewport's border.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.isValidateRoot">
            <summary>
            Calls <code>revalidate</code> on any descendant of this
            <code>JScrollPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.isWheelScrollingEnabled">
            <summary>
            Indicates whether or not scrolling will take place in response to the
            mouse wheel.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.paramString">
            <summary>
            Returns a string representation of this <code>JScrollPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setColumnHeader(javax.swing.JViewport)">
            <summary>
            Removes the old columnHeader, if it exists.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setColumnHeaderView(java.awt.Component)">
            <summary>
            Creates a column-header viewport if necessary, sets
            its view, and then adds the column-header viewport
            to the scrollpane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setComponentOrientation(java.awt.ComponentOrientation)">
            <summary>
            Sets the orientation for the vertical and horizontal
            scrollbars as determined by the
            <code>ComponentOrientation</code> argument.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setCorner(System.String,java.awt.Component)">
            <summary>
            Adds a child that will appear in one of the scroll panes
            corners, if there's room.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setHorizontalScrollBar(javax.swing.JScrollBar)">
            <summary>
            Adds the scrollbar that controls the viewport's horizontal view
            position to the scrollpane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setHorizontalScrollBarPolicy(System.Int32)">
            <summary>
            Determines when the horizontal scrollbar appears in the scrollpane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setLayout(java.awt.LayoutManager)">
            <summary>
            Sets the layout manager for this <code>JScrollPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setRowHeader(javax.swing.JViewport)">
            <summary>
            Removes the old rowHeader, if it exists.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setRowHeaderView(java.awt.Component)">
            <summary>
            Creates a row-header viewport if necessary, sets
            its view and then adds the row-header viewport
            to the scrollpane.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JScrollPane.setUI(javax.swing.plaf.ScrollPaneUI)" -->
        <member name="M:javax.swing.JScrollPane.setVerticalScrollBar(javax.swing.JScrollBar)">
            <summary>
            Adds the scrollbar that controls the viewports vertical view position
            to the scrollpane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setVerticalScrollBarPolicy(System.Int32)">
            <summary>
            Determines when the vertical scrollbar appears in the scrollpane.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setViewport(javax.swing.JViewport)">
            <summary>
            Removes the old viewport (if there is one); forces the
            viewPosition of the new viewport to be in the +x,+y quadrant;
            syncs up the row and column headers (if there are any) with the
            new viewport; and finally syncs the scrollbars and
            headers with the new viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setViewportBorder(javax.swing.border.Border)">
            <summary>
            Adds a border around the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setViewportView(java.awt.Component)">
            <summary>
            Creates a viewport if necessary and then sets its view.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.setWheelScrollingEnabled(System.Boolean)">
            <summary>
            Enables/disables scrolling in response to movement of the mouse wheel.
            </summary>
        </member>
        <member name="M:javax.swing.JScrollPane.updateUI">
            <summary>
            Replaces the current <code>ScrollPaneUI</code> object with a version
            from the current default look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor">
            <summary>
            Constructs a default <code>JTable</code> that is initialized with a default
            data model, a default column model, and a default selection
            model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a <code>JTable</code> with <code>numRows</code>
            and <code>numColumns</code> of empty cells using
            <code>DefaultTableModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(System.Object[][],System.Object[])">
            <summary>
            Constructs a <code>JTable</code> to display the values in the two dimensional array,
            <code>rowData</code>, with column names, <code>columnNames</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(javax.swing.table.TableModel)">
            <summary>
            Constructs a <code>JTable</code> that is initialized with
            <code>dm</code> as the data model, a default column model,
            and a default selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(javax.swing.table.TableModel,javax.swing.table.TableColumnModel)">
            <summary>
            Constructs a <code>JTable</code> that is initialized with
            <code>dm</code> as the data model, <code>cm</code>
            as the column model, and a default selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(javax.swing.table.TableModel,javax.swing.table.TableColumnModel,javax.swing.ListSelectionModel)">
            <summary>
            Constructs a <code>JTable</code> that is initialized with
            <code>dm</code> as the data model, <code>cm</code> as the
            column model, and <code>sm</code> as the selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.#ctor(java.util.Vector,java.util.Vector)">
            <summary>
            Constructs a <code>JTable</code> to display the values in the
            <code>Vector</code> of <code>Vectors</code>, <code>rowData</code>,
            with column names, <code>columnNames</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.addColumn(javax.swing.table.TableColumn)">
            <summary>
            Appends <code>aColumn</code> to the end of the array of columns held by
            this <code>JTable</code>'s column model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.addColumnSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Adds the columns from <code>index0</code> to <code>index1</code>,
            inclusive, to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.addNotify">
            <summary>
            Calls the <code>configureEnclosingScrollPane</code> method.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.addRowSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Adds the rows from <code>index0</code> to <code>index1</code>, inclusive, to
            the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.changeSelection(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection models of the table, depending on the state of the
            two flags: <code>toggle</code> and <code>extend</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.clearSelection">
            <summary>
            Deselects all selected columns and rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnAdded(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is added to the table column model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnAtPoint(java.awt.Point)">
            <summary>
            Returns the index of the column that <code>point</code> lies in,
            or -1 if the result is not in the range
            [0, <code>getColumnCount()</code>-1].
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnMarginChanged(javax.swing.event.ChangeEvent)">
            <summary>
            Invoked when a column is moved due to a margin change.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnMoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is repositioned.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnRemoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is removed from the table column model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.columnSelectionChanged(javax.swing.event.ListSelectionEvent)">
            <summary>
            Invoked when the selection model of the <code>TableColumnModel</code>
            is changed.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.configureEnclosingScrollPane">
            <summary>
            If this <code>JTable</code> is the <code>viewportView</code> of an enclosing <code>JScrollPane</code>
            (the usual situation), configure this <code>ScrollPane</code> by, amongst other things,
            installing the table's <code>tableHeader</code> as the <code>columnHeaderView</code> of the scroll pane.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.convertColumnIndexToModel(System.Int32)">
            <summary>
            Maps the index of the column in the view at
            <code>viewColumnIndex</code> to the index of the column
            in the table model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.convertColumnIndexToView(System.Int32)">
            <summary>
            Maps the index of the column in the table model at
            <code>modelColumnIndex</code> to the index of the column
            in the view.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultColumnModel">
            <summary>
            Returns the default column model object, which is
            a <code>DefaultTableColumnModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultColumnsFromModel">
            <summary>
            Creates default columns for the table from
            the data model using the <code>getColumnCount</code> method
            defined in the <code>TableModel</code> interface.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultDataModel">
            <summary>
            Returns the default table model object, which is
            a <code>DefaultTableModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultEditors">
            <summary>
            Creates default cell editors for objects, numbers, and boolean values.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultRenderers">
            <summary>
            Creates default cell renderers for objects, numbers, doubles, dates,
            booleans, and icons.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultSelectionModel">
            <summary>
            Returns the default selection model object, which is
            a <code>DefaultListSelectionModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createDefaultTableHeader">
            <summary>
            Returns the default table header object, which is
            a <code>JTableHeader</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.createScrollPaneForTable(javax.swing.JTable)">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.2,
            replaced by <code>new JScrollPane(aTable)</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JTable.doLayout">
            <summary>
            Causes this table to lay out its rows and columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.editCellAt(System.Int32,System.Int32)">
            <summary>
            Programmatically starts editing the cell at <code>row</code> and
            <code>column</code>, if the cell is editable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.editCellAt(System.Int32,System.Int32,java.util.EventObject)">
            <summary>
            Programmatically starts editing the cell at <code>row</code> and
            <code>column</code>, if the cell is editable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.editingCanceled(javax.swing.event.ChangeEvent)">
            <summary>
            Invoked when editing is canceled.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.editingStopped(javax.swing.event.ChangeEvent)">
            <summary>
            Invoked when editing is finished.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JTable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getAutoCreateColumnsFromModel">
            <summary>
            Determines whether the table will create default columns from the model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getAutoResizeMode">
            <summary>
            Returns the auto resize mode of the table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getCellEditor">
            <summary>
            Returns the cell editor.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getCellEditor(System.Int32,System.Int32)">
            <summary>
            Returns an appropriate editor for the cell specified by
            <code>row</code> and <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getCellRect(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a rectangle for the cell that lies at the intersection of
            <code>row</code> and <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getCellRenderer(System.Int32,System.Int32)">
            <summary>
            Returns an appropriate renderer for the cell specified by this row and
            column.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getCellSelectionEnabled">
            <summary>
            Returns true if both row and column selection models are enabled.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumn(System.Object)">
            <summary>
            Returns the <code>TableColumn</code> object for the column in the table
            whose identifier is equal to <code>identifier</code>, when compared using
            <code>equals</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumnClass(System.Int32)">
            <summary>
            Returns the type of the column appearing in the view at
            column position <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumnCount">
            <summary>
            Returns the number of columns in the column model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumnModel">
            <summary>
            Returns the <code>TableColumnModel</code> that contains all column information
            of this table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumnName(System.Int32)">
            <summary>
            Returns the name of the column appearing in the view at
            column position <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getColumnSelectionAllowed">
            <summary>
            Returns true if columns can be selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getDefaultEditor(java.lang.Class)">
            <summary>
            Returns the editor to be used when no editor has been set in
            a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getDefaultRenderer(java.lang.Class)">
            <summary>
            Returns the cell renderer to be used when no renderer has been set in
            a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getDragEnabled">
            <summary>
            Gets the value of the <code>dragEnabled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getEditingColumn">
            <summary>
            Returns the index of the column that contains the cell currently
            being edited.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getEditingRow">
            <summary>
            Returns the index of the row that contains the cell currently
            being edited.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getEditorComponent">
            <summary>
            Returns the component that is handling the editing session.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getGridColor">
            <summary>
            Returns the color used to draw grid lines.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getIntercellSpacing">
            <summary>
            Returns the horizontal and vertical space between cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getModel">
            <summary>
            Returns the <code>TableModel</code> that provides the data displayed by this
            <code>JTable</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getPreferredScrollableViewportSize">
            <summary>
            Returns the preferred size of the viewport for this table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getRowCount">
            <summary>
            Returns the number of rows in this table's model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getRowHeight">
            <summary>
            Returns the height of a table row, in pixels.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getRowHeight(System.Int32)">
            <summary>
            Returns the height, in pixels, of the cells in <code>row</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getRowMargin">
            <summary>
            Gets the amount of empty space, in pixels, between cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getRowSelectionAllowed">
            <summary>
            Returns true if rows can be selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getScrollableBlockIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Returns <code>visibleRect.height</code> or
            <code>visibleRect.width</code>,
            depending on this table's orientation.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getScrollableTracksViewportHeight">
            <summary>
            Returns false to indicate that the height of the viewport does not
            determine the height of the table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getScrollableTracksViewportWidth">
            <summary>
            Returns false if <code>autoResizeMode</code> is set to
            <code>AUTO_RESIZE_OFF</code>, which indicates that the
            width of the viewport does not determine the width
            of the table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getScrollableUnitIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Returns the scroll increment (in pixels) that completely exposes one new
            row or column (depending on the orientation).
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedColumn">
            <summary>
            Returns the index of the first selected column,
            -1 if no column is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedColumnCount">
            <summary>
            Returns the number of selected columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedColumns">
            <summary>
            Returns the indices of all selected columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedRow">
            <summary>
            Returns the index of the first selected row, -1 if no row is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedRowCount">
            <summary>
            Returns the number of selected rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectedRows">
            <summary>
            Returns the indices of all selected rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectionBackground">
            <summary>
            Returns the background color for selected cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectionForeground">
            <summary>
            Returns the foreground color for selected cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSelectionModel">
            <summary>
            Returns the <code>ListSelectionModel</code> that is used to maintain row
            selection state.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getShowHorizontalLines">
            <summary>
            Returns true if the table draws horizontal lines between cells, false if it
            doesn't.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getShowVerticalLines">
            <summary>
            Returns true if the table draws vertical lines between cells, false if it
            doesn't.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getSurrendersFocusOnKeystroke">
            <summary>
            Returns true if the editor should get the focus
            when keystrokes cause the editor to be activated
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getTableHeader">
            <summary>
            Returns the <code>tableHeader</code> used by this <code>JTable</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.getToolTipText(java.awt.event.MouseEvent)">
            <summary>
            Overrides <code>JComponent</code>'s <code>getToolTipText</code>
            method in order to allow the renderer's tips to be used
            if it has text set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTable.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTable.getUIClassID" -->
        <member name="M:javax.swing.JTable.getValueAt(System.Int32,System.Int32)">
            <summary>
            Returns the cell value at <code>row</code> and <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.initializeLocalVars">
            <summary>
            Initializes table properties to their default values.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.isCellEditable(System.Int32,System.Int32)">
            <summary>
            Returns true if the cell at <code>row</code> and <code>column</code>
            is editable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.isCellSelected(System.Int32,System.Int32)">
            <summary>
            Returns true if the cell at the specified position is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.isColumnSelected(System.Int32)">
            <summary>
            Returns true if the column at the specified index is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.isEditing">
            <summary>
            Returns true if a cell is being edited.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.isRowSelected(System.Int32)">
            <summary>
            Returns true if the row at the specified index is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.moveColumn(System.Int32,System.Int32)">
            <summary>
            Moves the column <code>column</code> to the position currently
            occupied by the column <code>targetColumn</code> in the view.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.paramString">
            <summary>
            Returns a string representation of this table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.prepareEditor(javax.swing.table.TableCellEditor,System.Int32,System.Int32)">
            <summary>
            Prepares the editor by querying the data model for the value and
            selection state of the cell at <code>row</code>, <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.prepareRenderer(javax.swing.table.TableCellRenderer,System.Int32,System.Int32)">
            <summary>
            Prepares the renderer by querying the data model for the
            value and selection state
            of the cell at <code>row</code>, <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,System.Int32,System.Boolean)">
            <summary>
            Invoked to process the key bindings for <code>ks</code> as the result
            of the <code>KeyEvent</code> <code>e</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.removeColumn(javax.swing.table.TableColumn)">
            <summary>
            Removes <code>aColumn</code> from this <code>JTable</code>'s
            array of columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.removeColumnSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Deselects the columns from <code>index0</code> to <code>index1</code>, inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.removeEditor">
            <summary>
            Discards the editor object and frees the real estate it used for
            cell rendering.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.removeNotify">
            <summary>
            Calls the <code>unconfigureEnclosingScrollPane</code> method.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.removeRowSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Deselects the rows from <code>index0</code> to <code>index1</code>, inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.resizeAndRepaint">
            <summary>
            Equivalent to <code>revalidate</code> followed by <code>repaint</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.rowAtPoint(java.awt.Point)">
            <summary>
            Returns the index of the row that <code>point</code> lies in,
            or -1 if the result is not in the range
            [0, <code>getRowCount()</code>-1].
            </summary>
        </member>
        <member name="M:javax.swing.JTable.selectAll">
            <summary>
            Selects all rows, columns, and cells in the table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setAutoCreateColumnsFromModel(System.Boolean)">
            <summary>
            Sets this table's <code>autoCreateColumnsFromModel</code> flag.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setAutoResizeMode(System.Int32)">
            <summary>
            Sets the table's auto resize mode when the table is resized.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setCellEditor(javax.swing.table.TableCellEditor)">
            <summary>
            Sets the <code>cellEditor</code> variable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setCellSelectionEnabled(System.Boolean)">
            <summary>
            Sets whether this table allows both a column selection and a
            row selection to exist simultaneously.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setColumnModel(javax.swing.table.TableColumnModel)">
            <summary>
            Sets the column model for this table to <code>newModel</code> and registers
            for listener notifications from the new column model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setColumnSelectionAllowed(System.Boolean)">
            <summary>
            Sets whether the columns in this model can be selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setColumnSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Selects the columns from <code>index0</code> to <code>index1</code>,
            inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setDefaultEditor(java.lang.Class,javax.swing.table.TableCellEditor)">
            <summary>
            Sets a default cell editor to be used if no editor has been set in
            a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setDefaultRenderer(java.lang.Class,javax.swing.table.TableCellRenderer)">
            <summary>
            Sets a default cell renderer to be used if no renderer has been set in
            a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setDragEnabled(System.Boolean)">
            <summary>
            Sets the <code>dragEnabled</code> property,
            which must be <code>true</code> to enable
            automatic drag handling (the first part of drag and drop)
            on this component.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setEditingColumn(System.Int32)">
            <summary>
            Sets the <code>editingColumn</code> variable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setEditingRow(System.Int32)">
            <summary>
            Sets the <code>editingRow</code> variable.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setGridColor(java.awt.Color)">
            <summary>
            Sets the color used to draw grid lines to <code>gridColor</code> and redisplays.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setIntercellSpacing(java.awt.Dimension)">
            <summary>
            Sets the <code>rowMargin</code> and the <code>columnMargin</code> --
            the height and width of the space between cells -- to
            <code>intercellSpacing</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setModel(javax.swing.table.TableModel)">
            <summary>
            Sets the data model for this table to <code>newModel</code> and registers
            with it for listener notifications from the new data model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setPreferredScrollableViewportSize(java.awt.Dimension)">
            <summary>
            Sets the preferred size of the viewport for this table.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setRowHeight(System.Int32)">
            <summary>
            Sets the height, in pixels, of all cells to <code>rowHeight</code>,
            revalidates, and repaints.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setRowHeight(System.Int32,System.Int32)">
            <summary>
            Sets the height for <code>row</code> to <code>rowHeight</code>,
            revalidates, and repaints.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setRowMargin(System.Int32)">
            <summary>
            Sets the amount of empty space between cells in adjacent rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setRowSelectionAllowed(System.Boolean)">
            <summary>
            Sets whether the rows in this model can be selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setRowSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Selects the rows from <code>index0</code> to <code>index1</code>,
            inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setSelectionBackground(java.awt.Color)">
            <summary>
            Sets the background color for selected cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setSelectionForeground(java.awt.Color)">
            <summary>
            Sets the foreground color for selected cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setSelectionMode(System.Int32)">
            <summary>
            Sets the table's selection mode to allow only single selections, a single
            contiguous interval, or multiple intervals.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setSelectionModel(javax.swing.ListSelectionModel)">
            <summary>
            Sets the row selection model for this table to <code>newModel</code>
            and registers for listener notifications from the new selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setShowGrid(System.Boolean)">
            <summary>
            Sets whether the table draws grid lines around cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setShowHorizontalLines(System.Boolean)">
            <summary>
            Sets whether the table draws horizontal lines between cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setShowVerticalLines(System.Boolean)">
            <summary>
            Sets whether the table draws vertical lines between cells.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setSurrendersFocusOnKeystroke(System.Boolean)">
            <summary>
            Sets whether editors in this JTable get the keyboard focus
            when an editor is activated as a result of the JTable
            forwarding keyboard events for a cell.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.setTableHeader(javax.swing.table.JTableHeader)">
            <summary>
            Sets the <code>tableHeader</code> working with this <code>JTable</code> to <code>newHeader</code>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTable.setUI(javax.swing.plaf.TableUI)" -->
        <member name="M:javax.swing.JTable.setValueAt(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the value for the cell in the table model at <code>row</code>
            and <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.sizeColumnsToFit(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>As of Swing version 1.0.3,
            replaced by <code>doLayout()</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JTable.sizeColumnsToFit(System.Int32)">
            <summary>
            Obsolete as of Java 2 platform v1.4.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.tableChanged(javax.swing.event.TableModelEvent)">
            <summary>
            Invoked when this table's <code>TableModel</code> generates
            a <code>TableModelEvent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTable.unconfigureEnclosingScrollPane">
            <summary>
            Reverses the effect of <code>configureEnclosingScrollPane</code>
            by replacing the <code>columnHeaderView</code> of the enclosing
            scroll pane with <code>null</code>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTable.updateUI" -->
        <member name="M:javax.swing.JTable.valueChanged(javax.swing.event.ListSelectionEvent)">
            <summary>
            Invoked when the row selection changes -- repaints to show the new
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor">
            <summary>
            Constructs a new TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor(javax.swing.text.Document)">
            <summary>
            Constructs a new JTextArea with the given document model, and defaults
            for all of the other arguments (null, 0, 0).
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor(javax.swing.text.Document,System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a new JTextArea with the specified number of rows
            and columns, and the given model.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new empty TextArea with the specified number of
            rows and columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor(System.String)">
            <summary>
            Constructs a new TextArea with the specified text displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a new TextArea with the specified text and number
            of rows and columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.append(System.String)">
            <summary>
            Appends the given text to the end of the document.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.createDefaultModel">
            <summary>
            Creates the default implementation of the model
            to be used at construction if one isn't explicitly
            given.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JTextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getColumns">
            <summary>
            Returns the number of columns in the TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getColumnWidth">
            <summary>
            Gets column width.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getLineCount">
            <summary>
            Determines the number of lines contained in the area.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getLineEndOffset(System.Int32)">
            <summary>
            Determines the offset of the end of the given line.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getLineOfOffset(System.Int32)">
            <summary>
            Translates an offset into the components text to a
            line number.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getLineStartOffset(System.Int32)">
            <summary>
            Determines the offset of the start of the given line.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getLineWrap">
            <summary>
            Gets the line-wrapping policy of the text area.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getPreferredScrollableViewportSize">
            <summary>
            Returns the preferred size of the viewport if this component
            is embedded in a JScrollPane.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getPreferredSize">
            <summary>
            Returns the preferred size of the TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getRowHeight">
            <summary>
            Defines the meaning of the height of a row.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getRows">
            <summary>
            Returns the number of rows in the TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getScrollableTracksViewportWidth">
            <summary>
            Returns true if a viewport should always force the width of this
            Scrollable to match the width of the viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getScrollableUnitIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Components that display logical rows or columns should compute
            the scroll increment that will completely expose one new row
            or column, depending on the value of orientation.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getTabSize">
            <summary>
            Gets the number of characters used to expand tabs.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getUIClassID">
            <summary>
            Returns the class ID for the UI.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.getWrapStyleWord">
            <summary>
            Gets the style of wrapping used if the text area is wrapping
            lines.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.insert(System.String,System.Int32)">
            <summary>
            Inserts the specified text at the specified position.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.paramString">
            <summary>
            Returns a string representation of this JTextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.replaceRange(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces text from the indicated start to end position with the
            new text specified.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setColumns(System.Int32)">
            <summary>
            Sets the number of columns for this TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setFont(java.awt.Font)">
            <summary>
            Sets the current font.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setLineWrap(System.Boolean)">
            <summary>
            Sets the line-wrapping policy of the text area.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setRows(System.Int32)">
            <summary>
            Sets the number of rows for this TextArea.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setTabSize(System.Int32)">
            <summary>
            Sets the number of characters to expand tabs to.
            </summary>
        </member>
        <member name="M:javax.swing.JTextArea.setWrapStyleWord(System.Boolean)">
            <summary>
            Sets the style of wrapping used if the text area is wrapping
            lines.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.#ctor">
            <summary>
            Constructs a new <code>TextField</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.#ctor(javax.swing.text.Document,System.String,System.Int32)">
            <summary>
            Constructs a new <code>JTextField</code> that uses the given text
            storage model and the given number of columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.#ctor(System.Int32)">
            <summary>
            Constructs a new empty <code>TextField</code> with the specified
            number of columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.#ctor(System.String)">
            <summary>
            Constructs a new <code>TextField</code> initialized with the
            specified text.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new <code>TextField</code> initialized with the
            specified text and columns.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)">
            <summary>
            Adds the specified action listener to receive
            action events from this textfield.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.configurePropertiesFromAction(javax.swing.Action)">
            <summary>
            Factory method which sets the <code>ActionEvent</code>
            source's properties according to values from the
            <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.createActionPropertyChangeListener(javax.swing.Action)">
            <summary>
            Factory method which creates the <code>PropertyChangeListener</code>
            used to update the <code>ActionEvent</code> source as
            properties change on its <code>Action</code> instance.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.createDefaultModel">
            <summary>
            Creates the default implementation of the model
            to be used at construction if one isn't explicitly
            given.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.fireActionPerformed">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>JTextField</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getAction">
            <summary>
            Returns the currently set <code>Action</code> for this
            <code>ActionEvent</code> source, or <code>null</code>
            if no <code>Action</code> is set.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getActionListeners">
            <summary>
            Returns an array of all the <code>ActionListener</code>s added
            to this JTextField with addActionListener().
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getActions">
            <summary>
            Fetches the command list for the editor.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getColumns">
            <summary>
            Returns the number of columns in this <code>TextField</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getColumnWidth">
            <summary>
            Returns the column width.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getHorizontalAlignment">
            <summary>
            Returns the horizontal alignment of the text.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getHorizontalVisibility">
            <summary>
            Gets the visibility of the text field.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getPreferredSize">
            <summary>
            Returns the preferred size <code>Dimensions</code> needed for this
            <code>TextField</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getScrollOffset">
            <summary>
            Gets the scroll offset, in pixels.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.getUIClassID">
            <summary>
            Gets the class ID for a UI.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.isValidateRoot">
            <summary>
            Calls to <code>revalidate</code> that come from within the
            textfield itself will
            be handled by validating the textfield, unless the textfield
            is contained within a <code>JViewport</code>,
            in which case this returns false.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.paramString">
            <summary>
            Returns a string representation of this <code>JTextField</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.postActionEvent">
            <summary>
            Processes action events occurring on this textfield by
            dispatching them to any registered <code>ActionListener</code> objects.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener)">
            <summary>
            Removes the specified action listener so that it no longer
            receives action events from this textfield.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.scrollRectToVisible(java.awt.Rectangle)">
            <summary>
            Scrolls the field left or right.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setAction(javax.swing.Action)">
            <summary>
            Sets the <code>Action</code> for the <code>ActionEvent</code> source.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setActionCommand(System.String)">
            <summary>
            Sets the command string used for action events.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setColumns(System.Int32)">
            <summary>
            Sets the number of columns in this <code>TextField</code>,
            and then invalidate the layout.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setDocument(javax.swing.text.Document)">
            <summary>
            Associates the editor with a text document.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setFont(java.awt.Font)">
            <summary>
            Sets the current font.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setHorizontalAlignment(System.Int32)">
            <summary>
            Sets the horizontal alignment of the text.
            </summary>
        </member>
        <member name="M:javax.swing.JTextField.setScrollOffset(System.Int32)">
            <summary>
            Sets the scroll offset, in pixels.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.#ctor">
            <summary>
            Creates a tool tip.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JToolTip.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.getComponent">
            <summary>
            Returns the component the tooltip applies to.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.getTipText">
            <summary>
            Returns the text that is shown when the tool tip is displayed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JToolTip.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JToolTip.getUIClassID" -->
        <member name="M:javax.swing.JToolTip.paramString">
            <summary>
            Returns a string representation of this <code>JToolTip</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.setComponent(javax.swing.JComponent)">
            <summary>
            Specifies the component that the tooltip describes.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.setTipText(System.String)">
            <summary>
            Sets the text to show when the tool tip is displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JToolTip.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor">
            <summary>
            Returns a <code>JTree</code> with a sample model.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(java.util.Hashtable)">
            <summary>
            Returns a <code>JTree</code> created from a <code>Hashtable</code>
            which does not display with root.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(System.Object[])">
            <summary>
            Returns a <code>JTree</code> with each element of the
            specified array as the
            child of a new root node which is not displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(javax.swing.tree.TreeModel)">
            <summary>
            Returns an instance of <code>JTree</code> which displays the root node
            -- the tree is created using the specified data model.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(javax.swing.tree.TreeNode)">
            <summary>
            Returns a <code>JTree</code> with the specified
            <code>TreeNode</code> as its root,
            which displays the root node.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(javax.swing.tree.TreeNode,System.Boolean)">
            <summary>
            Returns a <code>JTree</code> with the specified <code>TreeNode</code>
            as its root, which
            displays the root node and which decides whether a node is a
            leaf node in the specified manner.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.#ctor(java.util.Vector)">
            <summary>
            Returns a <code>JTree</code> with each element of the specified
            <code>Vector</code> as the
            child of a new root node which is not displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Adds the paths between index0 and index1, inclusive, to the
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Adds the node identified by the specified <code>TreePath</code>
            to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Adds each path in the array of paths to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addSelectionRow(System.Int32)">
            <summary>
            Adds the path at the specified row to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addSelectionRows(System.Int32[])">
            <summary>
            Adds the paths at each of the specified rows to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addTreeExpansionListener(javax.swing.event.TreeExpansionListener)">
            <summary>
            Adds a listener for <code>TreeExpansion</code> events.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
            <summary>
            Adds a listener for <code>TreeSelection</code> events.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)">
            <summary>
            Adds a listener for <code>TreeWillExpand</code> events.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.cancelEditing">
            <summary>
            Cancels the current editing session.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.clearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.clearToggledPaths">
            <summary>
            Clears the cache of toggled tree paths.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.collapsePath(javax.swing.tree.TreePath)">
            <summary>
            Ensures that the node identified by the specified path is
            collapsed and viewable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.collapseRow(System.Int32)">
            <summary>
            Ensures that the node in the specified row is collapsed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.convertValueToText(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Called by the renderers to convert the specified value to
            text.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.createTreeModel(System.Object)">
            <summary>
            Returns a <code>TreeModel</code> wrapping the specified object.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.createTreeModelListener">
            <summary>
            Creates and returns an instance of <code>TreeModelHandler</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.expandPath(javax.swing.tree.TreePath)">
            <summary>
            Ensures that the node identified by the specified path is
            expanded and viewable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.expandRow(System.Int32)">
            <summary>
            Ensures that the node in the specified row is expanded and
            viewable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.fireTreeCollapsed(javax.swing.tree.TreePath)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.fireTreeExpanded(javax.swing.tree.TreePath)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.fireTreeWillCollapse(javax.swing.tree.TreePath)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.fireTreeWillExpand(javax.swing.tree.TreePath)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.fireValueChanged(javax.swing.event.TreeSelectionEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JTree.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getAnchorSelectionPath">
            <summary>
            Returns the path identified as the anchor.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getCellEditor">
            <summary>
            Returns the editor used to edit entries in the tree.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getCellRenderer">
            <summary>
            Returns the current <code>TreeCellRenderer</code>
            that is rendering each cell.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getClosestPathForLocation(System.Int32,System.Int32)">
            <summary>
            Returns the path to the node that is closest to x,y.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getClosestRowForLocation(System.Int32,System.Int32)">
            <summary>
            Returns the row to the node that is closest to x,y.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getDefaultTreeModel">
            <summary>
            Creates and returns a sample <code>TreeModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getDescendantToggledPaths(javax.swing.tree.TreePath)">
            <summary>
            Returns an <code>Enumeration</code> of <code>TreePaths</code>
            that have been expanded that
            are descendants of <code>parent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getDragEnabled">
            <summary>
            Gets the value of the <code>dragEnabled</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getEditingPath">
            <summary>
            Returns the path to the element that is currently being edited.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getExpandedDescendants(javax.swing.tree.TreePath)">
            <summary>
            Returns an <code>Enumeration</code> of the descendants of the
            path <code>parent</code> that
            are currently expanded.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getExpandsSelectedPaths">
            <summary>
            Returns the <code>expandsSelectedPaths</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getInvokesStopCellEditing">
            <summary>
            Returns the indicator that tells what happens when editing is
            interrupted.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getLastSelectedPathComponent">
            <summary>
            Returns the last path component in the first node of the current
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getLeadSelectionPath">
            <summary>
            Returns the path identified as the lead.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getLeadSelectionRow">
            <summary>
            Returns the row index corresponding to the lead path.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getMaxSelectionRow">
            <summary>
            Returns the last selected row.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getMinSelectionRow">
            <summary>
            Gets the first selected row.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getModel">
            <summary>
            Returns the <code>TreeModel</code> that is providing the data.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getPathBetweenRows(System.Int32,System.Int32)">
            <summary>
            Returns <code>JTreePath</code> instances representing the path
            between index0 and index1 (including index1).
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getPathBounds(javax.swing.tree.TreePath)">
            <summary>
            Returns the <code>Rectangle</code> that the specified node will be drawn
            into.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getPathForLocation(System.Int32,System.Int32)">
            <summary>
            Returns the path for the node at the specified location.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getPathForRow(System.Int32)">
            <summary>
            Returns the path for the specified row.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getPreferredScrollableViewportSize">
            <summary>
            Returns the preferred display size of a <code>JTree</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getRowBounds(System.Int32)">
            <summary>
            Returns the <code>Rectangle</code> that the node at the specified row is
            drawn in.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getRowCount">
            <summary>
            Returns the number of rows that are currently being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getRowForLocation(System.Int32,System.Int32)">
            <summary>
            Returns the row for the specified location.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getRowForPath(javax.swing.tree.TreePath)">
            <summary>
            Returns the row that displays the node identified by the specified
            path.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getRowHeight">
            <summary>
            Returns the height of each row.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getScrollableBlockIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Returns the amount for a block increment, which is the height or
            width of <code>visibleRect</code>, based on <code>orientation</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getScrollableTracksViewportHeight">
            <summary>
            Returns false to indicate that the height of the viewport does not
            determine the height of the table, unless the preferred height
            of the tree is smaller than the viewports height.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getScrollableTracksViewportWidth">
            <summary>
            Returns false to indicate that the width of the viewport does not
            determine the width of the table, unless the preferred width of
            the tree is smaller than the viewports width.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getScrollableUnitIncrement(java.awt.Rectangle,System.Int32,System.Int32)">
            <summary>
            Returns the amount to increment when scrolling.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getScrollsOnExpand">
            <summary>
            Returns the value of the <code>scrollsOnExpand</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getSelectionCount">
            <summary>
            Returns the number of nodes selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getSelectionModel">
            <summary>
            Returns the model for selections.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getSelectionPath">
            <summary>
            Returns the path to the first selected node.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getSelectionPaths">
            <summary>
            Returns the paths of all selected values.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getSelectionRows">
            <summary>
            Returns all of the currently selected rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getShowsRootHandles">
            <summary>
            Returns the value of the <code>showsRootHandles</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getToggleClickCount">
            <summary>
            Returns the number of mouse clicks needed to expand or close a node.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getToolTipText(java.awt.event.MouseEvent)">
            <summary>
            Overrides <code>JComponent</code>'s <code>getToolTipText</code>
            method in order to allow
            renderer's tips to be used if it has text set.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getTreeExpansionListeners">
            <summary>
            Returns an array of all the <code>TreeExpansionListener</code>s added
            to this JTree with addTreeExpansionListener().
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getTreeSelectionListeners">
            <summary>
            Returns an array of all the <code>TreeSelectionListener</code>s added
            to this JTree with addTreeSelectionListener().
            </summary>
        </member>
        <member name="M:javax.swing.JTree.getTreeWillExpandListeners">
            <summary>
            Returns an array of all the <code>TreeWillExpandListener</code>s added
            to this JTree with addTreeWillExpandListener().
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTree.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTree.getUIClassID" -->
        <member name="M:javax.swing.JTree.getVisibleRowCount">
            <summary>
            Returns the number of rows that are displayed in the display area.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.hasBeenExpanded(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the node identified by the path has ever been
            expanded.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isCollapsed(System.Int32)">
            <summary>
            Returns true if the node at the specified display row is collapsed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isCollapsed(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the value identified by path is currently collapsed,
            this will return false if any of the values in path are currently
            not being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isEditable">
            <summary>
            Returns true if the tree is editable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isEditing">
            <summary>
            Returns true if the tree is being edited.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isExpanded(System.Int32)">
            <summary>
            Returns true if the node at the specified display row is currently
            expanded.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isExpanded(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the node identified by the path is currently expanded,
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isFixedRowHeight">
            <summary>
            Returns true if the height of each display row is a fixed size.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isLargeModel">
            <summary>
            Returns true if the tree is configured for a large model.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isPathEditable(javax.swing.tree.TreePath)">
            <summary>
            Returns <code>isEditable</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isPathSelected(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the item identified by the path is currently selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isRootVisible">
            <summary>
            Returns true if the root node of the tree is displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isRowSelected(System.Int32)">
            <summary>
            Returns true if the node identified by row is selected.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isSelectionEmpty">
            <summary>
            Returns true if the selection is currently empty.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.isVisible(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the value identified by path is currently viewable,
            which means it is either the root or all of its parents are expanded.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.makeVisible(javax.swing.tree.TreePath)">
            <summary>
            Ensures that the node identified by path is currently viewable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.paramString">
            <summary>
            Returns a string representation of this <code>JTree</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeDescendantSelectedPaths(javax.swing.tree.TreePath,System.Boolean)">
            <summary>
            Removes any paths in the selection that are descendants of
            <code>path</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeDescendantToggledPaths(java.util.Enumeration)">
            <summary>
            Removes any descendants of the <code>TreePaths</code> in
            <code>toRemove</code>
            that have been expanded.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Removes the nodes between index0 and index1, inclusive, from the
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Removes the node identified by the specified path from the current
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Removes the nodes identified by the specified paths from the
            current selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeSelectionRow(System.Int32)">
            <summary>
            Removes the row at the index <code>row</code> from the current
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeSelectionRows(System.Int32[])">
            <summary>
            Removes the rows that are selected at each of the specified
            rows.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeTreeExpansionListener(javax.swing.event.TreeExpansionListener)">
            <summary>
            Removes a listener for <code>TreeExpansion</code> events.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
            <summary>
            Removes a <code>TreeSelection</code> listener.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener)">
            <summary>
            Removes a listener for <code>TreeWillExpand</code> events.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.scrollPathToVisible(javax.swing.tree.TreePath)">
            <summary>
            Makes sure all the path components in path are expanded (except
            for the last path component) and scrolls so that the
            node identified by the path is displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.scrollRowToVisible(System.Int32)">
            <summary>
            Scrolls the item identified by row until it is displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setAnchorSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Sets the path identified as the anchor.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setCellEditor(javax.swing.tree.TreeCellEditor)">
            <summary>
            Sets the cell editor.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setCellRenderer(javax.swing.tree.TreeCellRenderer)">
            <summary>
            Sets the <code>TreeCellRenderer</code> that will be used to
            draw each cell.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setDragEnabled(System.Boolean)">
            <summary>
            Sets the <code>dragEnabled</code> property,
            which must be <code>true</code> to enable
            automatic drag handling (the first part of drag and drop)
            on this component.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setEditable(System.Boolean)">
            <summary>
            Determines whether the tree is editable.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setExpandedState(javax.swing.tree.TreePath,System.Boolean)">
            <summary>
            Sets the expanded state of this <code>JTree</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setExpandsSelectedPaths(System.Boolean)">
            <summary>
            Configures the <code>expandsSelectedPaths</code> property.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setInvokesStopCellEditing(System.Boolean)">
            <summary>
            Determines what happens when editing is interrupted by selecting
            another node in the tree, a change in the tree's data, or by some
            other means.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setLargeModel(System.Boolean)">
            <summary>
            Specifies whether the UI should use a large model.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setLeadSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Sets the path identifies as the lead.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setModel(javax.swing.tree.TreeModel)">
            <summary>
            Sets the <code>TreeModel</code> that will provide the data.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setRootVisible(System.Boolean)">
            <summary>
            Determines whether or not the root node from
            the <code>TreeModel</code> is visible.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setRowHeight(System.Int32)">
            <summary>
            Sets the height of each cell, in pixels.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setScrollsOnExpand(System.Boolean)">
            <summary>
            Sets the <code>scrollsOnExpand</code> property,
            which determines whether the
            tree might scroll to show previously hidden children.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Selects the nodes between index0 and index1, inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionModel(javax.swing.tree.TreeSelectionModel)">
            <summary>
            Sets the tree's selection model.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Selects the node identified by the specified path.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Selects the nodes identified by the specified array of paths.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionRow(System.Int32)">
            <summary>
            Selects the node at the specified row in the display.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setSelectionRows(System.Int32[])">
            <summary>
            Selects the nodes corresponding to each of the specified rows
            in the display.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setShowsRootHandles(System.Boolean)">
            <summary>
            Sets the value of the <code>showsRootHandles</code> property,
            which specifies whether the node handles should be displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.setToggleClickCount(System.Int32)">
            <summary>
            Sets the number of mouse clicks before a node will expand or close.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTree.setUI(javax.swing.plaf.TreeUI)" -->
        <member name="M:javax.swing.JTree.setVisibleRowCount(System.Int32)">
            <summary>
            Sets the number of rows that are to be displayed.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.startEditingAtPath(javax.swing.tree.TreePath)">
            <summary>
            Selects the node identified by the specified path and initiates
            editing.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.stopEditing">
            <summary>
            Ends the current editing session.
            </summary>
        </member>
        <member name="M:javax.swing.JTree.treeDidChange">
            <summary>
            Sent when the tree has changed enough that we need to resize
            the bounds, but not enough that we need to remove the
            expanded node set (e.g nodes were expanded or collapsed, or
            nodes were inserted into the tree).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JTree.updateUI" -->
        <member name="M:javax.swing.JViewport.#ctor">
            <summary>
            Creates a <code>JViewport</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a <code>ChangeListener</code> to the list that is
            notified each time the view's
            size, position, or the viewport's extent size has changed.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.addImpl(java.awt.Component,System.Object,System.Int32)">
            <summary>
            Sets the <code>JViewport</code>'s one lightweight child,
            which can be <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.computeBlit(System.Int32,System.Int32,java.awt.Point,java.awt.Point,java.awt.Dimension,java.awt.Rectangle)">
            <summary>
            Computes the parameters for a blit where the backing store image
            currently contains <code>oldLoc</code> in the upper left hand corner
            and we're scrolling to <code>newLoc</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.createLayoutManager">
            <summary>
            Subclassers can override this to install a different
            layout manager (or <code>null</code>) in the constructor.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.firePropertyChange(System.String,System.Object,System.Object)">
            <summary>
            Notifies listeners of a property change.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.fireStateChanged">
            <summary>
            Notifies all <code>ChangeListeners</code> when the views
            size, position, or the viewports extent size has changed.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JViewport.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getChangeListeners">
            <summary>
            Returns an array of all the <code>ChangeListener</code>s added
            to this JViewport with addChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getExtentSize">
            <summary>
            Returns the size of the visible part of the view in view coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getInsets">
            <summary>
            Returns the insets (border) dimensions as (0,0,0,0), since borders
            are not supported on a <code>JViewport</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getInsets(java.awt.Insets)">
            <summary>
            Returns an <code>Insets</code> object containing this
            <code>JViewport</code>s inset values.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getScrollMode">
            <summary>
            Returns the current scrolling mode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JViewport.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JViewport.getUIClassID" -->
        <member name="M:javax.swing.JViewport.getView">
            <summary>
            Returns the <code>JViewport</code>'s one child or <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getViewPosition">
            <summary>
            Returns the view coordinates that appear in the upper left
            hand corner of the viewport, or 0,0 if there's no view.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getViewRect">
            <summary>
            Returns a rectangle whose origin is <code>getViewPosition</code>
            and size is <code>getExtentSize</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.getViewSize">
            <summary>
            If the view's size hasn't been explicitly set, return the
            preferred size, otherwise return the view's current size.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.isBackingStoreEnabled">
            <summary>
            <B>Deprecated.</B> <I>As of Java 2 platform v1.3, replaced by
            <code>getScrollMode()</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.isOptimizedDrawingEnabled">
            <summary>
            The <code>JViewport</code> overrides the default implementation of
            this method (in <code>JComponent</code>) to return false.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.paint(java.awt.Graphics)">
            <summary>
            Depending on whether the <code>backingStore</code> is enabled,
            either paint the image through the backing store or paint
            just the recently exposed part, using the backing store
            to "blit" the remainder.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.paramString">
            <summary>
            Returns a string representation of this <code>JViewport</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.remove(java.awt.Component)">
            <summary>
            Removes the <code>Viewport</code>s one lightweight child.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a <code>ChangeListener</code> from the list that's notified each
            time the views size, position, or the viewports extent size
            has changed.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.repaint(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Always repaint in the parents coordinate system to make sure
            only one paint is performed by the <code>RepaintManager</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.reshape(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of this viewport.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.scrollRectToVisible(java.awt.Rectangle)">
            <summary>
            Scrolls the view so that <code>Rectangle</code>
            within the view becomes visible.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setBackingStoreEnabled(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>As of Java 2 platform v1.3, replaced by
            <code>setScrollMode()</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setBorder(javax.swing.border.Border)">
            <summary>
            The viewport "scrolls" its child (called the "view") by the
            normal parent/child clipping (typically the view is moved in
            the opposite direction of the scroll).
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setExtentSize(java.awt.Dimension)">
            <summary>
            Sets the size of the visible part of the view using view coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setScrollMode(System.Int32)">
            <summary>
            Used to control the method of scrolling the viewport contents.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.JViewport.setUI(javax.swing.plaf.ViewportUI)" -->
        <member name="M:javax.swing.JViewport.setView(java.awt.Component)">
            <summary>
            Sets the <code>JViewport</code>'s one lightweight child
            (<code>view</code>), which can be <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setViewPosition(java.awt.Point)">
            <summary>
            Sets the view coordinates that appear in the upper left
            hand corner of the viewport, does nothing if there's no view.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.setViewSize(java.awt.Dimension)">
            <summary>
            Sets the size of the view.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.toViewCoordinates(java.awt.Dimension)">
            <summary>
            Converts a size in pixel coordinates to view coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.toViewCoordinates(java.awt.Point)">
            <summary>
            Converts a point in pixel coordinates to view coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.JViewport.updateUI">
            <summary>
            Resets the UI property to a value from the current look and feel.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.#ctor">
            <summary>
            Constructs an <code>AWTKeyStroke</code> with default values.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.#ctor(System.Char,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs an <code>AWTKeyStroke</code> with the specified
            values.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.Equals(System.Object)">
            <summary>
            Returns true if this object is identical to the specified object.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStroke(System.Char)">
            <summary>
            Returns a shared instance of an <code>AWTKeyStroke</code>
            that represents a <code>KEY_TYPED</code> event for the
            specified character.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStroke(java.lang.Character,System.Int32)">
            <summary>
            Returns a shared instance of an <code>AWTKeyStroke</code>,
            given a Character object and a set of modifiers.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStroke(System.Int32,System.Int32)">
            <summary>
            Returns a shared instance of an <code>AWTKeyStroke</code>,
            given a numeric key code and a set of modifiers.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStroke(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a shared instance of an <code>AWTKeyStroke</code>,
            given a numeric key code and a set of modifiers, specifying
            whether the key is activated when it is pressed or released.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStroke(System.String)">
            <summary>
            Parses a string and returns an <code>AWTKeyStroke</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getAWTKeyStrokeForEvent(java.awt.event.KeyEvent)">
            <summary>
            Returns an <code>AWTKeyStroke</code> which represents the
            stroke which generated a given <code>KeyEvent</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getKeyChar">
            <summary>
            Returns the character for this <code>AWTKeyStroke</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getKeyCode">
            <summary>
            Returns the numeric key code for this <code>AWTKeyStroke</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getKeyEventType">
            <summary>
            Returns the type of <code>KeyEvent</code> which corresponds to
            this <code>AWTKeyStroke</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.getModifiers">
            <summary>
            Returns the modifier keys for this <code>AWTKeyStroke</code>.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.GetHashCode">
            <summary>
            Returns a numeric value for this object that is likely to be unique,
            making it a good choice as the index value in a hash table.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.isOnKeyRelease">
            <summary>
            Returns whether this <code>AWTKeyStroke</code> represents a key release.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.readResolve">
            <summary>
            Returns a cached instance of <code>AWTKeyStroke</code> (or a subclass of
            <code>AWTKeyStroke</code>) which is equal to this instance.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.registerSubclass(java.lang.Class)">
            <summary>
            Registers a new class which the factory methods in
            <code>AWTKeyStroke</code> will use when generating new
            instances of <code>AWTKeyStroke</code>s.
            </summary>
        </member>
        <member name="M:java.awt.AWTKeyStroke.ToString">
            <summary>
            Returns a string that displays and identifies this object's properties.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(System.Char)">
            <summary>
            Returns a shared instance of a <code>KeyStroke</code>
            that represents a <code>KEY_TYPED</code> event for the
            specified character.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(java.lang.Character,System.Int32)">
            <summary>
            Returns a shared instance of a KeyStroke, given a Character object and a
            set of modifiers.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(System.Char,System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>use getKeyStroke(char)</I>
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(System.Int32,System.Int32)">
            <summary>
            Returns a shared instance of a KeyStroke, given a numeric key code and a
            set of modifiers.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a shared instance of a KeyStroke, given a numeric key code and a
            set of modifiers, specifying whether the key is activated when it is
            pressed or released.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStroke(System.String)">
            <summary>
            Parses a string and returns a <code>KeyStroke</code>.
            </summary>
        </member>
        <member name="M:javax.swing.KeyStroke.getKeyStrokeForEvent(java.awt.event.KeyEvent)">
            <summary>
            Returns a KeyStroke which represents the stroke which generated a given
            KeyEvent.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)">
            <summary>
            Add a listener to the list that's notified each time a change
            to the selection occurs.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.addSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Change the selection to be the set union of the current selection
            and the indices between index0 and index1 inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.clearSelection">
            <summary>
            Change the selection to the empty set.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getAnchorSelectionIndex">
            <summary>
            Return the first index argument from the most recent call to
            setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getLeadSelectionIndex">
            <summary>
            Return the second index argument from the most recent call to
            setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getMaxSelectionIndex">
            <summary>
            Returns the last selected index or -1 if the selection is empty.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getMinSelectionIndex">
            <summary>
            Returns the first selected index or -1 if the selection is empty.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getSelectionMode">
            <summary>
            Returns the current selection mode.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.getValueIsAdjusting">
            <summary>
            Returns true if the value is undergoing a series of changes.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.insertIndexInterval(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert length indices beginning before/after index.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.isSelectedIndex(System.Int32)">
            <summary>
            Returns true if the specified index is selected.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.isSelectionEmpty">
            <summary>
            Returns true if no indices are selected.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.removeIndexInterval(System.Int32,System.Int32)">
            <summary>
            Remove the indices in the interval index0,index1 (inclusive) from
            the selection model.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener)">
            <summary>
            Remove a listener from the list that's notified each time a
            change to the selection occurs.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.removeSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Change the selection to be the set difference of the current selection
            and the indices between index0 and index1 inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.setAnchorSelectionIndex(System.Int32)">
            <summary>
            Set the anchor selection index.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.setLeadSelectionIndex(System.Int32)">
            <summary>
            Set the lead selection index.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.setSelectionInterval(System.Int32,System.Int32)">
            <summary>
            Change the selection to be between index0 and index1 inclusive.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.setSelectionMode(System.Int32)">
            <summary>
            Set the selection mode.
            </summary>
        </member>
        <member name="M:javax.swing.ListSelectionModel.setValueIsAdjusting(System.Boolean)">
            <summary>
            This property is true if upcoming changes to the value
            of the model should be considered a single event.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getDefaults">
            <summary>
            This method is called once by UIManager.setLookAndFeel to create
            the look and feel specific defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getDescription">
            <summary>
            Return a one line description of this look and feel implementation,
            e.g.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getDesktopPropertyValue(System.String,System.Object)">
            <summary>
            Returns the value of the specified system desktop property by
            invoking <code>Toolkit.getDefaultToolkit().getDesktopProperty()</code>.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getID">
            <summary>
            Return a string that identifies this look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getName">
            <summary>
            Return a short string that identifies this look and feel, e.g.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.getSupportsWindowDecorations">
            <summary>
            Returns true if the <code>LookAndFeel</code> returned
            <code>RootPaneUI</code> instances support providing Window decorations
            in a <code>JRootPane</code>.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.initialize">
            <summary>
            UIManager.setLookAndFeel calls this method before the first
            call (and typically the only call) to getDefaults().
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.installBorder(javax.swing.JComponent,System.String)">
            <summary>
            Convenience method for installing a component's default Border
            object on the specified component if either the border is
            currently null or already an instance of UIResource.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.installColors(javax.swing.JComponent,System.String,System.String)">
            <summary>
            Convenience method for initializing a component's foreground
            and background color properties with values from the current
            defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.installColorsAndFont(javax.swing.JComponent,System.String,System.String,System.String)">
            <summary>
            Convenience method for initializing a components foreground
            background and font properties with values from the current
            defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.isNativeLookAndFeel">
            <summary>
            If the underlying platform has a "native" look and feel, and this
            is an implementation of it, return true.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.isSupportedLookAndFeel">
            <summary>
            Return true if the underlying platform supports and or permits
            this look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.loadKeyBindings(javax.swing.InputMap,System.Object[])">
            <summary>
            Loads the bindings in <code>keys</code> into <code>retMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.makeComponentInputMap(javax.swing.JComponent,System.Object[])">
            <summary>
            Creates a ComponentInputMap from <code>keys</code>.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.makeIcon(java.lang.Class,System.String)">
            <summary>
            Utility method that creates a UIDefaults.LazyValue that creates
            an ImageIcon UIResource for the specified <code>gifFile</code>
            filename.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.makeInputMap(System.Object[])">
            <summary>
            Creates a InputMap from <code>keys</code>.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.provideErrorFeedback(java.awt.Component)">
            <summary>
            Invoked when the user attempts an invalid operation,
            such as pasting into an uneditable <code>JTextField</code>
            that has focus.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.ToString">
            <summary>
            Returns a string that displays and identifies this
            object's properties.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.uninitialize">
            <summary>
            UIManager.setLookAndFeel calls this method just before we're
            replaced by a new default look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.LookAndFeel.uninstallBorder(javax.swing.JComponent)">
            <summary>
            Convenience method for un-installing a component's default
            border on the specified component if the border is
            currently an instance of UIResource.
            </summary>
        </member>
        <member name="M:javax.swing.MenuElement.getComponent">
            <summary>
            This method should return the java.awt.Component used to paint the receiving element.
            </summary>
        </member>
        <member name="M:javax.swing.MenuElement.getSubElements">
            <summary>
            This method should return an array containing the sub-elements for the receiving menu element
            </summary>
        </member>
        <member name="M:javax.swing.MenuElement.menuSelectionChanged(System.Boolean)">
            <summary>
            Call by the MenuSelection when the MenuElement is added or remove from
            the menu selection.
            </summary>
        </member>
        <member name="M:javax.swing.MenuElement.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Process a key event.
            </summary>
        </member>
        <member name="M:javax.swing.MenuElement.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)">
            <summary>
            Process a mouse event.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a ChangeListener to the button.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.clearSelectedPath">
            <summary>
            Tell the menu selection to close and unselect all the menu components.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.componentForPoint(java.awt.Component,java.awt.Point)">
            <summary>
            Returns the component in the currently selected path
            which contains sourcePoint.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.defaultManager">
            <summary>
            Returns the default menu selection manager.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.fireStateChanged">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.getChangeListeners">
            <summary>
            Returns an array of all the <code>ChangeListener</code>s added
            to this MenuSelectionManager with addChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.getSelectedPath">
            <summary>
            Returns the path to the currently selected menu item
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.isComponentPartOfCurrentMenu(java.awt.Component)">
            <summary>
            Return true if c is part of the currently used menu
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.processKeyEvent(java.awt.event.KeyEvent)">
            <summary>
            When a MenuElement receives an event from a KeyListener, it should never process the event
            directly.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.processMouseEvent(java.awt.event.MouseEvent)">
            <summary>
            When a MenuElement receives an event from a MouseListener, it should never process the event
            directly.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a ChangeListener from the button.
            </summary>
        </member>
        <member name="M:javax.swing.MenuSelectionManager.setSelectedPath(javax.swing.MenuElement[])">
            <summary>
            Change the selection in the menu hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,System.Int32,System.Int32)">
            <summary>
            Returns <code>true</code> if the specified <i>x,y</i> location is
            contained within the look and feel's defined shape of the specified
            component.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.createUI(javax.swing.JComponent)">
            <summary>
            Returns an instance of the UI delegate for the specified component.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,System.Int32)">
            <summary>
            Returns the <code>i</code>th <code>Accessible</code> child of the object.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)">
            <summary>
            Returns the number of accessible children in the object.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)">
            <summary>
            Returns the specified component's maximum size appropriate for
            the look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.getMinimumSize(javax.swing.JComponent)">
            <summary>
            Returns the specified component's minimum size appropriate for
            the look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.getPreferredSize(javax.swing.JComponent)">
            <summary>
            Returns the specified component's preferred size appropriate for
            the look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent)">
            <summary>
            Configures the specified component appropriate for the look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.paint(java.awt.Graphics,javax.swing.JComponent)">
            <summary>
            Paints the specified component appropriate for the look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.uninstallUI(javax.swing.JComponent)">
            <summary>
            Reverses configuration which was done on the specified component during
            <code>installUI</code>.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ComponentUI.update(java.awt.Graphics,javax.swing.JComponent)">
            <summary>
            Notifies this UI delegate that it's time to paint the specified
            component.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ButtonUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.DesktopPaneUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.InternalFrameUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.LabelUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.MenuBarUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.MenuItemUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.OptionPaneUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.OptionPaneUI.containsCustomComponents(javax.swing.JOptionPane)">
            <summary>
            Returns true if the user has supplied instances of Component for
            either the options or message.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.OptionPaneUI.selectInitialValue(javax.swing.JOptionPane)">
            <summary>
            Requests the component representing the default value to have
            focus.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.PanelUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.PopupMenuUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.PopupMenuUI.getPopup(javax.swing.JPopupMenu,System.Int32,System.Int32)">
            <summary>
            Returns the <code>Popup</code> that will be responsible for
            displaying the <code>JPopupMenu</code>.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.PopupMenuUI.isPopupTrigger(java.awt.event.MouseEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.RootPaneUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ScrollBarUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ScrollPaneUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TableHeaderUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TableUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.damageRange(javax.swing.text.JTextComponent,System.Int32,System.Int32)">
            <summary>
            Causes the portion of the view responsible for the
            given part of the model to be repainted.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.getEditorKit(javax.swing.text.JTextComponent)">
            <summary>
            Fetches the binding of services that set a policy
            for the type of document being edited.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.getRootView(javax.swing.text.JTextComponent)">
            <summary>
            Fetches a View with the allocation of the associated
            text component (i.e.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.getToolTipText(javax.swing.text.JTextComponent,java.awt.Point)">
            <summary>
            Returns the string to be used as the tooltip at the passed in location.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.modelToView(javax.swing.text.JTextComponent,System.Int32)">
            <summary>
            Converts the given location in the model to a place in
            the view coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TextUI.viewToModel(javax.swing.text.JTextComponent,java.awt.Point)">
            <summary>
            Converts the given place in the view coordinate system
            to the nearest representative location in the model.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ToolTipUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.cancelEditing(javax.swing.JTree)">
            <summary>
            Cancels the current editing session.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getClosestPathForLocation(javax.swing.JTree,System.Int32,System.Int32)">
            <summary>
            Returns the path to the node that is closest to x,y.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getEditingPath(javax.swing.JTree)">
            <summary>
            Returns the path to the element that is being edited.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getPathBounds(javax.swing.JTree,javax.swing.tree.TreePath)">
            <summary>
            Returns the Rectangle enclosing the label portion that the
            last item in path will be drawn into.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getPathForRow(javax.swing.JTree,System.Int32)">
            <summary>
            Returns the path for passed in row.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getRowCount(javax.swing.JTree)">
            <summary>
            Returns the number of rows that are being displayed.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.getRowForPath(javax.swing.JTree,javax.swing.tree.TreePath)">
            <summary>
            Returns the row that the last item identified in path is visible
            at.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.isEditing(javax.swing.JTree)">
            <summary>
            Returns true if the tree is being edited.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.startEditingAtPath(javax.swing.JTree,javax.swing.tree.TreePath)">
            <summary>
            Selects the last item in path and tries to edit it.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.TreeUI.stopEditing(javax.swing.JTree)">
            <summary>
            Stops the current editing session.
            </summary>
        </member>
        <member name="M:javax.swing.plaf.ViewportUI.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.Popup.#ctor">
            <summary>
            Creates a <code>Popup</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Popup.#ctor(java.awt.Component,java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Creates a <code>Popup</code> for the Component <code>owner</code>
            containing the Component <code>contents</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Popup.hide">
            <summary>
            Hides and disposes of the <code>Popup</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Popup.show">
            <summary>
            Makes the <code>Popup</code> visible.
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds <I>listener</I> as a listener to changes in the model.
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.clearSelection">
            <summary>
            Clears the selection (to -1).
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.getSelectedIndex">
            <summary>
            Returns the model's selection.
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.isSelected">
            <summary>
            Returns true if the selection model currently has a selected value.
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes <I>listener</I> as a listener to changes in the model.
            </summary>
        </member>
        <member name="M:javax.swing.SingleSelectionModel.setSelectedIndex(System.Int32)">
            <summary>
            Sets the model's selected index to <I>index</I>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.calculateInnerArea(javax.swing.JComponent,java.awt.Rectangle)">
            <summary>
            Stores the position and size of
            the inner painting area of the specified component
            in <code>r</code> and returns <code>r</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.computeDifference(java.awt.Rectangle,java.awt.Rectangle)">
            <summary>
            Convenience returning an array of rect representing the regions within
            <code>rectA</code> that do not overlap with <code>rectB</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.computeIntersection(System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Rectangle)">
            <summary>
            Convenience to calculate the intersection of two rectangles
            without allocating a new rectangle.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.computeStringWidth(java.awt.FontMetrics,System.String)">
            <summary>
            Compute the width of the string using a font with the specified
            "metrics" (sizes).
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.computeUnion(System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Rectangle)">
            <summary>
            Convenience method that calculates the union of two rectangles
            without allocating a new rectangle.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertMouseEvent(java.awt.Component,java.awt.event.MouseEvent,java.awt.Component)">
            <summary>
            Returns a MouseEvent similar to <code>sourceEvent</code> except that its x
            and y members have been converted to <code>destination</code>'s coordinate
            system.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertPoint(java.awt.Component,System.Int32,System.Int32,java.awt.Component)">
            <summary>
            Convert the point <code>(x,y)</code> in <code>source</code> coordinate system to
            <code>destination</code> coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertPoint(java.awt.Component,java.awt.Point,java.awt.Component)">
            <summary>
            Convert a <code>aPoint</code> in <code>source</code> coordinate system to
            <code>destination</code> coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertPointFromScreen(java.awt.Point,java.awt.Component)">
            <summary>
            Convert a point from a screen coordinates to a component's
            coordinate system
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertPointToScreen(java.awt.Point,java.awt.Component)">
            <summary>
            Convert a point from a component's coordinate system to
            screen coordinates.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.convertRectangle(java.awt.Component,java.awt.Rectangle,java.awt.Component)">
            <summary>
            Convert the rectangle <code>aRectangle</code> in <code>source</code> coordinate system to
            <code>destination</code> coordinate system.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.findFocusOwner(java.awt.Component)">
            <summary>
            <B>Deprecated.</B> <I>As of 1.4, replaced by
            <code>KeyboardFocusManager.getFocusOwner()</code>.</I>
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAccessibleAt(java.awt.Component,java.awt.Point)">
            <summary>
            Returns the <code>Accessible</code> child contained at the
            local coordinate <code>Point</code>, if one exists.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAccessibleChild(java.awt.Component,System.Int32)">
            <summary>
            Return the nth Accessible child of the object.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAccessibleChildrenCount(java.awt.Component)">
            <summary>
            Returns the number of accessible children in the object.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAccessibleIndexInParent(java.awt.Component)">
            <summary>
            Get the index of this object in its accessible parent.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAccessibleStateSet(java.awt.Component)">
            <summary>
            Get the state of this object.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAncestorNamed(System.String,java.awt.Component)">
            <summary>
            Convenience method for searching above <code>comp</code> in the
            component hierarchy and returns the first object of <code>name</code> it
            finds.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getAncestorOfClass(java.lang.Class,java.awt.Component)">
            <summary>
            Convenience method for searching above <code>comp</code> in the
            component hierarchy and returns the first object of class <code>c</code> it
            finds.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getDeepestComponentAt(java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Returns the deepest visible descendent Component of <code>parent</code>
            that contains the location <code>x</code>, <code>y</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getLocalBounds(java.awt.Component)">
            <summary>
            Return the rectangle (0,0,bounds.width,bounds.height) for the component <code>aComponent</code>
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getRoot(java.awt.Component)">
            <summary>
            Returns the root component for the current component tree.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getRootPane(java.awt.Component)">
            <summary>
            If c is a JRootPane descendant return its JRootPane ancestor.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getUIActionMap(javax.swing.JComponent)">
            <summary>
            Returns the ActionMap provided by the UI
            in component <code>component</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getUIInputMap(javax.swing.JComponent,System.Int32)">
            <summary>
            Returns the InputMap provided by the UI for condition
            <code>condition</code> in component <code>component</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.getWindowAncestor(java.awt.Component)">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)">
            <summary>
            Causes <i>doRun.run()</i> to be executed synchronously on the
            AWT event dispatching thread.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)">
            <summary>
            Causes <i>doRun.run()</i> to be executed asynchronously on the
            AWT event dispatching thread.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isDescendingFrom(java.awt.Component,java.awt.Component)">
            <summary>
            Return <code>true</code> if a component <code>a</code> descends from a component <code>b</code>
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isEventDispatchThread">
            <summary>
            Returns true if the current thread is an AWT event dispatching thread.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isLeftMouseButton(java.awt.event.MouseEvent)">
            <summary>
            Returns true if the mouse event specifies the left mouse button.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isMiddleMouseButton(java.awt.event.MouseEvent)">
            <summary>
            Returns true if the mouse event specifies the middle mouse button.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isRectangleContainingRectangle(java.awt.Rectangle,java.awt.Rectangle)">
            <summary>
            Return true if <code>a</code> contains <code>b</code>
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.isRightMouseButton(java.awt.event.MouseEvent)">
            <summary>
            Returns true if the mouse event specifies the right mouse button.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.layoutCompoundLabel(java.awt.FontMetrics,System.String,javax.swing.Icon,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,System.Int32)">
            <summary>
            Compute and return the location of the icons origin, the
            location of origin of the text baseline, and a possibly clipped
            version of the compound labels string.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,System.String,javax.swing.Icon,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,System.Int32)">
            <summary>
            Compute and return the location of the icons origin, the
            location of origin of the text baseline, and a possibly clipped
            version of the compound labels string.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.notifyAction(javax.swing.Action,javax.swing.KeyStroke,java.awt.event.KeyEvent,System.Object,System.Int32)">
            <summary>
            Invokes <code>actionPerformed</code> on <code>action</code> if
            <code>action</code> is enabled (and non null).
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paints a component <code>c</code> on an arbitrary graphics
            <code>g</code> in the
            specified rectangle, specifying the rectangle's upper left corner
            and size.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.paintComponent(java.awt.Graphics,java.awt.Component,java.awt.Container,java.awt.Rectangle)">
            <summary>
            Paints a component <code>c</code> on an arbitrary graphics
            <code>g</code> in the specified rectangle, specifying a Rectangle object.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.processKeyBindings(java.awt.event.KeyEvent)">
            <summary>
            Process the key bindings for the <code>Component</code> associated with
            <code>event</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)">
            <summary>
            Convenience method to change the UI ActionMap for <code>component</code>
            to <code>uiActionMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,System.Int32,javax.swing.InputMap)">
            <summary>
            Convenience method to change the UI InputMap for <code>component</code>
            to <code>uiInputMap</code>.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)">
            <summary>
            A simple minded look and feel change: ask each node in the tree
            to <code>updateUI()</code> -- that is, to initialize its UI property
            with the current look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.SwingUtilities.windowForComponent(java.awt.Component)">
            <summary>
            Return <code>aComponent</code>'s window
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.#ctor">
            <summary>
            Constructs a <code>JTableHeader</code> with a default
            <code>TableColumnModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.#ctor(javax.swing.table.TableColumnModel)">
            <summary>
            Constructs a <code>JTableHeader</code> which is initialized with
            <code>cm</code> as the column model.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnAdded(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is added to the table column model.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnAtPoint(java.awt.Point)">
            <summary>
            Returns the index of the column that <code>point</code> lies in, or -1 if it
            lies out of bounds.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnMarginChanged(javax.swing.event.ChangeEvent)">
            <summary>
            Invoked when a column is moved due to a margin change.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnMoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is repositioned.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnRemoved(javax.swing.event.TableColumnModelEvent)">
            <summary>
            Invoked when a column is removed from the table column model.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.columnSelectionChanged(javax.swing.event.ListSelectionEvent)">
            <summary>
            Invoked when the selection model of the <code>TableColumnModel</code>
            is changed.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.createDefaultColumnModel">
            <summary>
            Returns the default column model object which is
            a <code>DefaultTableColumnModel</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.createDefaultRenderer">
            <summary>
            Returns a default renderer to be used when no header renderer
            is defined by a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this JTableHeader.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getColumnModel">
            <summary>
            Returns the <code>TableColumnModel</code> that contains all column information
            of this table header.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getDefaultRenderer">
            <summary>
            Returns the default renderer used when no <code>headerRenderer</code>
            is defined by a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getDraggedColumn">
            <summary>
            Returns the the dragged column, if and only if, a drag is in
            process, otherwise returns <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getDraggedDistance">
            <summary>
            Returns the column's horizontal distance from its original
            position, if and only if, a drag is in process.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getHeaderRect(System.Int32)">
            <summary>
            Returns the rectangle containing the header tile at <code>column</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getReorderingAllowed">
            <summary>
            Returns true if the user is allowed to rearrange columns by
            dragging their headers, false otherwise.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getResizingAllowed">
            <summary>
            Returns true if the user is allowed to resize columns by dragging
            between their headers, false otherwise.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getResizingColumn">
            <summary>
            Returns the resizing column.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getTable">
            <summary>
            Returns the table associated with this header.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.getToolTipText(java.awt.event.MouseEvent)">
            <summary>
            Allows the renderer's tips to be used if there is text set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.table.JTableHeader.getUI" -->
        <!-- Badly formed XML comment ignored for member "M:javax.swing.table.JTableHeader.getUIClassID" -->
        <member name="M:javax.swing.table.JTableHeader.getUpdateTableInRealTime">
            <summary>
            Obsolete as of Java 2 platform v1.3.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.initializeLocalVars">
            <summary>
            Initializes the local variables and properties with default values.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.paramString">
            <summary>
            Returns a string representation of this <code>JTableHeader</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.resizeAndRepaint">
            <summary>
            Sizes the header and marks it as needing display.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setColumnModel(javax.swing.table.TableColumnModel)">
            <summary>
            Sets the column model for this table to <code>newModel</code> and registers
            for listener notifications from the new column model.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setDefaultRenderer(javax.swing.table.TableCellRenderer)">
            <summary>
            Sets the default renderer to be used when no <code>headerRenderer</code>
            is defined by a <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setDraggedColumn(javax.swing.table.TableColumn)">
            <summary>
            Sets the header's <code>draggedColumn</code> to <code>aColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setDraggedDistance(System.Int32)">
            <summary>
            Sets the header's <code>draggedDistance</code> to <code>distance</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setReorderingAllowed(System.Boolean)">
            <summary>
            Sets whether the user can drag column headers to reorder columns.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setResizingAllowed(System.Boolean)">
            <summary>
            Sets whether the user can resize columns by dragging between headers.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setResizingColumn(javax.swing.table.TableColumn)">
            <summary>
            Sets the header's <code>resizingColumn</code> to <code>aColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.JTableHeader.setTable(javax.swing.JTable)">
            <summary>
            Sets the table associated with this header.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.table.JTableHeader.setUI(javax.swing.plaf.TableHeaderUI)" -->
        <member name="M:javax.swing.table.JTableHeader.setUpdateTableInRealTime(System.Boolean)">
            <summary>
            Obsolete as of Java 2 platform v1.3.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.table.JTableHeader.updateUI" -->
        <member name="M:javax.swing.table.TableCellEditor.getTableCellEditorComponent(javax.swing.JTable,System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets an initial <code>value</code> for the editor.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,System.Object,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Returns the component used for drawing the cell.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.#ctor">
            <summary>
            Cover method, using a default model index of 0,
            default width of 75, a <code>null</code> renderer and a
            <code>null</code> editor.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.#ctor(System.Int32)">
            <summary>
            Cover method, using a default width of 75, a <code>null</code>
            renderer and a <code>null</code> editor.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.#ctor(System.Int32,System.Int32)">
            <summary>
            Cover method, using a <code>null</code> renderer and a
            <code>null</code> editor.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.#ctor(System.Int32,System.Int32,javax.swing.table.TableCellRenderer,javax.swing.table.TableCellEditor)">
            <summary>
            Creates and initializes an instance of
            <code>TableColumn</code> with <code>modelIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChangeListener</code> to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.createDefaultHeaderRenderer">
            <summary>
            As of Java 2 platform v1.3, this method is not called by the <code>TableColumn</code>
            constructor.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.disableResizedPosting">
            <summary>
            <B>Deprecated.</B> <I>as of Java 2 platform v1.3</I>
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.enableResizedPosting">
            <summary>
            <B>Deprecated.</B> <I>as of Java 2 platform v1.3</I>
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getCellEditor">
            <summary>
            Returns the <code>TableCellEditor</code> used by the
            <code>JTable</code> to edit values for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getCellRenderer">
            <summary>
            Returns the <code>TableCellRenderer</code> used by the
            <code>JTable</code> to draw
            values for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getHeaderRenderer">
            <summary>
            Returns the <code>TableCellRenderer</code> used to draw the header of the
            <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getHeaderValue">
            <summary>
            Returns the <code>Object</code> used as the value for the header
            renderer.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getIdentifier">
            <summary>
            Returns the <code>identifier</code> object for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getMaxWidth">
            <summary>
            Returns the maximum width for the <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getMinWidth">
            <summary>
            Returns the minimum width for the <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getModelIndex">
            <summary>
            Returns the model index for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getPreferredWidth">
            <summary>
            Returns the preferred width of the <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getPropertyChangeListeners">
            <summary>
            Returns an array of all the <code>PropertyChangeListener</code>s added
            to this TableColumn with addPropertyChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getResizable">
            <summary>
            Returns true if the user is allowed to resize the
            <code>TableColumn</code>'s
            width, false otherwise.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.getWidth">
            <summary>
            Returns the width of the <code>TableColumn</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChangeListener</code> from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setCellEditor(javax.swing.table.TableCellEditor)">
            <summary>
            Sets the editor to used by when a cell in this column is edited.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer)">
            <summary>
            Sets the <code>TableCellRenderer</code> used by <code>JTable</code>
            to draw individual values for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setHeaderRenderer(javax.swing.table.TableCellRenderer)">
            <summary>
            Sets the <code>TableCellRenderer</code> used to draw the
            <code>TableColumn</code>'s header to <code>headerRenderer</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setHeaderValue(System.Object)">
            <summary>
            Sets the <code>Object</code> whose string representation will be
            used as the value for the <code>headerRenderer</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setIdentifier(System.Object)">
            <summary>
            Sets the <code>TableColumn</code>'s identifier to
            <code>anIdentifier</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setMaxWidth(System.Int32)">
            <summary>
            Sets the <code>TableColumn</code>'s maximum width to
            <code>maxWidth</code>; also adjusts the width and preferred
            width if they are greater than this value.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setMinWidth(System.Int32)">
            <summary>
            Sets the <code>TableColumn</code>'s minimum width to
            <code>minWidth</code>; also adjusts the current width
            and preferred width if they are less than this value.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setModelIndex(System.Int32)">
            <summary>
            Sets the model index for this column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setPreferredWidth(System.Int32)">
            <summary>
            Sets this column's preferred width to <code>preferredWidth</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setResizable(System.Boolean)">
            <summary>
            Sets whether this column can be resized.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.setWidth(System.Int32)">
            <summary>
            This method should not be used to set the widths of columns in the
            <code>JTable</code>, use <code>setPreferredWidth</code> instead.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumn.sizeWidthToFit">
            <summary>
            Resizes the <code>TableColumn</code> to fit the width of its header cell.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.addColumn(javax.swing.table.TableColumn)">
            <summary>
            Appends <code>aColumn</code> to the end of the
            <code>tableColumns</code> array.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.addColumnModelListener(javax.swing.event.TableColumnModelListener)">
            <summary>
            Adds a listener for table column model events.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumn(System.Int32)">
            <summary>
            Returns the <code>TableColumn</code> object for the column at
            <code>columnIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumnCount">
            <summary>
            Returns the number of columns in the model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumnIndex(System.Object)">
            <summary>
            Returns the index of the first column in the table
            whose identifier is equal to <code>identifier</code>,
            when compared using <code>equals</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumnIndexAtX(System.Int32)">
            <summary>
            Returns the index of the column that lies on the
            horizontal point, <code>xPosition</code>;
            or -1 if it lies outside the any of the column's bounds.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumnMargin">
            <summary>
            Returns the width between the cells in each column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumns">
            <summary>
            Returns an <code>Enumeration</code> of all the columns in the model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getColumnSelectionAllowed">
            <summary>
            Returns true if columns may be selected.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getSelectedColumnCount">
            <summary>
            Returns the number of selected columns.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getSelectedColumns">
            <summary>
            Returns an array of indicies of all selected columns.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getSelectionModel">
            <summary>
            Returns the current selection model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.getTotalColumnWidth">
            <summary>
            Returns the total width of all the columns.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.moveColumn(System.Int32,System.Int32)">
            <summary>
            Moves the column and its header at <code>columnIndex</code> to
            <code>newIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.removeColumn(javax.swing.table.TableColumn)">
            <summary>
            Deletes the <code>TableColumn</code> <code>column</code> from the
            <code>tableColumns</code> array.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.removeColumnModelListener(javax.swing.event.TableColumnModelListener)">
            <summary>
            Removes a listener for table column model events.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.setColumnMargin(System.Int32)">
            <summary>
            Sets the <code>TableColumn</code>'s column margin to
            <code>newMargin</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.setColumnSelectionAllowed(System.Boolean)">
            <summary>
            Sets whether the columns in this model may be selected.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableColumnModel.setSelectionModel(javax.swing.ListSelectionModel)">
            <summary>
            Sets the selection model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.addTableModelListener(javax.swing.event.TableModelListener)">
            <summary>
            Adds a listener to the list that is notified each time a change
            to the data model occurs.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.getColumnClass(System.Int32)">
            <summary>
            Returns the most specific superclass for all the cell values
            in the column.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.getColumnCount">
            <summary>
            Returns the number of columns in the model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.getColumnName(System.Int32)">
            <summary>
            Returns the name of the column at <code>columnIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.getRowCount">
            <summary>
            Returns the number of rows in the model.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.getValueAt(System.Int32,System.Int32)">
            <summary>
            Returns the value for the cell at <code>columnIndex</code> and
            <code>rowIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.isCellEditable(System.Int32,System.Int32)">
            <summary>
            Returns true if the cell at <code>rowIndex</code> and
            <code>columnIndex</code>
            is editable.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.removeTableModelListener(javax.swing.event.TableModelListener)">
            <summary>
            Removes a listener from the list that is notified each time a
            change to the data model occurs.
            </summary>
        </member>
        <member name="M:javax.swing.table.TableModel.setValueAt(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the value in the cell at <code>columnIndex</code> and
            <code>rowIndex</code> to <code>aValue</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.containsAttribute(System.Object,System.Object)">
            <summary>
            Returns true if this set contains this attribute with an equal value.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.containsAttributes(javax.swing.text.AttributeSet)">
            <summary>
            Returns true if this set contains all the attributes with equal values.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.copyAttributes">
            <summary>
            Returns an attribute set that is guaranteed not
            to change over time.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.getAttribute(System.Object)">
            <summary>
            Fetches the value of the given attribute.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.getAttributeCount">
            <summary>
            Returns the number of attributes contained in this set.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.getAttributeNames">
            <summary>
            Returns an enumeration over the names of the attributes in the set.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.getResolveParent">
            <summary>
            Gets the resolving parent.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.isDefined(System.Object)">
            <summary>
            Checks whether the named attribute has a value specified in
            the set without resolving through another attribute
            set.
            </summary>
        </member>
        <member name="M:javax.swing.text.AttributeSet.isEqual(javax.swing.text.AttributeSet)">
            <summary>
            Determines if the two attribute sets are equivalent.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.addChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Adds a listener to track whenever the caret position
            has been changed.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.deinstall(javax.swing.text.JTextComponent)">
            <summary>
            Called when the UI is being removed from the
            interface of a JTextComponent.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.getBlinkRate">
            <summary>
            Gets the blink rate of the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.getDot">
            <summary>
            Fetches the current position of the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.getMagicCaretPosition">
            <summary>
            Gets the current caret visual location.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.getMark">
            <summary>
            Fetches the current position of the mark.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.install(javax.swing.text.JTextComponent)">
            <summary>
            Called when the UI is being installed into the
            interface of a JTextComponent.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.isSelectionVisible">
            <summary>
            Determines if the selection is currently visible.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.isVisible">
            <summary>
            Determines if the caret is currently visible.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.moveDot(System.Int32)">
            <summary>
            Moves the caret position (dot) to some other position,
            leaving behind the mark.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.paint(java.awt.Graphics)">
            <summary>
            Renders the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.removeChangeListener(javax.swing.event.ChangeListener)">
            <summary>
            Removes a listener that was tracking caret position changes.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.setBlinkRate(System.Int32)">
            <summary>
            Sets the blink rate of the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.setDot(System.Int32)">
            <summary>
            Sets the caret position to some position.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.setMagicCaretPosition(java.awt.Point)">
            <summary>
            Set the current caret visual location.
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.setSelectionVisible(System.Boolean)">
            <summary>
            Sets the visibility of the selection
            </summary>
        </member>
        <member name="M:javax.swing.text.Caret.setVisible(System.Boolean)">
            <summary>
            Sets the visibility of the caret.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.addDocumentListener(javax.swing.event.DocumentListener)">
            <summary>
            Registers the given observer to begin receiving notifications
            when changes are made to the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.addUndoableEditListener(javax.swing.event.UndoableEditListener)">
            <summary>
            Registers the given observer to begin receiving notifications
            when undoable edits are made to the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.createPosition(System.Int32)">
            <summary>
            This method allows an application to mark a place in
            a sequence of character content.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getDefaultRootElement">
            <summary>
            Returns the root element that views should be based upon,
            unless some other mechanism for assigning views to element
            structures is provided.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getEndPosition">
            <summary>
            Returns a position that represents the end of the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getLength">
            <summary>
            Returns number of characters of content currently
            in the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getProperty(System.Object)">
            <summary>
            Gets the properties associated with the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getRootElements">
            <summary>
            Returns all of the root elements that are defined.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getStartPosition">
            <summary>
            Returns a position that represents the start of the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getText(System.Int32,System.Int32)">
            <summary>
            Fetches the text contained within the given portion
            of the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.getText(System.Int32,System.Int32,javax.swing.text.Segment)">
            <summary>
            Fetches the text contained within the given portion
            of the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.insertString(System.Int32,System.String,javax.swing.text.AttributeSet)">
            <summary>
            Inserts a string of content.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.putProperty(System.Object,System.Object)">
            <summary>
            Associates a property with the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.remove(System.Int32,System.Int32)">
            <summary>
            Removes a portion of the content of the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.removeDocumentListener(javax.swing.event.DocumentListener)">
            <summary>
            Unregisters the given observer from the notification list
            so it will no longer receive change updates.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.removeUndoableEditListener(javax.swing.event.UndoableEditListener)">
            <summary>
            Unregisters the given observer from the notification list
            so it will no longer receive updates.
            </summary>
        </member>
        <member name="M:javax.swing.text.Document.render(java.lang.Runnable)">
            <summary>
            This allows the model to be safely rendered in the presence
            of currency, if the model supports being updated asynchronously.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.#ctor">
            <summary>
            Construct an EditorKit.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.clone">
            <summary>
            Creates a copy of the editor kit.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.createCaret">
            <summary>
            Fetches a caret that can navigate through views
            produced by the associated ViewFactory.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.createDefaultDocument">
            <summary>
            Creates an uninitialized text storage model
            that is appropriate for this type of editor.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.deinstall(javax.swing.JEditorPane)">
            <summary>
            Called when the kit is being removed from the
            JEditorPane.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.getContentType">
            <summary>
            Gets the MIME type of the data that this
            kit represents support for.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.getViewFactory">
            <summary>
            Fetches a factory that is suitable for producing
            views of any models that are produced by this
            kit.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.install(javax.swing.JEditorPane)">
            <summary>
            Called when the kit is being installed into the
            a JEditorPane.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.read(java.io.InputStream,javax.swing.text.Document,System.Int32)">
            <summary>
            Inserts content from the given stream which is expected
            to be in a format appropriate for this kind of content
            handler.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.read(java.io.Reader,javax.swing.text.Document,System.Int32)">
            <summary>
            Inserts content from the given stream which is expected
            to be in a format appropriate for this kind of content
            handler.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.write(java.io.OutputStream,javax.swing.text.Document,System.Int32,System.Int32)">
            <summary>
            Writes content from a document to the given stream
            in a format appropriate for this kind of content handler.
            </summary>
        </member>
        <member name="M:javax.swing.text.EditorKit.write(java.io.Writer,javax.swing.text.Document,System.Int32,System.Int32)">
            <summary>
            Writes content from a document to the given stream
            in a format appropriate for this kind of content handler.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getAttributes">
            <summary>
            Fetches the collection of attributes this element contains.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getDocument">
            <summary>
            Fetches the document associated with this element.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getElement(System.Int32)">
            <summary>
            Fetches the child element at the given index.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getElementCount">
            <summary>
            Gets the number of child elements contained by this element.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getElementIndex(System.Int32)">
            <summary>
            Gets the child element index closest to the given offset.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getEndOffset">
            <summary>
            Fetches the offset from the beginning of the document
            that this element ends at.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getName">
            <summary>
            Fetches the name of the element.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getParentElement">
            <summary>
            Fetches the parent element.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.getStartOffset">
            <summary>
            Fetches the offset from the beginning of the document
            that this element begins at.
            </summary>
        </member>
        <member name="M:javax.swing.text.Element.isLeaf">
            <summary>
            Is this element a leaf element? An element that
            <i>may</i> have children, even if it currently
            has no children, would return <code>false</code>.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.changeHighlight(System.Object,System.Int32,System.Int32)">
            <summary>
            Changes the given highlight to span a different portion of
            the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.deinstall(javax.swing.text.JTextComponent)">
            <summary>
            Called when the UI is being removed from the
            interface of a JTextComponent.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.install(javax.swing.text.JTextComponent)">
            <summary>
            Called when the UI is being installed into the
            interface of a JTextComponent.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.paint(java.awt.Graphics)">
            <summary>
            Renders the highlights.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.removeAllHighlights">
            <summary>
            Removes all highlights this highlighter is responsible for.
            </summary>
        </member>
        <member name="M:javax.swing.text.Highlighter.removeHighlight(System.Object)">
            <summary>
            Removes a highlight from the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.addActionForKeyStroke(javax.swing.KeyStroke,javax.swing.Action)">
            <summary>
            Adds a binding to the keymap.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getAction(javax.swing.KeyStroke)">
            <summary>
            Fetches the action appropriate for the given symbolic
            event sequence.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getBoundActions">
            <summary>
            Fetches all of the actions defined in this keymap.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getBoundKeyStrokes">
            <summary>
            Fetches all of the keystrokes in this map that
            are bound to some action.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getDefaultAction">
            <summary>
            Fetches the default action to fire if a
            key is typed (i.e.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getKeyStrokesForAction(javax.swing.Action)">
            <summary>
            Fetches the keystrokes that will result in
            the given action.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getName">
            <summary>
            Fetches the name of the set of key-bindings.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.getResolveParent">
            <summary>
            Fetches the parent keymap used to resolve key-bindings.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.isLocallyDefined(javax.swing.KeyStroke)">
            <summary>
            Determines if the given key sequence is locally defined.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.removeBindings">
            <summary>
            Removes all bindings from the keymap.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.removeKeyStrokeBinding(javax.swing.KeyStroke)">
            <summary>
            Removes a binding from the keymap.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.setDefaultAction(javax.swing.Action)">
            <summary>
            Set the default action to fire if a key is typed.
            </summary>
        </member>
        <member name="M:javax.swing.text.Keymap.setResolveParent(javax.swing.text.Keymap)">
            <summary>
            Sets the parent keymap, which will be used to
            resolve key-bindings.
            </summary>
        </member>
        <member name="M:javax.swing.text.NavigationFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.text.Position.getOffset">
            <summary>
            Fetches the current offset within the document.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.#ctor">
            <summary>
            Creates a new segment.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Creates a new segment referring to an existing array.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.clone">
            <summary>
            Creates a shallow copy.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.current">
            <summary>
            Gets the character at the current position (as returned by getIndex()).
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.first">
            <summary>
            Sets the position to getBeginIndex() and returns the character at that
            position.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.getBeginIndex">
            <summary>
            Returns the start index of the text.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.getEndIndex">
            <summary>
            Returns the end index of the text.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.getIndex">
            <summary>
            Returns the current index.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.isPartialReturn">
            <summary>
            Flag to indicate that partial returns are valid.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.last">
            <summary>
            Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
            and returns the character at that position.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.next">
            <summary>
            Increments the iterator's index by one and returns the character
            at the new index.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.previous">
            <summary>
            Decrements the iterator's index by one and returns the character
            at the new index.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.setIndex(System.Int32)">
            <summary>
            Sets the position to the specified position in the text and returns that
            character.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.setPartialReturn(System.Boolean)">
            <summary>
            Flag to indicate that partial returns are valid.
            </summary>
        </member>
        <member name="M:javax.swing.text.Segment.ToString">
            <summary>
            Converts a segment into a String.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.#ctor(javax.swing.text.Element)">
            <summary>
            Creates a new <code>View</code> object.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.append(javax.swing.text.View)">
            <summary>
            Appends a single child view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.breakView(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Tries to break this view on the given axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.changedUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)">
            <summary>
            Gives notification from the document that attributes were changed
            in a location that this view is responsible for.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.createFragment(System.Int32,System.Int32)">
            <summary>
            Creates a view that represents a portion of the element.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.forwardUpdateToView(javax.swing.text.View,javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)">
            <summary>
            Forwards the <code>DocumentEvent</code> to the give child view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getAlignment(System.Int32)">
            <summary>
            Determines the desired alignment for this view along an
            axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getAttributes">
            <summary>
            Fetches the attributes to use when rendering.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getBreakWeight(System.Int32,System.Single,System.Single)">
            <summary>
            Determines how attractive a break opportunity in
            this view is.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getChildAllocation(System.Int32,java.awt.Shape)">
            <summary>
            Fetches the allocation for the given child view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getContainer">
            <summary>
            Fetches the container hosting the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getDocument">
            <summary>
            Fetches the model associated with the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getElement">
            <summary>
            Fetches the structural portion of the subject that this
            view is mapped to.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getEndOffset">
            <summary>
            Fetches the portion of the model for which this view is
            responsible.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getGraphics">
            <summary>
            Fetch a <code>Graphics</code> for rendering.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getMaximumSpan(System.Int32)">
            <summary>
            Determines the maximum span for this view along an
            axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getMinimumSpan(System.Int32)">
            <summary>
            Determines the minimum span for this view along an
            axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getParent">
            <summary>
            Returns the parent of the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getPreferredSpan(System.Int32)">
            <summary>
            Determines the preferred span for this view along an
            axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getResizeWeight(System.Int32)">
            <summary>
            Determines the resizability of the view along the
            given axis.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getStartOffset">
            <summary>
            Fetches the portion of the model for which this view is
            responsible.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getToolTipText(System.Single,System.Single,java.awt.Shape)">
            <summary>
            Returns the tooltip text at the specified location.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getView(System.Int32)">
            <summary>
            Gets the <i>n</i>th child view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getViewCount">
            <summary>
            Returns the number of views in this view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getViewFactory">
            <summary>
            Fetches the <code>ViewFactory</code> implementation that is feeding
            the view hierarchy.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.getViewIndex(System.Single,System.Single,java.awt.Shape)">
            <summary>
            Returns the child view index representing the given position in
            the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.insert(System.Int32,javax.swing.text.View)">
            <summary>
            Inserts a single child view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.insertUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)">
            <summary>
            Gives notification that something was inserted into
            the document in a location that this view is responsible for.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.isVisible">
            <summary>
            Returns a boolean that indicates whether
            the view is visible or not.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.modelToView(System.Int32,java.awt.Shape)">
            <summary>
            <B>Deprecated.</B> <I></I>
            </summary>
        </member>
        <member name="M:javax.swing.text.View.paint(java.awt.Graphics,java.awt.Shape)">
            <summary>
            Renders using the given rendering surface and area on that
            surface.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.preferenceChanged(javax.swing.text.View,System.Boolean,System.Boolean)">
            <summary>
            Child views can call this on the parent to indicate that
            the preference has changed and should be reconsidered
            for layout.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.remove(System.Int32)">
            <summary>
            Removes one of the children at the given position.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.removeAll">
            <summary>
            Removes all of the children.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.removeUpdate(javax.swing.event.DocumentEvent,java.awt.Shape,javax.swing.text.ViewFactory)">
            <summary>
            Gives notification that something was removed from the document
            in a location that this view is responsible for.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.replace(System.Int32,System.Int32,javax.swing.text.View[])">
            <summary>
            Replaces child views.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.setParent(javax.swing.text.View)">
            <summary>
            Establishes the parent view for this view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.setSize(System.Single,System.Single)">
            <summary>
            Sets the size of the view.
            </summary>
        </member>
        <member name="M:javax.swing.text.View.viewToModel(System.Single,System.Single,java.awt.Shape)">
            <summary>
            <B>Deprecated.</B> <I></I>
            </summary>
        </member>
        <member name="M:javax.swing.text.ViewFactory.create(javax.swing.text.Element)">
            <summary>
            Creates a view from the given structural element of a
            document.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.#ctor(System.Int32,java.awt.event.ActionListener)">
            <summary>
            Creates a <code>Timer</code> that will notify its listeners every
            <code>delay</code> milliseconds.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.addActionListener(java.awt.event.ActionListener)">
            <summary>
            Adds an action listener to the <code>Timer</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.fireActionPerformed(java.awt.event.ActionEvent)">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.getActionListeners">
            <summary>
            Returns an array of all the action listeners registered
            on this timer.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.getDelay">
            <summary>
            Returns the delay, in milliseconds,
            between firings of action events.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.getInitialDelay">
            <summary>
            Returns the <code>Timer</code>'s initial delay.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered as
            <code><em>Foo</em>Listener</code>s
            upon this <code>Timer</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.getLogTimers">
            <summary>
            Returns <code>true</code> if logging is enabled.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.isCoalesce">
            <summary>
            Returns <code>true</code> if the <code>Timer</code> coalesces
            multiple pending action events.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.isRepeats">
            <summary>
            Returns <code>true</code> (the default)
            if the <code>Timer</code> will send
            an action event
            to its listeners multiple times.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.isRunning">
            <summary>
            Returns <code>true</code> if the <code>Timer</code> is running.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.removeActionListener(java.awt.event.ActionListener)">
            <summary>
            Removes the specified action listener from the <code>Timer</code>.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.restart">
            <summary>
            Restarts the <code>Timer</code>,
            canceling any pending firings and causing
            it to fire with its initial delay.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.setCoalesce(System.Boolean)">
            <summary>
            Sets whether the <code>Timer</code> coalesces multiple pending
            <code>ActionEvent</code> firings.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.setDelay(System.Int32)">
            <summary>
            Sets the <code>Timer</code>'s delay, the number of milliseconds
            between successive action events.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.setInitialDelay(System.Int32)">
            <summary>
            Sets the <code>Timer</code>'s initial delay,
            which by default is the same as the between-event delay.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.setLogTimers(System.Boolean)">
            <summary>
            Enables or disables the timer log.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.setRepeats(System.Boolean)">
            <summary>
            If <code>flag</code> is <code>false</code>,
            instructs the <code>Timer</code> to send only one
            action event to its listeners.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.start">
            <summary>
            Starts the <code>Timer</code>,
            causing it to start sending action events
            to its listeners.
            </summary>
        </member>
        <member name="M:javax.swing.Timer.stop">
            <summary>
            Stops the <code>Timer</code>,
            causing it to stop sending action events
            to its listeners.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.#ctor">
            <summary>
            Convenience constructor for subclasses.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.#ctor(System.String)">
            <summary>
            Constructs a transfer handler that can transfer a Java Bean property
            from one component to another via the clipboard or a drag and drop
            operation.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.canImport(javax.swing.JComponent,java.awt.datatransfer.DataFlavor[])">
            <summary>
            Indicates whether a component would accept an import of the given
            set of data flavors prior to actually attempting to import it.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.createTransferable(javax.swing.JComponent)">
            <summary>
            Creates a <code>Transferable</code> to use as the source for
            a data transfer.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.exportAsDrag(javax.swing.JComponent,java.awt.event.InputEvent,System.Int32)">
            <summary>
            Causes the Swing drag support to be initiated.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,System.Int32)">
            <summary>
            Invoked after data has been exported.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.exportToClipboard(javax.swing.JComponent,java.awt.datatransfer.Clipboard,System.Int32)">
            <summary>
            Causes a transfer from the given component to the
            given clipboard.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.getCopyAction">
            <summary>
            Returns an <code>Action</code> that behaves like a 'copy' operation.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.getCutAction">
            <summary>
            Returns an <code>Action</code> that behaves like a 'cut' operation.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.getPasteAction">
            <summary>
            Returns an <code>Action</code> that behaves like a 'paste' operation.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.getSourceActions(javax.swing.JComponent)">
            <summary>
            Returns the type of transfer actions supported by the source.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.getVisualRepresentation(java.awt.datatransfer.Transferable)">
            <summary>
            Returns an object that establishes the look of a transfer.
            </summary>
        </member>
        <member name="M:javax.swing.TransferHandler.importData(javax.swing.JComponent,java.awt.datatransfer.Transferable)">
            <summary>
            Causes a transfer to a component from a clipboard or a
            DND drop operation.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.children">
            <summary>
            Returns the children of the receiver as an <code>Enumeration</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.getAllowsChildren">
            <summary>
            Returns true if the receiver allows children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.getChildAt(System.Int32)">
            <summary>
            Returns the child <code>TreeNode</code> at index
            <code>childIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.getChildCount">
            <summary>
            Returns the number of children <code>TreeNode</code>s the receiver
            contains.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.getIndex(javax.swing.tree.TreeNode)">
            <summary>
            Returns the index of <code>node</code> in the receivers children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.getParent">
            <summary>
            Returns the parent <code>TreeNode</code> of the receiver.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeNode.isLeaf">
            <summary>
            Returns true if the receiver is a leaf.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.insert(javax.swing.tree.MutableTreeNode,System.Int32)">
            <summary>
            Adds <code>child</code> to the receiver at <code>index</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.remove(System.Int32)">
            <summary>
            Removes the child at <code>index</code> from the receiver.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.remove(javax.swing.tree.MutableTreeNode)">
            <summary>
            Removes <code>node</code> from the receiver.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.removeFromParent">
            <summary>
            Removes the receiver from its parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.setParent(javax.swing.tree.MutableTreeNode)">
            <summary>
            Sets the parent of the receiver to <code>newParent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.MutableTreeNode.setUserObject(System.Object)">
            <summary>
            Resets the user object of the receiver to <code>object</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.#ctor">
            <summary>
            Creates a tree node that has no parent and no children, but which
            allows children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.#ctor(System.Object)">
            <summary>
            Creates a tree node with no parent, no children, but which allows
            children, and initializes it with the specified user object.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a tree node with no parent, no children, initialized with
            the specified user object, and that allows children only if
            specified.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.add(javax.swing.tree.MutableTreeNode)">
            <summary>
            Removes <code>newChild</code> from its parent and makes it a child of
            this node by adding it to the end of this node's child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration">
            <summary>
            Creates and returns an enumeration that traverses the subtree rooted at
            this node in breadth-first order.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.children">
            <summary>
            Creates and returns a forward-order enumeration of this node's
            children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.clone">
            <summary>
            Overridden to make clone public.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration">
            <summary>
            Creates and returns an enumeration that traverses the subtree rooted at
            this node in depth-first order.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren">
            <summary>
            Returns true if this node is allowed to have children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getChildAfter(javax.swing.tree.TreeNode)">
            <summary>
            Returns the child in this node's child array that immediately
            follows <code>aChild</code>, which must be a child of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getChildAt(System.Int32)">
            <summary>
            Returns the child at the specified index in this node's child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getChildBefore(javax.swing.tree.TreeNode)">
            <summary>
            Returns the child in this node's child array that immediately
            precedes <code>aChild</code>, which must be a child of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getChildCount">
            <summary>
            Returns the number of children of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getDepth">
            <summary>
            Returns the depth of the tree rooted at this node -- the longest
            distance from this node to a leaf.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getFirstChild">
            <summary>
            Returns this node's first child.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf">
            <summary>
            Finds and returns the first leaf that is a descendant of this node --
            either this node or its first child's first leaf.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getIndex(javax.swing.tree.TreeNode)">
            <summary>
            Returns the index of the specified child in this node's child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getLastChild">
            <summary>
            Returns this node's last child.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getLastLeaf">
            <summary>
            Finds and returns the last leaf that is a descendant of this node --
            either this node or its last child's last leaf.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getLeafCount">
            <summary>
            Returns the total number of leaves that are descendants of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getLevel">
            <summary>
            Returns the number of levels above this node -- the distance from
            the root to this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getNextLeaf">
            <summary>
            Returns the leaf after this node or null if this node is the
            last leaf in the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getNextNode">
            <summary>
            Returns the node that follows this node in a preorder traversal of this
            node's tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getNextSibling">
            <summary>
            Returns the next sibling of this node in the parent's children array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getParent">
            <summary>
            Returns this node's parent or null if this node has no parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getPath">
            <summary>
            Returns the path from the root, to get to this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(javax.swing.tree.TreeNode,System.Int32)">
            <summary>
            Builds the parents of node up to and including the root node,
            where the original node is the last element in the returned array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf">
            <summary>
            Returns the leaf before this node or null if this node is the
            first leaf in the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getPreviousNode">
            <summary>
            Returns the node that precedes this node in a preorder traversal of
            this node's tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling">
            <summary>
            Returns the previous sibling of this node in the parent's children
            array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getRoot">
            <summary>
            Returns the root of the tree that contains this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)">
            <summary>
            Returns the nearest common ancestor to this node and <code>aNode</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getSiblingCount">
            <summary>
            Returns the number of siblings of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getUserObject">
            <summary>
            Returns this node's user object.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath">
            <summary>
            Returns the user object path, from the root, to get to this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.insert(javax.swing.tree.MutableTreeNode,System.Int32)">
            <summary>
            Removes <code>newChild</code> from its present parent (if it has a
            parent), sets the child's parent to this node, and then adds the child
            to this node's child array at index <code>childIndex</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isLeaf">
            <summary>
            Returns true if this node has no children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isNodeAncestor(javax.swing.tree.TreeNode)">
            <summary>
            Returns true if <code>anotherNode</code> is an ancestor of this node
            -- if it is this node, this node's parent, or an ancestor of this
            node's parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isNodeChild(javax.swing.tree.TreeNode)">
            <summary>
            Returns true if <code>aNode</code> is a child of this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)">
            <summary>
            Returns true if <code>anotherNode</code> is a descendant of this node
            -- if it is this node, one of this node's children, or a descendant of
            one of this node's children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isNodeRelated(javax.swing.tree.DefaultMutableTreeNode)">
            <summary>
            Returns true if and only if <code>aNode</code> is in the same tree
            as this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isNodeSibling(javax.swing.tree.TreeNode)">
            <summary>
            Returns true if <code>anotherNode</code> is a sibling of (has the
            same parent as) this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.isRoot">
            <summary>
            Returns true if this node is the root of the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(javax.swing.tree.TreeNode)">
            <summary>
            Creates and returns an enumeration that follows the path from
            <code>ancestor</code> to this node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration">
            <summary>
            Creates and returns an enumeration that traverses the subtree rooted at
            this node in postorder.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration">
            <summary>
            Creates and returns an enumeration that traverses the subtree rooted at
            this node in preorder.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.remove(System.Int32)">
            <summary>
            Removes the child at the specified index from this node's children
            and sets that node's parent to null.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.remove(javax.swing.tree.MutableTreeNode)">
            <summary>
            Removes <code>aChild</code> from this node's child array, giving it a
            null parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.removeAllChildren">
            <summary>
            Removes all of this node's children, setting their parents to null.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.removeFromParent">
            <summary>
            Removes the subtree rooted at this node from the tree, giving this
            node a null parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(System.Boolean)">
            <summary>
            Determines whether or not this node is allowed to have children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.setParent(javax.swing.tree.MutableTreeNode)">
            <summary>
            Sets this node's parent to <code>newParent</code> but does not
            change the parent's child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.setUserObject(System.Object)">
            <summary>
            Sets the user object for this node to <code>userObject</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultMutableTreeNode.ToString">
            <summary>
            Returns the result of sending <code>toString()</code> to this node's
            user object, or null if this node has no user object.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the value of the current tree cell to <code>value</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.#ctor">
            <summary>
            Returns a new instance of DefaultTreeCellRenderer.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Boolean,System.Boolean)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.SByte,System.SByte)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Char,System.Char)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Double,System.Double)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Single,System.Single)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Int32,System.Int32)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Int64,System.Int64)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Object,System.Object)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(System.String,System.Int16,System.Int16)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor">
            <summary>
            Returns the background color to be used for non selected nodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor">
            <summary>
            Returns the color to use for the background if node is selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor">
            <summary>
            Returns the color the border is drawn.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon">
            <summary>
            Returns the icon used to represent non-leaf nodes that are not
            expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon">
            <summary>
            Returns the default icon, for the current laf, that is used to
            represent non-leaf nodes that are not expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon">
            <summary>
            Returns the default icon, for the current laf, that is used to
            represent leaf nodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon">
            <summary>
            Returns the default icon, for the current laf, that is used to
            represent non-leaf nodes that are expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getFont">
            <summary>
            Gets the font of this component.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon">
            <summary>
            Returns the icon used to represent leaf nodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon">
            <summary>
            Returns the icon used to represent non-leaf nodes that are expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize">
            <summary>
            Overrides <code>JComponent.getPreferredSize</code> to
            return slightly wider preferred size value.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor">
            <summary>
            Returns the color the text is drawn with when the node isn't selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor">
            <summary>
            Returns the color the text is drawn with when the node is selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Configures the renderer based on the passed in components.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.paint(java.awt.Graphics)">
            <summary>
            Paints the value.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.repaint(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.repaint(java.awt.Rectangle)">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.revalidate">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setBackground(java.awt.Color)">
            <summary>
            Subclassed to map <code>ColorUIResource</code>s to null.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(java.awt.Color)">
            <summary>
            Sets the background color to be used for non selected nodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(java.awt.Color)">
            <summary>
            Sets the color to use for the background if node is selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(java.awt.Color)">
            <summary>
            Sets the color to use for the border.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)">
            <summary>
            Sets the icon used to represent non-leaf nodes that are not expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font)">
            <summary>
            Subclassed to map <code>FontUIResource</code>s to null.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)">
            <summary>
            Sets the icon used to represent leaf nodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)">
            <summary>
            Sets the icon used to represent non-leaf nodes that are expanded.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(java.awt.Color)">
            <summary>
            Sets the color the text is drawn with when the node isn't selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(java.awt.Color)">
            <summary>
            Sets the color the text is drawn with when the node is selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeCellRenderer.validate">
            <summary>
            Overridden for performance reasons.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.addTreeModelListener(javax.swing.event.TreeModelListener)">
            <summary>
            Adds a listener for the <code>TreeModelEvent</code>
            posted after the tree changes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.getChild(System.Object,System.Int32)">
            <summary>
            Returns the child of <code>parent</code> at index <code>index</code>
            in the parent's
            child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.getChildCount(System.Object)">
            <summary>
            Returns the number of children of <code>parent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.getIndexOfChild(System.Object,System.Object)">
            <summary>
            Returns the index of child in parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.getRoot">
            <summary>
            Returns the root of the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.isLeaf(System.Object)">
            <summary>
            Returns <code>true</code> if <code>node</code> is a leaf.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener)">
            <summary>
            Removes a listener previously added with
            <code>addTreeModelListener</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeModel.valueForPathChanged(javax.swing.tree.TreePath,System.Object)">
            <summary>
            Messaged when the user has altered the value for the item identified
            by <code>path</code> to <code>newValue</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.#ctor(javax.swing.tree.TreeNode)">
            <summary>
            Creates a tree in which any node can have children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.#ctor(javax.swing.tree.TreeNode,System.Boolean)">
            <summary>
            Creates a tree specifying whether any node can have children,
            or whether only certain nodes can have children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.addTreeModelListener(javax.swing.event.TreeModelListener)">
            <summary>
            Adds a listener for the TreeModelEvent posted after the tree changes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.asksAllowsChildren">
            <summary>
            Tells how leaf nodes are determined.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.fireTreeNodesChanged(System.Object,System.Object[],System.Int32[],System.Object[])">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.fireTreeNodesInserted(System.Object,System.Object[],System.Int32[],System.Object[])">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.fireTreeNodesRemoved(System.Object,System.Object[],System.Int32[],System.Object[])">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.fireTreeStructureChanged(System.Object,System.Object[],System.Int32[],System.Object[])">
            <summary>
            Notifies all listeners that have registered interest for
            notification on this event type.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getChild(System.Object,System.Int32)">
            <summary>
            Returns the child of <I>parent</I> at index <I>index</I> in the parent's
            child array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getChildCount(System.Object)">
            <summary>
            Returns the number of children of <I>parent</I>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getIndexOfChild(System.Object,System.Object)">
            <summary>
            Returns the index of child in parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this model.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode)">
            <summary>
            Builds the parents of node up to and including the root node,
            where the original node is the last element in the returned array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getPathToRoot(javax.swing.tree.TreeNode,System.Int32)">
            <summary>
            Builds the parents of node up to and including the root node,
            where the original node is the last element in the returned array.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getRoot">
            <summary>
            Returns the root of the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.getTreeModelListeners">
            <summary>
            Returns an array of all the tree model listeners
            registered on this model.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.insertNodeInto(javax.swing.tree.MutableTreeNode,javax.swing.tree.MutableTreeNode,System.Int32)">
            <summary>
            Invoked this to insert newChild at location index in parents children.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.isLeaf(System.Object)">
            <summary>
            Returns whether the specified node is a leaf node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.nodeChanged(javax.swing.tree.TreeNode)">
            <summary>
            Invoke this method after you've changed how node is to be
            represented in the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.nodesChanged(javax.swing.tree.TreeNode,System.Int32[])">
            <summary>
            Invoke this method after you've changed how the children identified by
            childIndicies are to be represented in the tree.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.nodeStructureChanged(javax.swing.tree.TreeNode)">
            <summary>
            Invoke this method if you've totally changed the children of
            node and its childrens children...
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.nodesWereInserted(javax.swing.tree.TreeNode,System.Int32[])">
            <summary>
            Invoke this method after you've inserted some TreeNodes into
            node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.nodesWereRemoved(javax.swing.tree.TreeNode,System.Int32[],System.Object[])">
            <summary>
            Invoke this method after you've removed some TreeNodes from
            node.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.reload">
            <summary>
            Invoke this method if you've modified the TreeNodes upon which this
            model depends.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.reload(javax.swing.tree.TreeNode)">
            <summary>
            Invoke this method if you've modified the TreeNodes upon which this
            model depends.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.removeNodeFromParent(javax.swing.tree.MutableTreeNode)">
            <summary>
            Message this to remove node from its parent.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.removeTreeModelListener(javax.swing.event.TreeModelListener)">
            <summary>
            Removes a listener previously added with <B>addTreeModelListener()</B>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.setAsksAllowsChildren(System.Boolean)">
            <summary>
            Sets whether or not to test leafness by asking getAllowsChildren()
            or isLeaf() to the TreeNodes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.setRoot(javax.swing.tree.TreeNode)">
            <summary>
            Sets the root to <code>root</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.DefaultTreeModel.valueForPathChanged(javax.swing.tree.TreePath,System.Object)">
            <summary>
            This sets the user object of the TreeNode identified by path
            and posts a node changed.
            </summary>
        </member>
        <member name="M:javax.swing.tree.RowMapper.getRowsForPaths(javax.swing.tree.TreePath[])">
            <summary>
            Returns the rows that the TreePath instances in <code>path</code>
            are being displayed at.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeCellEditor.getTreeCellEditorComponent(javax.swing.JTree,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Sets an initial <I>value</I> for the editor.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.#ctor">
            <summary>
            Primarily provided for subclasses
            that represent paths in a different manner.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.#ctor(System.Object)">
            <summary>
            Constructs a TreePath containing only a single element.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.#ctor(System.Object[])">
            <summary>
            Constructs a path from an array of Objects, uniquely identifying
            the path from the root of the tree to a specific node, as returned
            by the tree's data model.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.#ctor(System.Object[],System.Int32)">
            <summary>
            Constructs a new TreePath with the identified path components of
            length <code>length</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.#ctor(javax.swing.tree.TreePath,System.Object)">
            <summary>
            Constructs a new TreePath, which is the path identified by
            <code>parent</code> ending in <code>lastElement</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.Equals(System.Object)">
            <summary>
            Tests two TreePaths for equality by checking each element of the
            paths for equality.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.getLastPathComponent">
            <summary>
            Returns the last component of this path.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.getParentPath">
            <summary>
            Returns a path containing all the elements of this object, except
            the last path component.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.getPath">
            <summary>
            Returns an ordered array of Objects containing the components of this
            TreePath.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.getPathComponent(System.Int32)">
            <summary>
            Returns the path component at the specified index.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.getPathCount">
            <summary>
            Returns the number of elements in the path.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.GetHashCode">
            <summary>
            Returns the hashCode for the object.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.isDescendant(javax.swing.tree.TreePath)">
            <summary>
            Returns true if <code>aTreePath</code> is a
            descendant of this
            TreePath.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.pathByAddingChild(System.Object)">
            <summary>
            Returns a new path containing all the elements of this object
            plus <code>child</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreePath.ToString">
            <summary>
            Returns a string that displays and identifies this
            object's properties.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a PropertyChangeListener to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.addSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Adds path to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.addSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Adds paths to the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.addTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
            <summary>
            Adds x to the list of listeners that are notified each time the
            set of selected TreePaths changes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.clearSelection">
            <summary>
            Empties the current selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getLeadSelectionPath">
            <summary>
            Returns the last path that was added.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getLeadSelectionRow">
            <summary>
            Returns the lead selection index.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getMaxSelectionRow">
            <summary>
            Returns the largest value obtained from the RowMapper for the
            current set of selected TreePaths.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getMinSelectionRow">
            <summary>
            Returns the smallest value obtained from the RowMapper for the
            current set of selected TreePaths.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getRowMapper">
            <summary>
            Returns the RowMapper instance that is able to map a TreePath to a
            row.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getSelectionCount">
            <summary>
            Returns the number of paths that are selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getSelectionMode">
            <summary>
            Returns the current selection mode, one of
            <code>SINGLE_TREE_SELECTION</code>,
            <code>CONTIGUOUS_TREE_SELECTION</code> or
            <code>DISCONTIGUOUS_TREE_SELECTION</code>.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getSelectionPath">
            <summary>
            Returns the first path in the selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getSelectionPaths">
            <summary>
            Returns the paths in the selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.getSelectionRows">
            <summary>
            Returns all of the currently selected rows.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.isPathSelected(javax.swing.tree.TreePath)">
            <summary>
            Returns true if the path, <code>path</code>, is in the current
            selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.isRowSelected(System.Int32)">
            <summary>
            Returns true if the row identified by <code>row</code> is selected.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.isSelectionEmpty">
            <summary>
            Returns true if the selection is currently empty.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a PropertyChangeListener from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.removeSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Removes path from the selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.removeSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Removes paths from the selection.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)">
            <summary>
            Removes x from the list of listeners that are notified each time
            the set of selected TreePaths changes.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.resetRowSelection">
            <summary>
            Updates this object's mapping from TreePaths to rows.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.setRowMapper(javax.swing.tree.RowMapper)">
            <summary>
            Sets the RowMapper instance.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.setSelectionMode(System.Int32)">
            <summary>
            Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
            CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.setSelectionPath(javax.swing.tree.TreePath)">
            <summary>
            Sets the selection to path.
            </summary>
        </member>
        <member name="M:javax.swing.tree.TreeSelectionModel.setSelectionPaths(javax.swing.tree.TreePath[])">
            <summary>
            Sets the selection to path.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.elements">
            <summary>
            Returns an enumeration of the values in this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.get(System.Object)">
            <summary>
            Returns the value to which the key is mapped in this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.isEmpty">
            <summary>
            Tests if this dictionary maps no keys to value.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.keys">
            <summary>
            Returns an enumeration of the keys in this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.put(System.Object,System.Object)">
            <summary>
            Maps the specified <code>key</code> to the specified
            <code>value</code> in this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.remove(System.Object)">
            <summary>
            Removes the <code>key</code> (and its corresponding
            <code>value</code>) from this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Dictionary.size">
            <summary>
            Returns the number of entries (dinstint keys) in this dictionary.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.#ctor">
            <summary>
            Constructs a new, empty hashtable with a default initial capacity (11)
            and load factor, which is <tt>0.75</tt>.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.#ctor(System.Int32)">
            <summary>
            Constructs a new, empty hashtable with the specified initial capacity
            and default load factor, which is <tt>0.75</tt>.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs a new, empty hashtable with the specified initial
            capacity and the specified load factor.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.#ctor(java.util.Map)">
            <summary>
            Constructs a new hashtable with the same mappings as the given
            Map.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.clear">
            <summary>
            Clears this hashtable so that it contains no keys.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.clone">
            <summary>
            Creates a shallow copy of this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.contains(System.Object)">
            <summary>
            Tests if some key maps into the specified value in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.containsKey(System.Object)">
            <summary>
            Tests if the specified object is a key in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.containsValue(System.Object)">
            <summary>
            Returns true if this Hashtable maps one or more keys to this value.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.elements">
            <summary>
            Returns an enumeration of the values in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.entrySet">
            <summary>
            Returns a Set view of the entries contained in this Hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.Equals(System.Object)">
            <summary>
            Compares the specified Object with this Map for equality,
            as per the definition in the Map interface.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.get(System.Object)">
            <summary>
            Returns the value to which the specified key is mapped in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.GetHashCode">
            <summary>
            Returns the hash code value for this Map as per the definition in the
            Map interface.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.isEmpty">
            <summary>
            Tests if this hashtable maps no keys to values.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.keys">
            <summary>
            Returns an enumeration of the keys in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.keySet">
            <summary>
            Returns a Set view of the keys contained in this Hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.put(System.Object,System.Object)">
            <summary>
            Maps the specified <code>key</code> to the specified
            <code>value</code> in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.putAll(java.util.Map)">
            <summary>
            Copies all of the mappings from the specified Map to this Hashtable
            These mappings will replace any mappings that this Hashtable had for any
            of the keys currently in the specified Map.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.rehash">
            <summary>
            Increases the capacity of and internally reorganizes this
            hashtable, in order to accommodate and access its entries more
            efficiently.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.remove(System.Object)">
            <summary>
            Removes the key (and its corresponding value) from this
            hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.size">
            <summary>
            Returns the number of keys in this hashtable.
            </summary>
        </member>
        <member name="M:java.util.Hashtable.ToString">
            <summary>
            Returns a string representation of this <tt>Hashtable</tt> object
            in the form of a set of entries, enclosed in braces and separated
            by the ASCII characters "<tt>, </tt>" (comma and space).
            </summary>
        </member>
        <member name="M:java.util.Hashtable.values">
            <summary>
            Returns a Collection view of the values contained in this Hashtable.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.#ctor">
            <summary>
            Create an empty defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.#ctor(System.Object[])">
            <summary>
            Create a defaults table initialized with the specified
            key/value pairs.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChangeListener</code> to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.addResourceBundle(System.String)">
            <summary>
            Adds a resource bundle to the list of resource bundles that are
            searched for localized values.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.firePropertyChange(System.String,System.Object,System.Object)">
            <summary>
            Support for reporting bound property changes.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.get(System.Object)">
            <summary>
            Returns the value for key.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.get(System.Object,java.util.Locale)">
            <summary>
            Returns the value for key associated with the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getBoolean(System.Object)">
            <summary>
            If the value of <code>key</code> is boolean, return the
            boolean value, otherwise return false.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getBoolean(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is boolean, return the boolean value, otherwise return false.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getBorder(System.Object)">
            <summary>
            If the value of <code>key</code> is a <code>Border</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getBorder(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is a <code>Border</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getColor(System.Object)">
            <summary>
            If the value of <code>key</code> is a <code>Color</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getColor(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is a <code>Color</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getDefaultLocale">
            <summary>
            Returns the default locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getDimension(System.Object)">
            <summary>
            If the value of <code>key</code> is a <code>Dimension</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getDimension(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is a <code>Dimension</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getFont(System.Object)">
            <summary>
            If the value of <code>key</code> is a <code>Font</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getFont(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is a <code>Font</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getIcon(System.Object)">
            <summary>
            If the value of <code>key</code> is an <code>Icon</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getIcon(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is an <code>Icon</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getInsets(System.Object)">
            <summary>
            If the value of <code>key</code> is an <code>Insets</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getInsets(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is an <code>Insets</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getInt(System.Object)">
            <summary>
            If the value of <code>key</code> is an <code>Integer</code> return its
            integer value, otherwise return 0.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getInt(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is an <code>Integer</code> return its integer value, otherwise return 0.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getPropertyChangeListeners">
            <summary>
            Returns an array of all the <code>PropertyChangeListener</code>s added
            to this UIDefaults with addPropertyChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getString(System.Object)">
            <summary>
            If the value of <code>key</code> is a <code>String</code> return it,
            otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getString(System.Object,java.util.Locale)">
            <summary>
            If the value of <code>key</code> for the given <code>Locale</code>
            is a <code>String</code> return it, otherwise return <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getUI(javax.swing.JComponent)">
            <summary>
            Creates an <code>ComponentUI</code> implementation for the
            specified component.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.UIDefaults.getUIClass(System.String)" -->
        <member name="M:javax.swing.UIDefaults.getUIClass(System.String,java.lang.ClassLoader)">
            <summary>
            The value of <code>get(uidClassID)</code> must be the
            <code>String</code> name of a
            class that implements the corresponding <code>ComponentUI</code>
            class.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.getUIError(System.String)">
            <summary>
            If <code>getUI()</code> fails for any reason,
            it calls this method before returning <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.put(System.Object,System.Object)">
            <summary>
            Sets the value of <code>key</code> to <code>value</code> for all locales.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.putDefaults(System.Object[])">
            <summary>
            Puts all of the key/value pairs in the database and
            unconditionally generates one <code>PropertyChangeEvent</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChangeListener</code> from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.removeResourceBundle(System.String)">
            <summary>
            Removes a resource bundle from the list of resource bundles that are
            searched for localized defaults.
            </summary>
        </member>
        <member name="M:javax.swing.UIDefaults.setDefaultLocale(java.util.Locale)">
            <summary>
            Sets the default locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.addAuxiliaryLookAndFeel(javax.swing.LookAndFeel)">
            <summary>
            Adds a <code>LookAndFeel</code> to the list of auxiliary look and feels.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Adds a <code>PropertyChangeListener</code> to the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.get(System.Object)">
            <summary>
            Returns an object from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.get(System.Object,java.util.Locale)">
            <summary>
            Returns an object from the defaults table that is appropriate for
            the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getAuxiliaryLookAndFeels">
            <summary>
            Returns the list of auxiliary look and feels (can be <code>null</code>).
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getBoolean(System.Object)">
            <summary>
            Returns a boolean from the defaults table which is associated with
            the key value.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getBoolean(System.Object,java.util.Locale)">
            <summary>
            Returns a boolean from the defaults table which is associated with
            the key value and the given <code>Locale</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getBorder(System.Object)">
            <summary>
            Returns a border from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getBorder(System.Object,java.util.Locale)">
            <summary>
            Returns a border from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getColor(System.Object)">
            <summary>
            Returns a drawing color from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getColor(System.Object,java.util.Locale)">
            <summary>
            Returns a drawing color from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getCrossPlatformLookAndFeelClassName">
            <summary>
            Returns the name of the <code>LookAndFeel</code> class that implements
            the default cross platform look and feel -- the Java
            Look and Feel (JLF).
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getDefaults">
            <summary>
            Returns the default values for this look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getDimension(System.Object)">
            <summary>
            Returns a dimension from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getDimension(System.Object,java.util.Locale)">
            <summary>
            Returns a dimension from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getFont(System.Object)">
            <summary>
            Returns a drawing font from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getFont(System.Object,java.util.Locale)">
            <summary>
            Returns a drawing font from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getIcon(System.Object)">
            <summary>
            Returns an <code>Icon</code> from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getIcon(System.Object,java.util.Locale)">
            <summary>
            Returns an <code>Icon</code> from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getInsets(System.Object)">
            <summary>
            Returns an <code>Insets</code> object from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getInsets(System.Object,java.util.Locale)">
            <summary>
            Returns an <code>Insets</code> object from the defaults table that is
            appropriate for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getInt(System.Object)">
            <summary>
            Returns an integer from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getInt(System.Object,java.util.Locale)">
            <summary>
            Returns an integer from the defaults table that is appropriate
            for the given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getLookAndFeel">
            <summary>
            Returns the current default look and feel or <code>null</code>.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getLookAndFeelDefaults">
            <summary>
            Returns the default values for this look and feel.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getPropertyChangeListeners">
            <summary>
            Returns an array of all the <code>PropertyChangeListener</code>s added
            to this UIManager with addPropertyChangeListener().
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getString(System.Object)">
            <summary>
            Returns a string from the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getString(System.Object,java.util.Locale)">
            <summary>
            Returns a string from the defaults table that is appropriate for the
            given locale.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.getSystemLookAndFeelClassName">
            <summary>
            Returns the name of the <code>LookAndFeel</code> class that implements
            the native systems look and feel if there is one, otherwise
            the name of the default cross platform <code>LookAndFeel</code>
            class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:javax.swing.UIManager.getUI(javax.swing.JComponent)" -->
        <member name="M:javax.swing.UIManager.installLookAndFeel(System.String,System.String)">
            <summary>
            Creates a new look and feel and adds it to the current array.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.put(System.Object,System.Object)">
            <summary>
            Stores an object in the defaults table.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel)">
            <summary>
            Removes a <code>LookAndFeel</code> from the list of auxiliary look and feels.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.removePropertyChangeListener(java.beans.PropertyChangeListener)">
            <summary>
            Removes a <code>PropertyChangeListener</code> from the listener list.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.setLookAndFeel(javax.swing.LookAndFeel)">
            <summary>
            Sets the current default look and feel using a
            <code>LookAndFeel</code> object.
            </summary>
        </member>
        <member name="M:javax.swing.UIManager.setLookAndFeel(System.String)">
            <summary>
            Sets the current default look and feel using a class name.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.addEdit(javax.swing.undo.UndoableEdit)">
            <summary>
            This <code>UndoableEdit</code> should absorb <code>anEdit</code>
            if it can.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.canRedo">
            <summary>
            True if it is still possible to redo this operation.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.canUndo">
            <summary>
            True if it is still possible to undo this operation.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.die">
            <summary>
            May be sent to inform an edit that it should no longer be
            used.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.getPresentationName">
            <summary>
            Provides a localized, human readable description of this edit
            suitable for use in, say, a change log.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.getRedoPresentationName">
            <summary>
            Provides a localized, human readable description of the redoable
            form of this edit, e.g.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.getUndoPresentationName">
            <summary>
            Provides a localized, human readable description of the undoable
            form of this edit, e.g.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.isSignificant">
            <summary>
            Returns false if this edit is insignificant--for example one
            that maintains the user's selection, but does not change any
            model state.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.redo">
            <summary>
            Re-apply the edit, assuming that it has been undone.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.replaceEdit(javax.swing.undo.UndoableEdit)">
            <summary>
            Returns true if this <code>UndoableEdit</code> should replace
            <code>anEdit</code>.
            </summary>
        </member>
        <member name="M:javax.swing.undo.UndoableEdit.undo">
            <summary>
            Undo the edit that was made.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Source.getSystemId">
            <summary>
            Get the system identifier that was set with setSystemId.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Source.setSystemId(System.String)">
            <summary>
            Set the system identifier for this Source.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.#ctor">
            <summary>
            Zero-argument default constructor.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.#ctor(org.w3c.dom.Node)">
            <summary>
            Create a new input source with a DOM node.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.#ctor(org.w3c.dom.Node,System.String)">
            <summary>
            Create a new input source with a DOM node, and with the
            system ID also passed in as the base URI.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.getNode">
            <summary>
            Get the node that represents a Source DOM tree.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.getSystemId">
            <summary>
            Get the base ID (URL or system ID) from where URLs
            will be resolved.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.setNode(org.w3c.dom.Node)">
            <summary>
            Set the node that will represents a Source DOM tree.
            </summary>
        </member>
        <member name="M:javax.xml.transform.dom.DOMSource.setSystemId(System.String)">
            <summary>
            Set the base ID (URL or system ID) from where URLs
            will be resolved.
            </summary>
        </member>
        <member name="M:javax.xml.transform.ErrorListener.error(javax.xml.transform.TransformerException)">
            <summary>
            Receive notification of a recoverable error.
            </summary>
        </member>
        <member name="M:javax.xml.transform.ErrorListener.fatalError(javax.xml.transform.TransformerException)">
            <summary>
            Receive notification of a non-recoverable error.
            </summary>
        </member>
        <member name="M:javax.xml.transform.ErrorListener.warning(javax.xml.transform.TransformerException)">
            <summary>
            Receive notification of a warning.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Result.getSystemId">
            <summary>
            Get the system identifier that was set with setSystemId.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Result.setSystemId(System.String)">
            <summary>
            Set the system identifier for this Result.
            </summary>
        </member>
        <member name="M:javax.xml.transform.SourceLocator.getColumnNumber">
            <summary>
            Return the character position where the current document event ends.
            </summary>
        </member>
        <member name="M:javax.xml.transform.SourceLocator.getLineNumber">
            <summary>
            Return the line number where the current document event ends.
            </summary>
        </member>
        <member name="M:javax.xml.transform.SourceLocator.getPublicId">
            <summary>
            Return the public identifier for the current document event.
            </summary>
        </member>
        <member name="M:javax.xml.transform.SourceLocator.getSystemId">
            <summary>
            Return the system identifier for the current document event.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.#ctor">
            <summary>
            Zero-argument default constructor.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.#ctor(java.io.File)">
            <summary>
            Construct a StreamResult from a File.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.#ctor(java.io.OutputStream)">
            <summary>
            Construct a StreamResult from a sbyte stream.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.#ctor(System.String)">
            <summary>
            Construct a StreamResult from a URL.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.#ctor(java.io.Writer)">
            <summary>
            Construct a StreamResult from a character stream.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.getOutputStream">
            <summary>
            Get the sbyte stream that was set with setOutputStream.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.getSystemId">
            <summary>
            Get the system identifier that was set with setSystemId.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.getWriter">
            <summary>
            Get the character stream that was set with setWriter.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.setOutputStream(java.io.OutputStream)">
            <summary>
            Set the ByteStream that is to be written to.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.setSystemId(java.io.File)">
            <summary>
            Set the system ID from a File reference.
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.setSystemId(System.String)">
            <summary>
            Set the systemID that may be used in association
            with the sbyte or character stream, or, if neither is set, use
            this value as a writeable URI (probably a file name).
            </summary>
        </member>
        <member name="M:javax.xml.transform.stream.StreamResult.setWriter(java.io.Writer)">
            <summary>
            Set the writer that is to receive the result.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Templates.getOutputProperties">
            <summary>
            Get the static properties for xsl:output.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Templates.newTransformer">
            <summary>
            Create a new transformation context for this Templates object.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.#ctor">
            <summary>
            Default constructor is protected on purpose.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.clearParameters">
            <summary>
            Clear all parameters set with setParameter.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.getErrorListener">
            <summary>
            Get the error event handler in effect for the transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.getOutputProperties">
            <summary>
            Get a copy of the output properties for the transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.getOutputProperty(System.String)">
            <summary>
            Get an output property that is in effect for the
            transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.getParameter(System.String)">
            <summary>
            Get a parameter that was explicitly set with setParameter
            or setParameters.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.getURIResolver">
            <summary>
            Get an object that will be used to resolve URIs used in
            document(), etc.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.setErrorListener(javax.xml.transform.ErrorListener)">
            <summary>
            Set the error event listener in effect for the transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.setOutputProperties(java.util.Properties)">
            <summary>
            Set the output properties for the transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.setOutputProperty(System.String,System.String)">
            <summary>
            Set an output property that will be in effect for the
            transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.setParameter(System.String,System.Object)">
            <summary>
            Add a parameter for the transformation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.setURIResolver(javax.xml.transform.URIResolver)">
            <summary>
            Set an object that will be used to resolve URIs used in
            document().
            </summary>
        </member>
        <member name="M:javax.xml.transform.Transformer.transform(javax.xml.transform.Source,javax.xml.transform.Result)">
            <summary>
            Process the source tree to the output result.
            </summary>
        </member>
        <member name="M:java.lang.Throwable.getMessage">
            <summary>
            Returns the detail message string of this throwable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:javax.xml.transform.TransformerException.#ctor(System.String)">
            <summary>
            Create a new TransformerException.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.#ctor(System.String,javax.xml.transform.SourceLocator)">
            <summary>
            Create a new TransformerException from a message and a Locator.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.#ctor(System.String,javax.xml.transform.SourceLocator,java.lang.Throwable)">
            <summary>
            Wrap an existing exception in a TransformerException.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.#ctor(System.String,java.lang.Throwable)">
            <summary>
            Wrap an existing exception in a TransformerException.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.#ctor(java.lang.Throwable)">
            <summary>
            Create a new TransformerException wrapping an existing exception.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.getCause">
            <summary>
            Returns the cause of this throwable or <code>null</code> if the
            cause is nonexistent or unknown.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.getException">
            <summary>
            This method retrieves an exception that this exception wraps.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.getLocationAsString">
            <summary>
            Get the location information as a string.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.getLocator">
            <summary>
            Method getLocator retrieves an instance of a SourceLocator
            object that specifies where an error occured.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.getMessageAndLocation">
            <summary>
            Get the error message with location information
            appended.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.initCause(java.lang.Throwable)">
            <summary>
            Initializes the <i>cause</i> of this throwable to the specified value.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.printStackTrace">
            <summary>
            Print the the trace of methods from where the error
            originated.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.printStackTrace(java.io.PrintStream)">
            <summary>
            Print the the trace of methods from where the error
            originated.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.printStackTrace(java.io.PrintWriter)">
            <summary>
            Print the the trace of methods from where the error
            originated.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerException.setLocator(javax.xml.transform.SourceLocator)">
            <summary>
            Method setLocator sets an instance of a SourceLocator
            object that specifies where an error occured.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.#ctor">
            <summary>
            Default constructor is protected on purpose.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.getAssociatedStylesheet(javax.xml.transform.Source,System.String,System.String,System.String)">
            <summary>
            Get the stylesheet specification(s) associated
            via the xml-stylesheet processing instruction (see
            http://www.w3.org/TR/xml-stylesheet/) with the document
            document specified in the source parameter, and that match
            the given criteria.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.getAttribute(System.String)">
            <summary>
            Allows the user to retrieve specific attributes on the underlying
            implementation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.getErrorListener">
            <summary>
            Get the error event handler for the TransformerFactory.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.getFeature(System.String)">
            <summary>
            Look up the value of a feature.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.getURIResolver">
            <summary>
            Get the object that is used by default during the transformation
            to resolve URIs used in document(), xsl:import, or xsl:include.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.newInstance">
            <summary>
            Obtain a new instance of a <code>TransformerFactory</code>.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.newTemplates(javax.xml.transform.Source)">
            <summary>
            Process the Source into a Templates object, which is a
            a compiled representation of the source.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.newTransformer">
            <summary>
            Create a new Transformer object that performs a copy
            of the source to the result.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.newTransformer(javax.xml.transform.Source)">
            <summary>
            Process the Source into a Transformer object.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.setAttribute(System.String,System.Object)">
            <summary>
            Allows the user to set specific attributes on the underlying
            implementation.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.setErrorListener(javax.xml.transform.ErrorListener)">
            <summary>
            Set the error event listener for the TransformerFactory, which
            is used for the processing of transformation instructions,
            and not for the transformation itself.
            </summary>
        </member>
        <member name="M:javax.xml.transform.TransformerFactory.setURIResolver(javax.xml.transform.URIResolver)">
            <summary>
            Set an object that is used by default during the transformation
            to resolve URIs used in xsl:import, or xsl:include.
            </summary>
        </member>
        <member name="M:javax.xml.transform.URIResolver.resolve(System.String,System.String)">
            <summary>
            Called by the processor when it encounters
            an xsl:include, xsl:import, or document() function.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.addAdjustmentListener(java.awt.event.AdjustmentListener)">
            <summary>
            Adds a listener to receive adjustment events when the value of
            the adjustable object changes.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getBlockIncrement">
            <summary>
            Gets the block value increment for the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getMaximum">
            <summary>
            Gets the maximum value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getMinimum">
            <summary>
            Gets the minimum value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getOrientation">
            <summary>
            Gets the orientation of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getUnitIncrement">
            <summary>
            Gets the unit value increment for the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getValue">
            <summary>
            Gets the current value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.getVisibleAmount">
            <summary>
            Gets the length of the proportional indicator.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener)">
            <summary>
            Removes an adjustment listener.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setBlockIncrement(System.Int32)">
            <summary>
            Sets the block value increment for the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setMaximum(System.Int32)">
            <summary>
            Sets the maximum value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setMinimum(System.Int32)">
            <summary>
            Sets the minimum value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setUnitIncrement(System.Int32)">
            <summary>
            Sets the unit value increment for the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setValue(System.Int32)">
            <summary>
            Sets the current value of the adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.Adjustable.setVisibleAmount(System.Int32)">
            <summary>
            Sets the length of the proportional indicator of the
            adjustable object.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.#ctor">
            <summary>
            Constructs a new border layout with
            no gaps between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a border layout with the specified gaps
            between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.addLayoutComponent(java.awt.Component,System.Object)">
            <summary>
            Adds the specified component to the layout, using the specified
            constraint object.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.addLayoutComponent(System.String,java.awt.Component)">
            <summary>
            If the layout manager uses a per-component string,
            adds the component <code>comp</code> to the layout,
            associating it
            with the string specified by <code>name</code>.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.getHgap">
            <summary>
            Returns the horizontal gap between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.getLayoutAlignmentX(java.awt.Container)">
            <summary>
            Returns the alignment along the x axis.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.getLayoutAlignmentY(java.awt.Container)">
            <summary>
            Returns the alignment along the y axis.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.getVgap">
            <summary>
            Returns the vertical gap between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.invalidateLayout(java.awt.Container)">
            <summary>
            Invalidates the layout, indicating that if the layout manager
            has cached information it should be discarded.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.layoutContainer(java.awt.Container)">
            <summary>
            Lays out the container argument using this border layout.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.maximumLayoutSize(java.awt.Container)">
            <summary>
            Returns the maximum dimensions for this layout given the components
            in the specified target container.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.minimumLayoutSize(java.awt.Container)">
            <summary>
            Determines the minimum size of the <code>target</code> container
            using this layout manager.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.preferredLayoutSize(java.awt.Container)">
            <summary>
            Determines the preferred size of the <code>target</code>
            container using this layout manager, based on the components
            in the container.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.removeLayoutComponent(java.awt.Component)">
            <summary>
            Removes the specified component from this border layout.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.setHgap(System.Int32)">
            <summary>
            Sets the horizontal gap between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.setVgap(System.Int32)">
            <summary>
            Sets the vertical gap between components.
            </summary>
        </member>
        <member name="M:java.awt.BorderLayout.ToString">
            <summary>
            Returns a string representation of the state of this border layout.
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.#ctor(java.awt.ImageCapabilities,java.awt.ImageCapabilities,java.awt.BufferCapabilities.FlipContents)">
            <summary>
            Creates a new object for specifying buffering capabilities
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.clone">
            <summary>
            Creates and returns a copy of this object.
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.getBackBufferCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.getFlipContents">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.getFrontBufferCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.isFullScreenRequired">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.isMultiBufferAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.BufferCapabilities.isPageFlipping">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates an opaque sRGB color with the specified red, green, and blue
            values in the range (0.0 - 1.0).
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an sRGB color with the specified red, green, blue, and
            alpha values in the range (0.0 - 1.0).
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Int32)">
            <summary>
            Creates an opaque sRGB color with the specified combined RGB value
            consisting of the red component in bits 16-23, the green component
            in bits 8-15, and the blue component in bits 0-7.
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates an sRGB color with the specified combined RGBA value consisting
            of the alpha component in bits 24-31, the red component in bits 16-23,
            the green component in bits 8-15, and the blue component in bits 0-7.
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an opaque sRGB color with the specified red, green,
            and blue values in the range (0 - 255).
            </summary>
        </member>
        <member name="M:java.awt.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an sRGB color with the specified red, green, blue, and alpha
            values in the range (0 - 255).
            </summary>
        </member>
        <member name="M:java.awt.Color.brighter">
            <summary>
            Creates a new <code>Color</code> that is a brighter version of this
            <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.darker">
            <summary>
            Creates a new <code>Color</code> that is a darker version of this
            <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.decode(System.String)">
            <summary>
            Converts a <code>String</code> to an integer and returns the
            specified opaque <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.Equals(System.Object)">
            <summary>
            Determines whether another object is equal to this
            <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.getAlpha">
            <summary>
            Returns the alpha component in the range 0-255.
            </summary>
        </member>
        <member name="M:java.awt.Color.getBlue">
            <summary>
            Returns the blue component in the range 0-255 in the default sRGB
            space.
            </summary>
        </member>
        <member name="M:java.awt.Color.getColor(System.String)">
            <summary>
            Finds a color in the system properties.
            </summary>
        </member>
        <member name="M:java.awt.Color.getColor(System.String,java.awt.Color)">
            <summary>
            Finds a color in the system properties.
            </summary>
        </member>
        <member name="M:java.awt.Color.getColor(System.String,System.Int32)">
            <summary>
            Finds a color in the system properties.
            </summary>
        </member>
        <member name="M:java.awt.Color.getColorComponents(System.Single[])">
            <summary>
            Returns a <code>float</code> array containing only the color
            components of the <code>Color</code>, in the
            <code>ColorSpace</code> of the <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.getComponents(System.Single[])">
            <summary>
            Returns a <code>float</code> array containing the color and alpha
            components of the <code>Color</code>, in the
            <code>ColorSpace</code> of the <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.getGreen">
            <summary>
            Returns the green component in the range 0-255 in the default sRGB
            space.
            </summary>
        </member>
        <member name="M:java.awt.Color.getHSBColor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <code>Color</code> object based on the specified values
            for the HSB color model.
            </summary>
        </member>
        <member name="M:java.awt.Color.getRed">
            <summary>
            Returns the red component in the range 0-255 in the default sRGB
            space.
            </summary>
        </member>
        <member name="M:java.awt.Color.getRGB">
            <summary>
            Returns the RGB value representing the color in the default sRGB
            <A HREF="../../java/awt/image/ColorModel.html" title="class in java.awt.image"><CODE>ColorModel</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.Color.getRGBColorComponents(System.Single[])">
            <summary>
            Returns a <code>float</code> array containing only the color
            components of the <code>Color</code>, in the default sRGB color
            space.
            </summary>
        </member>
        <member name="M:java.awt.Color.getRGBComponents(System.Single[])">
            <summary>
            Returns a <code>float</code> array containing the color and alpha
            components of the <code>Color</code>, as represented in the default
            sRGB color space.
            </summary>
        </member>
        <member name="M:java.awt.Color.getTransparency">
            <summary>
            Returns the transparency mode for this <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.GetHashCode">
            <summary>
            Computes the hash code for this <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.Color.HSBtoRGB(System.Single,System.Single,System.Single)">
            <summary>
            Converts the components of a color, as specified by the HSB
            model, to an equivalent set of values for the default RGB model.
            </summary>
        </member>
        <member name="M:java.awt.Color.RGBtoHSB(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Converts the components of a color, as specified by the default RGB
            model, to an equivalent set of values for hue, saturation, and
            brightness that are the three components of the HSB model.
            </summary>
        </member>
        <member name="M:java.awt.Color.ToString">
            <summary>
            Returns a string representation of this <code>Color</code>.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a ColorSpace object given a color space type
            and the number of components.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.fromCIEXYZ(System.Single[])">
            <summary>
            Transforms a color value assumed to be in the CS_CIEXYZ conversion
            color space into this ColorSpace.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.fromRGB(System.Single[])">
            <summary>
            Transforms a color value assumed to be in the default CS_sRGB
            color space into this ColorSpace.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getInstance(System.Int32)">
            <summary>
            Returns a ColorSpace representing one of the specific
            predefined color spaces.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getMaxValue(System.Int32)">
            <summary>
            Returns the maximum normalized color component value for the
            specified component.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getMinValue(System.Int32)">
            <summary>
            Returns the minimum normalized color component value for the
            specified component.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getName(System.Int32)">
            <summary>
            Returns the name of the component given the component index.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getNumComponents">
            <summary>
            Returns the number of components of this ColorSpace.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.getType">
            <summary>
            Returns the color space type of this ColorSpace (for example
            TYPE_RGB, TYPE_XYZ, ...).
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.isCS_sRGB">
            <summary>
            Returns true if the ColorSpace is CS_sRGB.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.toCIEXYZ(System.Single[])">
            <summary>
            Transforms a color value assumed to be in this ColorSpace
            into the CS_CIEXYZ conversion color space.
            </summary>
        </member>
        <member name="M:java.awt.color.ColorSpace.toRGB(System.Single[])">
            <summary>
            Transforms a color value assumed to be in this ColorSpace
            into a value in the default CS_sRGB color space.
            </summary>
        </member>
        <member name="M:java.lang.Object.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.lang.Object.clone">
            <summary>
            Creates and returns a copy of this object.
            </summary>
        </member>
        <member name="M:java.lang.Object.Equals(System.Object)">
            <summary>
            Indicates whether some other object is "equal to" this one.
            </summary>
        </member>
        <member name="M:java.lang.Object.finalize">
            <summary>
            Called by the garbage collector on an object when garbage collection
            determines that there are no more references to the object.
            </summary>
        </member>
        <member name="M:java.lang.Object.getClass">
            <summary>
            Returns the runtime class of an object.
            </summary>
        </member>
        <member name="M:java.lang.Object.GetHashCode">
            <summary>
            Returns a hash code value for the object.
            </summary>
        </member>
        <member name="M:java.lang.Object.notify">
            <summary>
            Wakes up a single thread that is waiting on this object's
            monitor.
            </summary>
        </member>
        <member name="M:java.lang.Object.notifyAll">
            <summary>
            Wakes up all threads that are waiting on this object's monitor.
            </summary>
        </member>
        <member name="M:java.lang.Object.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:java.lang.Object.wait">
            <summary>
            Causes current thread to wait until another thread invokes the
            <A HREF="../../java/lang/Object.html#notify()"><CODE>notify()</CODE></A> method or the
            <A HREF="../../java/lang/Object.html#notifyAll()"><CODE>notifyAll()</CODE></A> method for this object.
            </summary>
        </member>
        <member name="M:java.lang.Object.wait(System.Int64)">
            <summary>
            Causes current thread to wait until either another thread invokes the
            <A HREF="../../java/lang/Object.html#notify()"><CODE>notify()</CODE></A> method or the
            <A HREF="../../java/lang/Object.html#notifyAll()"><CODE>notifyAll()</CODE></A> method for this object, or a
            specified amount of time has elapsed.
            </summary>
        </member>
        <member name="M:java.lang.Object.wait(System.Int64,System.Int32)">
            <summary>
            Causes current thread to wait until another thread invokes the
            <A HREF="../../java/lang/Object.html#notify()"><CODE>notify()</CODE></A> method or the
            <A HREF="../../java/lang/Object.html#notifyAll()"><CODE>notifyAll()</CODE></A> method for this object, or
            some other thread interrupts the current thread, or a certain
            amount of real time has elapsed.
            </summary>
        </member>
        <member name="M:java.awt.ComponentOrientation.getOrientation(java.util.Locale)">
            <summary>
            Returns the orientation that is appropriate for the given locale.
            </summary>
        </member>
        <member name="M:java.awt.ComponentOrientation.getOrientation(java.util.ResourceBundle)">
            <summary>
            <B>Deprecated.</B> <I>As of J2SE 1.4, use <A HREF="../../java/awt/ComponentOrientation.html#getOrientation(java.util.Locale)"><CODE>getOrientation(java.util.Locale)</CODE></A>.</I>
            </summary>
        </member>
        <member name="M:java.awt.ComponentOrientation.isHorizontal">
            <summary>
            Are lines horizontal?
            This will return true for horizontal, left-to-right writing
            systems such as Roman.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:java.awt.ComponentOrientation.isLeftToRight" -->
        <member name="M:java.awt.Composite.createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)">
            <summary>
            Creates a context containing state that is used to perform
            the compositing operation.
            </summary>
        </member>
        <member name="M:java.awt.CompositeContext.compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)">
            <summary>
            Composes the two source <A HREF="../../java/awt/image/Raster.html" title="class in java.awt.image"><CODE>Raster</CODE></A> objects and
            places the result in the destination
            <A HREF="../../java/awt/image/WritableRaster.html" title="class in java.awt.image"><CODE>WritableRaster</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.CompositeContext.dispose">
            <summary>
            Releases resources allocated for a context.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.#ctor(System.Int32)">
            <summary>
            Creates a new cursor object with the specified type.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.#ctor(System.String)">
            <summary>
            Creates a new custom cursor object with the specified name.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.finalize">
            <summary>
            Called by the garbage collector on an object when garbage collection
            determines that there are no more references to the object.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.getDefaultCursor">
            <summary>
            Return the system default cursor.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.getName">
            <summary>
            Returns the name of this cursor.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.getPredefinedCursor(System.Int32)">
            <summary>
            Returns a cursor object with the specified predefined type.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.getSystemCustomCursor(System.String)">
            <summary>
            Returns a system-specific custom cursor object matching the
            specified name.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.getType">
            <summary>
            Returns the type for this cursor.
            </summary>
        </member>
        <member name="M:java.awt.Cursor.ToString">
            <summary>
            Returns a string representation of this cursor.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Clipboard.#ctor(System.String)">
            <summary>
            Creates a clipboard object.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Clipboard.getContents(System.Object)">
            <summary>
            Returns a transferable object representing the current contents
            of the clipboard.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Clipboard.getName">
            <summary>
            Returns the name of this clipboard object.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Clipboard.setContents(java.awt.datatransfer.Transferable,java.awt.datatransfer.ClipboardOwner)">
            <summary>
            Sets the current contents of the clipboard to the specified
            transferable object and registers the specified clipboard owner
            as the owner of the new contents.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.ClipboardOwner.lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)">
            <summary>
            Notifies this object that it is no longer the clipboard owner.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.#ctor">
            <summary>
            Constructs a new <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.#ctor(java.lang.Class,System.String)">
            <summary>
            Constructs a <code>DataFlavor</code> that represents a Java class.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.#ctor(System.String)">
            <summary>
            Constructs a <code>DataFlavor</code> from a <code>mimeType</code> string.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.#ctor(System.String,System.String)">
            <summary>
            Constructs a <code>DataFlavor</code> that represents a
            <code>MimeType</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.#ctor(System.String,System.String,java.lang.ClassLoader)">
            <summary>
            Constructs a <code>DataFlavor</code> that represents a
            <code>MimeType</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.clone">
            <summary>
            Returns a clone of this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor)">
            <summary>
            Tests a <code>DataFlavor</code> to this <code>DataFlavor</code> for
            equality.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.Equals(System.Object)">
            <summary>
            Tests an arbitrary <code>Object</code> to this <code>DataFlavor</code>
            for equality.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.equals(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As inconsistent with <code>hashCode()</code> contract,
            use <code>isMimeTypeEqual(String)</code> instead.</I>
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getDefaultRepresentationClass">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getDefaultRepresentationClassAsString">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getHumanPresentableName">
            <summary>
            Returns the human presentable name for the data format that this
            <code>DataFlavor</code> represents.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getMimeType">
            <summary>
            Returns the MIME type string for this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getParameter(System.String)">
            <summary>
            Returns the human presentable name for this <code>DataFlavor</code>
            if <code>paramName</code> equals "humanPresentableName".
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getPrimaryType">
            <summary>
            Returns the primary MIME type for this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getReaderForText(java.awt.datatransfer.Transferable)">
            <summary>
            Gets a Reader for a text flavor, decoded, if necessary, for the expected
            charset (encoding).
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getRepresentationClass">
            <summary>
            Returns the <code>Class</code> which objects supporting this
            <code>DataFlavor</code> will return when this <code>DataFlavor</code>
            is requested.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getSubType">
            <summary>
            Returns the sub MIME type of this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.getTextPlainUnicodeFlavor">
            <summary>
            Returns a <code>DataFlavor</code> representing plain text with Unicode
            encoding, where:
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.GetHashCode">
            <summary>
            Returns hash code for this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isFlavorJavaFileListType">
            <summary>
            Returns true if the <code>DataFlavor</code> specified represents
            a list of file objects.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isFlavorRemoteObjectType">
            <summary>
            Returns true if the <code>DataFlavor</code> specified represents
            a remote object.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isFlavorSerializedObjectType">
            <summary>
            Returns true if the <code>DataFlavor</code> specified represents
            a serialized object.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isFlavorTextType">
            <summary>
            Returns whether this <code>DataFlavor</code> is a valid text flavor for
            this implementation of the Java platform.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isMimeTypeEqual(java.awt.datatransfer.DataFlavor)">
            <summary>
            Compares the <code>mimeType</code> of two <code>DataFlavor</code>
            objects.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isMimeTypeEqual(System.String)">
            <summary>
            Returns whether the string representation of the MIME type passed in
            is equivalent to the MIME type of this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isMimeTypeSerializedObject">
            <summary>
            Does the <code>DataFlavor</code> represent a serialized object?
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassByteBuffer">
            <summary>
            Returns whether the representation class for this
            <code>DataFlavor</code> is <code>java.nio.ByteBuffer</code> or a
            subclass thereof.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassCharBuffer">
            <summary>
            Returns whether the representation class for this
            <code>DataFlavor</code> is <code>java.nio.CharBuffer</code> or a
            subclass thereof.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassInputStream">
            <summary>
            Does the <code>DataFlavor</code> represent a
            <code>java.io.InputStream</code>?
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassReader">
            <summary>
            Returns whether the representation class for this
            <code>DataFlavor</code> is <code>java.io.Reader</code> or a subclass
            thereof.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassRemote">
            <summary>
            Returns true if the representation class is <code>Remote</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.isRepresentationClassSerializable">
            <summary>
            Returns true if the representation class can be serialized.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.match(java.awt.datatransfer.DataFlavor)">
            <summary>
            Tests a <code>DataFlavor</code> to this <code>DataFlavor</code> for
            equality.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.normalizeMimeType(System.String)">
            <summary>
            <B>Deprecated.</B> <I></I>
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.normalizeMimeTypeParameter(System.String,System.String)">
            <summary>
            <B>Deprecated.</B> <I></I>
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.readExternal(java.io.ObjectInput)">
            <summary>
            Restores this <code>DataFlavor</code> from a Serialized state.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.selectBestTextFlavor(java.awt.datatransfer.DataFlavor[])">
            <summary>
            Selects the best text <code>DataFlavor</code> from an array of <code>
            DataFlavor</code>s.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.setHumanPresentableName(System.String)">
            <summary>
            Sets the human presentable name for the data format that this
            <code>DataFlavor</code> represents.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.ToString">
            <summary>
            String representation of this <code>DataFlavor</code> and its
            parameters.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.tryToLoadClass(System.String,java.lang.ClassLoader)">
            <summary>
            Tries to load a class from: the bootstrap loader, the system loader,
            the context loader (if one is present) and finally the loader specified.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.DataFlavor.writeExternal(java.io.ObjectOutput)">
            <summary>
            Serializes this <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.FlavorMap.getFlavorsForNatives(System.String[])">
            <summary>
            Returns a <code>Map</code> of the specified <code>String</code> natives
            to their corresponding <code>DataFlavor</code>.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.FlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[])">
            <summary>
            Returns a <code>Map</code> of the specified <code>DataFlavor</code>s to
            their corresponding <code>String</code> native.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Transferable.getTransferData(java.awt.datatransfer.DataFlavor)">
            <summary>
            Returns an object which represents the data to be transferred.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Transferable.getTransferDataFlavors">
            <summary>
            Returns an array of DataFlavor objects indicating the flavors the data
            can be provided in.
            </summary>
        </member>
        <member name="M:java.awt.datatransfer.Transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)">
            <summary>
            Returns whether or not the specified data flavor is supported for
            this object.
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new display mode object with the supplied parameters.
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.equals(java.awt.DisplayMode)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.getBitDepth">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.getHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.getRefreshRate">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.getWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.DisplayMode.GetHashCode">
            <summary>
            Returns a hash code value for the object.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.#ctor">
            <summary>
            Creates a <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.#ctor(java.awt.Component,java.awt.dnd.DropTargetListener)">
            <summary>
            Creates a <code>DropTarget</code> given the <code>Component</code>
            to associate itself with, and the <code>DropTargetListener</code>
            to handle event processing.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.#ctor(java.awt.Component,System.Int32,java.awt.dnd.DropTargetListener)">
            <summary>
            Creates a <code>DropTarget</code> given the <code>Component</code>
            to associate itself with, an <code>int</code> representing
            the default acceptable action(s) to support, and a
            <code>DropTargetListener</code> to handle event processing.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.#ctor(java.awt.Component,System.Int32,java.awt.dnd.DropTargetListener,System.Boolean)">
            <summary>
            Creates a <code>DropTarget</code> given the <code>Component</code>
            to associate itself with, an <code>int</code> representing
            the default acceptable action(s)
            to support, a <code>DropTargetListener</code>
            to handle event processing, and a <code>boolean</code> indicating
            if the <code>DropTarget</code> is currently accepting drops.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.#ctor(java.awt.Component,System.Int32,java.awt.dnd.DropTargetListener,System.Boolean,java.awt.datatransfer.FlavorMap)">
            <summary>
            Creates a new DropTarget given the <code>Component</code>
            to associate itself with, an <code>int</code> representing
            the default acceptable action(s) to
            support, a <code>DropTargetListener</code>
            to handle event processing, a <code>boolean</code> indicating
            if the <code>DropTarget</code> is currently accepting drops, and
            a <code>FlavorMap</code> to use (or null for the default <CODE>FlavorMap</CODE>).
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.addDropTargetListener(java.awt.dnd.DropTargetListener)">
            <summary>
            Adds a new <code>DropTargetListener</code> (UNICAST SOURCE).
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.clearAutoscroll">
            <summary>
            clear autoscrolling
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.createDropTargetAutoScroller(java.awt.Component,java.awt.Point)">
            <summary>
            create an embedded autoscroller
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.createDropTargetContext">
            <summary>
            Creates the DropTargetContext associated with this DropTarget.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.dragEnter(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            The <code>DropTarget</code> intercepts
            dragEnter() notifications before the
            registered <code>DropTargetListener</code> gets them.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.dragExit(java.awt.dnd.DropTargetEvent)">
            <summary>
            The <code>DropTarget</code> intercepts
            dragExit() notifications before the
            registered <code>DropTargetListener</code> gets them.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.dragOver(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            The <code>DropTarget</code>
            intercepts dragOver() notifications before the
            registered <code>DropTargetListener</code> gets them.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.drop(java.awt.dnd.DropTargetDropEvent)">
            <summary>
            The <code>DropTarget</code> intercepts drop() notifications before the
            registered <code>DropTargetListener</code> gets them.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.dropActionChanged(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            The <code>DropTarget</code> intercepts
            dropActionChanged() notifications before the
            registered <code>DropTargetListener</code> gets them.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.getComponent">
            <summary>
            Gets the <code>Component</code> associated
            with this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.getDefaultActions">
            <summary>
            Gets an <code>int</code> representing the
            current action(s) supported by this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.getDropTargetContext">
            <summary>
            Gets the <code>DropTargetContext</code> associated
            with this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.getFlavorMap">
            <summary>
            Gets the <code>FlavorMap</code>
            associated with this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.initializeAutoscrolling(java.awt.Point)">
            <summary>
            initialize autoscrolling
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.isActive">
            <summary>
            Reports whether or not
            this <code>DropTarget</code>
            is currently active (ready to accept drops).
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.removeDropTargetListener(java.awt.dnd.DropTargetListener)">
            <summary>
            Removes the current <code>DropTargetListener</code> (UNICAST SOURCE).
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.setActive(System.Boolean)">
            <summary>
            Sets the DropTarget active if <code>true</code>,
            inactive if <code>false</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.setComponent(java.awt.Component)">
            <summary>
            Note: this interface is required to permit the safe association
            of a DropTarget with a Component in one of two ways, either:
            <code> component.setDropTarget(droptarget); </code>
            or <code> droptarget.setComponent(component); </code>
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.setDefaultActions(System.Int32)">
            <summary>
            Sets the default acceptable actions for this <code>DropTarget</code>
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.setFlavorMap(java.awt.datatransfer.FlavorMap)">
            <summary>
            Sets the <code>FlavorMap</code> associated
            with this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTarget.updateAutoscroll(java.awt.Point)">
            <summary>
            update autoscrolling with current cursor locn
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.acceptDrag(System.Int32)">
            <summary>
            accept the Drag.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.acceptDrop(System.Int32)">
            <summary>
            called to signal that the drop is acceptable
            using the specified operation.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.createTransferableProxy(java.awt.datatransfer.Transferable,System.Boolean)">
            <summary>
            Creates a TransferableProxy to proxy for the specified
            Transferable.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.dropComplete(System.Boolean)">
            <summary>
            This method signals that the drop is completed and
            if it was successful or not.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getComponent">
            <summary>
            This method returns the <code>Component</code> associated with
            this <code>DropTargetContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getCurrentDataFlavors">
            <summary>
            get the available DataFlavors of the
            <code>Transferable</code> operand of this operation.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList">
            <summary>
            This method returns a the currently available DataFlavors
            of the <code>Transferable</code> operand
            as a <code>java.util.List</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getDropTarget">
            <summary>
            This method returns the <code>DropTarget</code> associated with this
            <code>DropTargetContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getTargetActions">
            <summary>
            This method returns an <code>int</code> representing the
            current actions this <code>DropTarget</code> will accept.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.getTransferable">
            <summary>
            get the Transferable (proxy) operand of this operation
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)">
            <summary>
            This method returns a <code>boolean</code>
            indicating if the given <code>DataFlavor</code> is
            supported by this <code>DropTargetContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.rejectDrag">
            <summary>
            reject the Drag.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.rejectDrop">
            <summary>
            called to signal that the drop is unacceptable.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.removeNotify">
            <summary>
            Called when disassociated with the <code>DropTargetContextPeer</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetContext.setTargetActions(System.Int32)">
            <summary>
            This method sets the current actions acceptable to
            this <code>DropTarget</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetEvent.#ctor(java.awt.dnd.DropTargetContext)">
            <summary>
            Construct a <code>DropTargetEvent</code> with
            a specified <code>DropTargetContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetEvent.getDropTargetContext">
            <summary>
            This method returns the <code>DropTargetContext</code>
            associated with this <code>DropTargetEvent</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.#ctor(java.awt.dnd.DropTargetContext,java.awt.Point,System.Int32,System.Int32)">
            <summary>
            Construct a <code>DropTargetDragEvent</code> given the
            <code>DropTargetContext</code> for this operation,
            the location of the "Drag" <code>Cursor</code>'s hotspot
            in the <code>Component</code>'s coordinates, the
            user drop action, and the source drop actions.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.acceptDrag(System.Int32)">
            <summary>
            Accepts the drag.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavors">
            <summary>
            This method returns the current <code>DataFlavor</code>s from the
            <code>DropTargetContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.getCurrentDataFlavorsAsList">
            <summary>
            This method returns the current <code>DataFlavor</code>s
            as a <code>java.util.List</code>
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.getDropAction">
            <summary>
            This method returns the user drop action.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.getLocation">
            <summary>
            This method returns a <code>Point</code>
            indicating the <code>Cursor</code>'s current
            location within the <code>Component'</code>s
            coordinates.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.getSourceActions">
            <summary>
            This method returns the source drop actions.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)">
            <summary>
            This method returns a <code>boolean</code> indicating
            if the specified <code>DataFlavor</code> is supported.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDragEvent.rejectDrag">
            <summary>
            Rejects the drag as a result of examining either the
            <code>dropAction</code> or the available <code>DataFlavor</code>
            types.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.#ctor(java.awt.dnd.DropTargetContext,java.awt.Point,System.Int32,System.Int32)">
            <summary>
            Construct a <code>DropTargetDropEvent</code> given
            the <code>DropTargetContext</code> for this operation,
            the location of the drag <code>Cursor</code>'s
            hotspot in the <code>Component</code>'s coordinates,
            the currently
            selected user drop action, and the current set of
            actions supported by the source.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.#ctor(java.awt.dnd.DropTargetContext,java.awt.Point,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a <code>DropTargetEvent</code> given the
            <code>DropTargetContext</code> for this operation,
            the location of the drag <code>Cursor</code>'s hotspot
            in the <code>Component</code>'s
            coordinates, the currently selected user drop action,
            the current set of actions supported by the source,
            and a <code>boolean</code> indicating if the source is in the same JVM
            as the target.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.acceptDrop(System.Int32)">
            <summary>
            accept the drop, using the specified action.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.dropComplete(System.Boolean)">
            <summary>
            This method notifies the <code>DragSource</code>
            that the drop transfer(s) are completed.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors">
            <summary>
            This method returns the current DataFlavors.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList">
            <summary>
            This method returns the currently available
            <code>DataFlavor</code>s as a <code>java.util.List</code>.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getDropAction">
            <summary>
            This method returns the user drop action.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getLocation">
            <summary>
            This method returns a <code>Point</code>
            indicating the <code>Cursor</code>'s current
            location in the <code>Component</code>'s coordinates.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getSourceActions">
            <summary>
            This method returns the source drop actions.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.getTransferable">
            <summary>
            This method returns the <code>Transferable</code> object
            associated with the drop.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)">
            <summary>
            This method returns a <code>boolean</code> indicating if the
            specified <code>DataFlavor</code> is available
            from the source.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.isLocalTransfer">
            <summary>
            This method returns an <code>int</code> indicating if
            the source is in the same JVM as the target.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetDropEvent.rejectDrop">
            <summary>
            reject the Drop.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            Called while a drag operation is ongoing, when the mouse pointer enters
            the operable part of the drop site for the <code>DropTarget</code>
            registered with this listener.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent)">
            <summary>
            Called while a drag operation is ongoing, when the mouse pointer has
            exited the operable part of the drop site for the
            <code>DropTarget</code> registered with this listener.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            Called when a drag operation is ongoing, while the mouse pointer is still
            over the operable part of the drop site for the <code>DropTarget</code>
            registered with this listener.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent)">
            <summary>
            Called when the drag operation has terminated with a drop on
            the operable part of the drop site for the <code>DropTarget</code>
            registered with this listener.
            </summary>
        </member>
        <member name="M:java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent)">
            <summary>
            Called if the user has modified
            the current drop gesture.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.#ctor(java.awt.Adjustable,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an <code>AdjustmentEvent</code> object with the
            specified <code>Adjustable</code> source, event type,
            adjustment type, and value.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.#ctor(java.awt.Adjustable,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs an <code>AdjustmentEvent</code> object with the
            specified Adjustable source, event type, adjustment type, and value.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.getAdjustable">
            <summary>
            Returns the <code>Adjustable</code> object where this event originated.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.getAdjustmentType">
            <summary>
            Returns the type of adjustment which caused the value changed
            event.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.getValue">
            <summary>
            Returns the current value in the adjustment event.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.getValueIsAdjusting">
            <summary>
            Returns <code>true</code> if this is one of multiple
            adjustment events.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentEvent.paramString">
            <summary>
            Returns a string representing the state of this <code>Event</code>.
            </summary>
        </member>
        <member name="M:java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)">
            <summary>
            Invoked when the value of the adjustable has changed.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentEvent.#ctor(java.awt.Component,System.Int32)">
            <summary>
            Constructs a <code>ComponentEvent</code> object.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentEvent.getComponent">
            <summary>
            Returns the originator of the event.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)">
            <summary>
            Invoked when the component has been made invisible.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)">
            <summary>
            Invoked when the component's position changes.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)">
            <summary>
            Invoked when the component's size changes.
            </summary>
        </member>
        <member name="M:java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)">
            <summary>
            Invoked when the component has been made visible.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerEvent.#ctor(java.awt.Component,System.Int32,java.awt.Component)">
            <summary>
            Constructs a <code>ContainerEvent</code> object.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerEvent.getChild">
            <summary>
            Returns the component that was affected by the event.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerEvent.getContainer">
            <summary>
            Returns the originator of the event.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent)">
            <summary>
            Invoked when a component has been added to the container.
            </summary>
        </member>
        <member name="M:java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent)">
            <summary>
            Invoked when a component has been removed from the container.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.#ctor(java.awt.Component,System.Int32)">
            <summary>
            Constructs a <code>FocusEvent</code> object and identifies it
            as a permanent change in focus.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.#ctor(java.awt.Component,System.Int32,System.Boolean)">
            <summary>
            Constructs a <code>FocusEvent</code> object and identifies
            whether or not the change is temporary.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.#ctor(java.awt.Component,System.Int32,System.Boolean,java.awt.Component)">
            <summary>
            Constructs a <code>FocusEvent</code> object with the
            specified temporary state and opposite <code>Component</code>.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.getOppositeComponent">
            <summary>
            Returns the other Component involved in this focus change.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.isTemporary">
            <summary>
            Identifies the focus change event as temporary or permanent.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusListener.focusGained(java.awt.event.FocusEvent)">
            <summary>
            Invoked when a component gains the keyboard focus.
            </summary>
        </member>
        <member name="M:java.awt.event.FocusListener.focusLost(java.awt.event.FocusEvent)">
            <summary>
            Invoked when a component loses the keyboard focus.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyBoundsListener.ancestorMoved(java.awt.event.HierarchyEvent)">
            <summary>
            Called when an ancestor of the source is moved.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyBoundsListener.ancestorResized(java.awt.event.HierarchyEvent)">
            <summary>
            Called when an ancestor of the source is resized.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.#ctor(java.awt.Component,System.Int32,java.awt.Component,java.awt.Container)">
            <summary>
            Constructs an <code>HierarchyEvent</code> object to identify a
            change in the <code>Component</code> hierarchy.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.#ctor(java.awt.Component,System.Int32,java.awt.Component,java.awt.Container,System.Int64)">
            <summary>
            Constructs an <code>HierarchyEvent</code> object to identify
            a change in the <code>Component</code> hierarchy.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.getChanged">
            <summary>
            Returns the Component at the top of the hierarchy which was
            changed.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.getChangedParent">
            <summary>
            Returns the parent of the Component returned by <code>
            getChanged()</code>.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.getChangeFlags">
            <summary>
            Returns a bitmask which indicates the type(s) of
            HIERARCHY_CHANGED events represented in this event object.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.getComponent">
            <summary>
            Returns the originator of the event.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.HierarchyListener.hierarchyChanged(java.awt.event.HierarchyEvent)">
            <summary>
            Called when the hierarchy has been changed.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.consume">
            <summary>
            Consumes this event so that it will not be processed
            in the default manner by the source which originated it.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.getModifiers">
            <summary>
            Returns the modifier mask for this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.getModifiersEx">
            <summary>
            Returns the extended modifier mask for this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.getModifiersExText(System.Int32)">
            <summary>
            Returns a String describing the extended modifier keys and
            mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift".
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.getWhen">
            <summary>
            Returns the timestamp of when this event occurred.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isAltDown">
            <summary>
            Returns whether or not the Alt modifier is down on this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isAltGraphDown">
            <summary>
            Returns whether or not the AltGraph modifier is down on this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isConsumed">
            <summary>
            Returns whether or not this event has been consumed.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isControlDown">
            <summary>
            Returns whether or not the Control modifier is down on this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isMetaDown">
            <summary>
            Returns whether or not the Meta modifier is down on this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputEvent.isShiftDown">
            <summary>
            Returns whether or not the Shift modifier is down on this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.#ctor(java.awt.Component,System.Int32,java.text.AttributedCharacterIterator,System.Int32,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)">
            <summary>
            Constructs an <code>InputMethodEvent</code> with the specified
            source component, type, text, caret, and visiblePosition.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.#ctor(java.awt.Component,System.Int32,System.Int64,java.text.AttributedCharacterIterator,System.Int32,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)">
            <summary>
            Constructs an <code>InputMethodEvent</code> with the specified
            source component, type, time, text, caret, and visiblePosition.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.#ctor(java.awt.Component,System.Int32,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)">
            <summary>
            Constructs an <code>InputMethodEvent</code> with the
            specified source component, type, caret, and visiblePosition.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.consume">
            <summary>
            Consumes this event so that it will not be processed
            in the default manner by the source which originated it.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.getCaret">
            <summary>
            Gets the caret.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.getCommittedCharacterCount">
            <summary>
            Gets the number of committed characters in the text.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.getText">
            <summary>
            Gets the combined committed and composed text.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.getVisiblePosition">
            <summary>
            Gets the position that's most important to be visible.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.getWhen">
            <summary>
            Returns the time stamp of when this event occurred.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.isConsumed">
            <summary>
            Returns whether or not this event has been consumed.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodListener.caretPositionChanged(java.awt.event.InputMethodEvent)">
            <summary>
            Invoked when the caret within composed text has changed.
            </summary>
        </member>
        <member name="M:java.awt.event.InputMethodListener.inputMethodTextChanged(java.awt.event.InputMethodEvent)">
            <summary>
            Invoked when the text entered through an input method has changed.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.#ctor(java.awt.Component,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a <code>MouseEvent</code> object with the
            specified source component,
            type, modifiers, coordinates, and click count.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.#ctor(java.awt.Component,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructs a <code>MouseEvent</code> object with the
            specified source component,
            type, modifiers, coordinates, and click count.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getButton">
            <summary>
            Returns which, if any, of the mouse buttons has changed state.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getClickCount">
            <summary>
            Returns the number of mouse clicks associated with this event.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getMouseModifiersText(System.Int32)">
            <summary>
            Returns a String describing the modifier keys and mouse buttons
            that were down during the event, such as "Shift", or "Ctrl+Shift".
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getPoint">
            <summary>
            Returns the x,y position of the event relative to the source component.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getX">
            <summary>
            Returns the horizontal x position of the event relative to the
            source component.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.getY">
            <summary>
            Returns the vertical y position of the event relative to the
            source component.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.isPopupTrigger">
            <summary>
            Returns whether or not this mouse event is the popup menu
            trigger event for the platform.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseEvent.translatePoint(System.Int32,System.Int32)">
            <summary>
            Translates the event's coordinates to a new position
            by adding specified <code>x</code> (horizontal) and <code>y</code>
            (vertical) offsets.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent)">
            <summary>
            Invoked when the mouse button has been clicked (pressed and released) on a component.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent)">
            <summary>
            Invoked when the mouse enters a component.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent)">
            <summary>
            Invoked when the mouse exits a component.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent)">
            <summary>
            Invoked when a mouse button has been pressed on a component.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent)">
            <summary>
            Invoked when a mouse button has been released on a component.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)">
            <summary>
            Invoked when a mouse button is pressed on a component and then
            dragged.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)">
            <summary>
            Invoked when the mouse cursor has been moved onto a component
            but no buttons have been pushed.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.#ctor(java.awt.Component,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a <code>MouseWheelEvent</code> object with the
            specified source component, type, modifiers, coordinates,
            scroll type, scroll amount, and wheel rotation.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.getScrollAmount">
            <summary>
            Returns the number of units that should be scrolled in response to this
            event.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.getScrollType">
            <summary>
            Returns the type of scrolling that should take place in response to this
            event.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.getUnitsToScroll">
            <summary>
            This is a convenience method to aid in the implementation of
            the common-case MouseWheelListener - to scroll a ScrollPane or
            JScrollPane by an amount which conforms to the platform settings.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.getWheelRotation">
            <summary>
            Returns the number of "clicks" the mouse wheel was rotated.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.MouseWheelListener.mouseWheelMoved(java.awt.event.MouseWheelEvent)">
            <summary>
            Invoked when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.#ctor(java.awt.Window,System.Int32)">
            <summary>
            Constructs a <code>WindowEvent</code> object.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.#ctor(java.awt.Window,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a <code>WindowEvent</code> object with the specified
            previous and new window states.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.#ctor(java.awt.Window,System.Int32,java.awt.Window)">
            <summary>
            Constructs a <code>WindowEvent</code> object with the
            specified opposite <code>Window</code>.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.#ctor(java.awt.Window,System.Int32,java.awt.Window,System.Int32,System.Int32)">
            <summary>
            Constructs a <code>WindowEvent</code> object.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.getNewState">
            <summary>
            For <code>WINDOW_STATE_CHANGED</code> events returns the
            new state of the window.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.getOldState">
            <summary>
            For <code>WINDOW_STATE_CHANGED</code> events returns the
            previous state of the window.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.getOppositeWindow">
            <summary>
            Returns the other Window involved in this focus or activation change.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.getWindow">
            <summary>
            Returns the originator of the event.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowEvent.paramString">
            <summary>
            Returns a parameter string identifying this event.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowFocusListener.windowGainedFocus(java.awt.event.WindowEvent)">
            <summary>
            Invoked when the Window is set to be the focused Window, which means
            that the Window, or one of its subcomponents, will receive keyboard
            events.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowFocusListener.windowLostFocus(java.awt.event.WindowEvent)">
            <summary>
            Invoked when the Window is no longer the focused Window, which means
            that keyboard events will no longer be delivered to the Window or any of
            its subcomponents.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent)">
            <summary>
            Invoked when the Window is set to be the active Window.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent)">
            <summary>
            Invoked when a window has been closed as the result
            of calling dispose on the window.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent)">
            <summary>
            Invoked when the user attempts to close the window
            from the window's system menu.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent)">
            <summary>
            Invoked when a Window is no longer the active Window.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent)">
            <summary>
            Invoked when a window is changed from a minimized
            to a normal state.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent)">
            <summary>
            Invoked when a window is changed from a normal to a
            minimized state.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent)">
            <summary>
            Invoked the first time a window is made visible.
            </summary>
        </member>
        <member name="M:java.awt.event.WindowStateListener.windowStateChanged(java.awt.event.WindowEvent)">
            <summary>
            Invoked when window state is changed.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)">
            <summary>
            Returns the Component that should receive the focus after aComponent.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)">
            <summary>
            Returns the Component that should receive the focus before aComponent.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getDefaultComponent(java.awt.Container)">
            <summary>
            Returns the default Component to focus.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getFirstComponent(java.awt.Container)">
            <summary>
            Returns the first Component in the traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getInitialComponent(java.awt.Window)">
            <summary>
            Returns the Component that should receive the focus when a Window is
            made visible for the first time.
            </summary>
        </member>
        <member name="M:java.awt.FocusTraversalPolicy.getLastComponent(java.awt.Container)">
            <summary>
            Returns the last Component in the traversal cycle.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.#ctor(java.awt.Font)">
            <summary>
            Creates a new <code>FontMetrics</code> object for finding out
            height and width information about the specified <code>Font</code>
            and specific character glyphs in that <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.bytesWidth(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Returns the total advance width for showing the specified array
            of bytes in this <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.charsWidth(System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns the total advance width for showing the specified array
            of characters in this <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.charWidth(System.Char)">
            <summary>
            Returns the advance width of the specified character in this
            <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.charWidth(System.Int32)">
            <summary>
            Returns the advance width of the specified character in this
            <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getAscent">
            <summary>
            Determines the <em>font ascent</em> of the <code>Font</code>
            described by this <code>FontMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getDescent">
            <summary>
            Determines the <em>font descent</em> of the <code>Font</code>
            described by this
            <code>FontMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getFont">
            <summary>
            Gets the <code>Font</code> described by this
            <code>FontMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getHeight">
            <summary>
            Gets the standard height of a line of text in this font.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getLeading">
            <summary>
            Determines the <em>standard leading</em> of the
            <code>Font</code> described by this <code>FontMetrics</code>
            object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getLineMetrics(System.Char[],System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the <A HREF="../../java/awt/font/LineMetrics.html" title="class in java.awt.font"><CODE>LineMetrics</CODE></A> object for the specified
            character array in the specified <A HREF="../../java/awt/Graphics.html" title="class in java.awt"><CODE>Graphics</CODE></A> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getLineMetrics(java.text.CharacterIterator,System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the <A HREF="../../java/awt/font/LineMetrics.html" title="class in java.awt.font"><CODE>LineMetrics</CODE></A> object for the specified
            <A HREF="../../java/text/CharacterIterator.html" title="interface in java.text"><CODE>CharacterIterator</CODE></A> in the specified <A HREF="../../java/awt/Graphics.html" title="class in java.awt"><CODE>Graphics</CODE></A>
            context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getLineMetrics(System.String,java.awt.Graphics)">
            <summary>
            Returns the <A HREF="../../java/awt/font/LineMetrics.html" title="class in java.awt.font"><CODE>LineMetrics</CODE></A> object for the specified
            <code>String</code> in the specified <A HREF="../../java/awt/Graphics.html" title="class in java.awt"><CODE>Graphics</CODE></A> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getLineMetrics(System.String,System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the <A HREF="../../java/awt/font/LineMetrics.html" title="class in java.awt.font"><CODE>LineMetrics</CODE></A> object for the specified
            <code>String</code> in the specified <A HREF="../../java/awt/Graphics.html" title="class in java.awt"><CODE>Graphics</CODE></A> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getMaxAdvance">
            <summary>
            Gets the maximum advance width of any character in this
            <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getMaxAscent">
            <summary>
            Determines the maximum ascent of the <code>Font</code>
            described by this <code>FontMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getMaxCharBounds(java.awt.Graphics)">
            <summary>
            Returns the bounds for the character with the maximum bounds
            in the specified <code>Graphics</code> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getMaxDecent">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1.1,
            replaced by <code>getMaxDescent()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getMaxDescent">
            <summary>
            Determines the maximum descent of the <code>Font</code>
            described by this <code>FontMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getStringBounds(System.Char[],System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the bounds of the specified array of characters
            in the specified <code>Graphics</code> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getStringBounds(java.text.CharacterIterator,System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the bounds of the characters indexed in the specified
            <code>CharacterIterator</code> in the
            specified <code>Graphics</code> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getStringBounds(System.String,java.awt.Graphics)">
            <summary>
            Returns the bounds of the specified <code>String</code> in the
            specified <code>Graphics</code> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getStringBounds(System.String,System.Int32,System.Int32,java.awt.Graphics)">
            <summary>
            Returns the bounds of the specified <code>String</code> in the
            specified <code>Graphics</code> context.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.getWidths">
            <summary>
            Gets the advance widths of the first 256 characters in the
            <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.hasUniformLineMetrics">
            <summary>
            Checks to see if the <code>Font</code> has uniform line metrics.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.stringWidth(System.String)">
            <summary>
            Returns the total advance width for showing the specified
            <code>String</code> in this <code>Font</code>.
            </summary>
        </member>
        <member name="M:java.awt.FontMetrics.ToString">
            <summary>
            Returns a representation of this <code>FontMetrics</code>
            object's values as a <code>String</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.#ctor">
            <summary>
            Constructs a new <code>FontRenderContext</code>
            object.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.#ctor(java.awt.geom.AffineTransform,System.Boolean,System.Boolean)">
            <summary>
            Constructs a <code>FontRenderContext</code> object from an
            optional <A HREF="../../../java/awt/geom/AffineTransform.html" title="class in java.awt.geom"><CODE>AffineTransform</CODE></A> and two <code>boolean</code>
            values that determine if the newly constructed object has
            anti-aliasing or fractional metrics.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.equals(java.awt.font.FontRenderContext)">
            <summary>
            Return true if rhs has the same transform, antialiasing,
            and fractional metrics values as this.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.Equals(System.Object)">
            <summary>
            Return true if obj is an instance of FontRenderContext and has the same
            transform, antialiasing, and fractional metrics values as this.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.getTransform">
            <summary>
            Gets the transform that is used to scale typographical points
            to pixels in this <code>FontRenderContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.GetHashCode">
            <summary>
            Return a hashcode for this FontRenderContext.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.isAntiAliased">
            <summary>
            Gets the text anti-aliasing mode used in this
            <code>FontRenderContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.FontRenderContext.usesFractionalMetrics">
            <summary>
            Gets the text fractional metrics mode requested by the application
            for use in this <code>FontRenderContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphJustificationInfo.#ctor(System.Single,System.Boolean,System.Int32,System.Single,System.Single,System.Boolean,System.Int32,System.Single,System.Single)">
            <summary>
            Constructs information about the justification properties of a
            glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.#ctor(System.Boolean,System.Single,System.Single,java.awt.geom.Rectangle2D,System.SByte)">
            <summary>
            Constructs a <code>GlyphMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.#ctor(System.Single,java.awt.geom.Rectangle2D,System.SByte)">
            <summary>
            Constructs a <code>GlyphMetrics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getAdvance">
            <summary>
            Returns the advance of the glyph along the baseline (either
            horizontal or vertical).
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getAdvanceX">
            <summary>
            Returns the x-component of the advance of the glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getAdvanceY">
            <summary>
            Returns the y-component of the advance of the glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getBounds2D">
            <summary>
            Returns the bounds of the glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getLSB">
            <summary>
            Returns the left (top) side bearing of the glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getRSB">
            <summary>
            Returns the right (bottom) side bearing of the glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.getType">
            <summary>
            Returns the raw glyph type code.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.isCombining">
            <summary>
            Returns <code>true</code> if this is a combining glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.isComponent">
            <summary>
            Returns <code>true</code> if this is a component glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.isLigature">
            <summary>
            Returns <code>true</code> if this is a ligature glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.isStandard">
            <summary>
            Returns <code>true</code> if this is a standard glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphMetrics.isWhitespace">
            <summary>
            Returns <code>true</code> if this is a whitespace glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.equals(java.awt.font.GlyphVector)">
            <summary>
            Tests if the specified <code>GlyphVector</code> exactly
            equals this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getFont">
            <summary>
            Returns the <code>Font</code> associated with this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getFontRenderContext">
            <summary>
            Returns the <A HREF="../../../java/awt/font/FontRenderContext.html" title="class in java.awt.font"><CODE>FontRenderContext</CODE></A> associated with this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphCharIndex(System.Int32)">
            <summary>
            Returns the character index of the specified glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphCharIndices(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the character indices of the specified glyphs.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphCode(System.Int32)">
            <summary>
            Returns the glyphcode of the specified glyph.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphCodes(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns an array of glyphcodes for the specified glyphs.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphJustificationInfo(System.Int32)">
            <summary>
            Returns the justification information for the glyph at
            the specified index into this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphLogicalBounds(System.Int32)">
            <summary>
            Returns the logical bounds of the specified glyph within this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphMetrics(System.Int32)">
            <summary>
            Returns the metrics of the glyph at the specified index into
            this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphOutline(System.Int32)">
            <summary>
            Returns a <code>Shape</code> whose interior corresponds to the
            visual representation of the specified glyph
            within this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphOutline(System.Int32,System.Single,System.Single)">
            <summary>
            Returns a <code>Shape</code> whose interior corresponds to the
            visual representation of the specified glyph
            within this <code>GlyphVector</code>, offset to x, y.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphPixelBounds(System.Int32,java.awt.font.FontRenderContext,System.Single,System.Single)">
            <summary>
            Returns the pixel bounds of the glyph at index when this
            <code>GlyphVector</code> is rendered in a <code>Graphics</code> with the
            given <code>FontRenderContext</code> at the given location.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphPosition(System.Int32)">
            <summary>
            Returns the position of the specified glyph relative to the
            origin of this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphPositions(System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns an array of glyph positions for the specified glyphs.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphTransform(System.Int32)">
            <summary>
            Returns the transform of the specified glyph within this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getGlyphVisualBounds(System.Int32)">
            <summary>
            Returns the visual bounds of the specified glyph within the
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getLayoutFlags">
            <summary>
            Returns flags describing the global state of the GlyphVector.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getLogicalBounds">
            <summary>
            Returns the logical bounds of this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getNumGlyphs">
            <summary>
            Returns the number of glyphs in this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getOutline">
            <summary>
            Returns a <code>Shape</code> whose interior corresponds to the
            visual representation of this <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getOutline(System.Single,System.Single)">
            <summary>
            Returns a <code>Shape</code> whose interior corresponds to the
            visual representation of this <code>GlyphVector</code> when
            rendered at x, y.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getPixelBounds(java.awt.font.FontRenderContext,System.Single,System.Single)">
            <summary>
            Returns the pixel bounds of this <code>GlyphVector</code> when
            rendered in a graphics with the given
            <code>FontRenderContext</code> at the given location.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.getVisualBounds">
            <summary>
            Returns the visual bounds of this <code>GlyphVector</code>
            The visual bounds is the bounding box of the outline of this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.performDefaultLayout">
            <summary>
            Assigns default positions to each glyph in this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.setGlyphPosition(System.Int32,java.awt.geom.Point2D)">
            <summary>
            Sets the position of the specified glyph within this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.GlyphVector.setGlyphTransform(System.Int32,java.awt.geom.AffineTransform)">
            <summary>
            Sets the transform of the specified glyph within this
            <code>GlyphVector</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getAscent">
            <summary>
            Returns the ascent of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getBaselineIndex">
            <summary>
            Returns the baseline index of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getBaselineOffsets">
            <summary>
            Returns the baseline offsets of the text,
            relative to the baseline of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getDescent">
            <summary>
            Returns the descent of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getHeight">
            <summary>
            Returns the height of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getLeading">
            <summary>
            Returns the leading of the text.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getNumChars">
            <summary>
            Returns the number of characters in the text whose
            metrics are encapsulated by this <code>LineMetrics</code>
            object.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getStrikethroughOffset">
            <summary>
            Returns the position of the strike-through line
            relative to the baseline.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getStrikethroughThickness">
            <summary>
            Returns the thickness of the strike-through line.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getUnderlineOffset">
            <summary>
            Returns the position of the underline relative to
            the baseline.
            </summary>
        </member>
        <member name="M:java.awt.font.LineMetrics.getUnderlineThickness">
            <summary>
            Returns the thickness of the underline.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.afterOffset(System.Int32)">
            <summary>
            Creates a <code>TextHitInfo</code> at the specified offset,
            associated with the character after the offset.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.beforeOffset(System.Int32)">
            <summary>
            Creates a <code>TextHitInfo</code> at the specified offset,
            associated with the character before the offset.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.Equals(System.Object)">
            <summary>
            Returns <code>true</code> if the specified <code>Object</code> is a
            <code>TextHitInfo</code> and equals this <code>TextHitInfo</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.equals(java.awt.font.TextHitInfo)">
            <summary>
            Returns <code>true</code> if the specified <code>TextHitInfo</code>
            has the same <code>charIndex</code> and <code>isLeadingEdge</code>
            as this <code>TextHitInfo</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.getCharIndex">
            <summary>
            Returns the index of the character hit.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.getInsertionIndex">
            <summary>
            Returns the insertion index.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.getOffsetHit(System.Int32)">
            <summary>
            Creates a <code>TextHitInfo</code> whose character index is offset
            by <code>delta</code> from the <code>charIndex</code> of this
            <code>TextHitInfo</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.getOtherHit">
            <summary>
            Creates a <code>TextHitInfo</code> on the other side of the
            insertion point.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.isLeadingEdge">
            <summary>
            Returns <code>true</code> if the leading edge of the character was
            hit.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.leading(System.Int32)">
            <summary>
            Creates a <code>TextHitInfo</code> on the leading edge of the
            character at the specified <code>charIndex</code>.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.ToString">
            <summary>
            Returns a <code>String</code> representing the hit for debugging
            use only.
            </summary>
        </member>
        <member name="M:java.awt.font.TextHitInfo.trailing(System.Int32)">
            <summary>
            Creates a hit on the trailing edge of the character at
            the specified <code>charIndex</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor">
            <summary>
            Constructs a new <code>AffineTransform</code> representing the
            Identity transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor(java.awt.geom.AffineTransform)">
            <summary>
            Constructs a new <code>AffineTransform</code> that is a copy of
            the specified <code>AffineTransform</code> object.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor(System.Double[])">
            <summary>
            Constructs a new <code>AffineTransform</code> from an array of
            double precision values representing either the 4 non-translation
            entries or the 6 specifiable entries of the 3x3 transformation
            matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new <code>AffineTransform</code> from 6 double
            precision values representing the 6 specifiable entries of the 3x3
            transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor(System.Single[])">
            <summary>
            Constructs a new <code>AffineTransform</code> from an array of
            floating point values representing either the 4 non-translation
            enries or the 6 specifiable entries of the 3x3 transformation
            matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new <code>AffineTransform</code> from 6 floating point
            values representing the 6 specifiable entries of the 3x3
            transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.clone">
            <summary>
            Returns a copy of this <code>AffineTransform</code> object.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)">
            <summary>
            Concatenates an <code>AffineTransform</code> <code>Tx</code> to
            this <code>AffineTransform</code> Cx in the most commonly useful
            way to provide a new user space
            that is mapped to the former user space by <code>Tx</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.createInverse">
            <summary>
            Returns an <code>AffineTransform</code> object representing the
            inverse transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)">
            <summary>
            Returns a new <A HREF="../../../java/awt/Shape.html" title="interface in java.awt"><CODE>Shape</CODE></A> object defined by the geometry of the
            specified <code>Shape</code> after it has been transformed by
            this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.deltaTransform(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of relative distance vectors by this
            transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Transforms the relative distance vector specified by
            <code>ptSrc</code> and stores the result in <code>ptDst</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.Equals(System.Object)">
            <summary>
            Returns <code>true</code> if this <code>AffineTransform</code>
            represents the same affine coordinate transform as the specified
            argument.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getDeterminant">
            <summary>
            Returns the determinant of the matrix representation of the transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getMatrix(System.Double[])">
            <summary>
            Retrieves the 6 specifiable values in the 3x3 affine transformation
            matrix and places them into an array of double precisions values.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getRotateInstance(System.Double)">
            <summary>
            Returns a transform representing a rotation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getRotateInstance(System.Double,System.Double,System.Double)">
            <summary>
            Returns a transform that rotates coordinates around an anchor point.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getScaleInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a scaling transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getScaleX">
            <summary>
            Returns the X coordinate scaling element (m00) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getScaleY">
            <summary>
            Returns the Y coordinate scaling element (m11) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getShearInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a shearing transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getShearX">
            <summary>
            Returns the X coordinate shearing element (m01) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getShearY">
            <summary>
            Returns the Y coordinate shearing element (m10) of the 3x3
            affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getTranslateInstance(System.Double,System.Double)">
            <summary>
            Returns a transform representing a translation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getTranslateX">
            <summary>
            Returns the X coordinate of the translation element (m02) of the
            3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getTranslateY">
            <summary>
            Returns the Y coordinate of the translation element (m12) of the
            3x3 affine transformation matrix.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.getType">
            <summary>
            Retrieves the flag bits describing the conversion properties of
            this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.GetHashCode">
            <summary>
            Returns the hashcode for this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.inverseTransform(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Inverse transforms an array of double precision coordinates by
            this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.inverseTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Inverse transforms the specified <code>ptSrc</code> and stores the
            result in <code>ptDst</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.isIdentity">
            <summary>
            Returns <code>true</code> if this <code>AffineTransform</code> is
            an identity transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.preConcatenate(java.awt.geom.AffineTransform)">
            <summary>
            Concatenates an <code>AffineTransform</code> <code>Tx</code> to
            this <code>AffineTransform</code> Cx
            in a less commonly used way such that <code>Tx</code> modifies the
            coordinate transformation relative to the absolute pixel
            space rather than relative to the existing user space.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.rotate(System.Double)">
            <summary>
            Concatenates this transform with a rotation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.rotate(System.Double,System.Double,System.Double)">
            <summary>
            Concatenates this transform with a transform that rotates
            coordinates around an anchor point.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.scale(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a scaling transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToIdentity">
            <summary>
            Resets this transform to the Identity transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToRotation(System.Double)">
            <summary>
            Sets this transform to a rotation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToRotation(System.Double,System.Double,System.Double)">
            <summary>
            Sets this transform to a translated rotation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToScale(System.Double,System.Double)">
            <summary>
            Sets this transform to a scaling transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToShear(System.Double,System.Double)">
            <summary>
            Sets this transform to a shearing transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setToTranslation(System.Double,System.Double)">
            <summary>
            Sets this transform to a translation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setTransform(java.awt.geom.AffineTransform)">
            <summary>
            Sets this transform to a copy of the transform in the specified
            <code>AffineTransform</code> object.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.setTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this transform to the matrix specified by the 6
            double precision values.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.shear(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a shearing transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.ToString">
            <summary>
            Returns a <code>String</code> that represents the value of this
            <A HREF="../../../java/lang/Object.html" title="class in java.lang"><CODE>Object</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of double precision coordinates by this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(System.Double[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of double precision coordinates by this transform
            and stores the results into an array of floats.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(System.Single[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of floating point coordinates by this transform
            and stores the results into an array of doubles.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of floating point coordinates by this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D[],System.Int32,java.awt.geom.Point2D[],System.Int32,System.Int32)">
            <summary>
            Transforms an array of point objects by this transform.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Transforms the specified <code>ptSrc</code> and stores the result
            in <code>ptDst</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.AffineTransform.translate(System.Double,System.Double)">
            <summary>
            Concatenates this transform with a translation transformation.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.getHeight">
            <summary>
            Returns the height of this <code>Dimension</code> in double
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.getWidth">
            <summary>
            Returns the width of this <code>Dimension</code> in double
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.setSize(java.awt.geom.Dimension2D)">
            <summary>
            Sets the size of this <code>Dimension2D</code> object to
            match the specified size.
            </summary>
        </member>
        <member name="M:java.awt.geom.Dimension2D.setSize(System.Double,System.Double)">
            <summary>
            Sets the size of this <code>Dimension</code> object to the
            specified width and height.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.clone">
            <summary>
            Creates a new object of the same class as this object.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.contains(System.Double,System.Double)">
            <summary>
            Tests if a specified coordinate is inside the boundary of this
            <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of this <code>Line2D</code> entirely contains
            the specified set of rectangular coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.contains(java.awt.geom.Point2D)">
            <summary>
            Tests if a given <code>Point2D</code> is inside the boundary of
            this <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.contains(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of this <code>Line2D</code> entirely contains
            the specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getBounds">
            <summary>
            Returns the bounding box of this <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getP1">
            <summary>
            Returns the starting <code>Point2D</code> of this
            <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getP2">
            <summary>
            Returns the end <code>Point2D</code> of this <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform)">
            <summary>
            Returns an iteration object that defines the boundary of this
            <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getPathIterator(java.awt.geom.AffineTransform,System.Double)">
            <summary>
            Returns an iteration object that defines the boundary of this
            flattened <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getX1">
            <summary>
            Returns the X coordinate of the start point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getX2">
            <summary>
            Returns the X coordinate of the end point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getY1">
            <summary>
            Returns the Y coordinate of the start point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.getY2">
            <summary>
            Returns the Y coordinate of the end point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if this <code>Line2D</code> intersects the interior of a
            specified set of rectangular coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.intersects(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if this <code>Line2D</code> intersects the interior of a
            specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.intersectsLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the line segment from (X1, Y1) to
            (X2, Y2) intersects this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.intersectsLine(java.awt.geom.Line2D)">
            <summary>
            Tests if the specified line segment intersects this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.linesIntersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the line segment from (X1, Y1) to
            (X2, Y2) intersects the line segment from (X3, Y3)
            to (X4, Y4).
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDist(System.Double,System.Double)">
            <summary>
            Returns the distance from a point to this line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDist(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance from a point to a line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDist(java.awt.geom.Point2D)">
            <summary>
            Returns the distance from a <code>Point2D</code> to this line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDistSq(System.Double,System.Double)">
            <summary>
            Returns the square of the distance from a point to this line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDistSq(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the square of the distance from a point to a line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptLineDistSq(java.awt.geom.Point2D)">
            <summary>
            Returns the square of the distance from a specified
            <code>Point2D</code> to this line.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDist(System.Double,System.Double)">
            <summary>
            Returns the distance from a point to this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDist(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance from a point to a line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDist(java.awt.geom.Point2D)">
            <summary>
            Returns the distance from a <code>Point2D</code> to this line
            segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDistSq(System.Double,System.Double)">
            <summary>
            Returns the square of the distance from a point to this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDistSq(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the square of the distance from a point to a line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.ptSegDistSq(java.awt.geom.Point2D)">
            <summary>
            Returns the square of the distance from a <code>Point2D</code> to
            this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.relativeCCW(System.Double,System.Double)">
            <summary>
            Returns an indicator of where the specified point
            (PX, PY) lies with respect to this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.relativeCCW(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns an indicator of where the specified point
            (PX, PY) lies with respect to the line segment from
            (X1, Y1) to (X2, Y2).
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.relativeCCW(java.awt.geom.Point2D)">
            <summary>
            Returns an indicator of where the specified <code>Point2D</code>
            lies with respect to this line segment.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.setLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location of the endpoints of this <code>Line2D</code> to
            the specified double coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.setLine(java.awt.geom.Line2D)">
            <summary>
            Sets the location of the endpoints of this <code>Line2D</code> to
            the same as those endpoints of the specified <code>Line2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Line2D.setLine(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Sets the location of the endpoints of this <code>Line2D</code> to
            the specified <code>Point2D</code> coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.PathIterator.currentSegment(System.Double[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            </summary>
        </member>
        <member name="M:java.awt.geom.PathIterator.currentSegment(System.Single[])">
            <summary>
            Returns the coordinates and type of the current path segment in
            the iteration.
            </summary>
        </member>
        <member name="M:java.awt.geom.PathIterator.getWindingRule">
            <summary>
            Returns the winding rule for determining the interior of the
            path.
            </summary>
        </member>
        <member name="M:java.awt.geom.PathIterator.isDone">
            <summary>
            Tests if the iteration is complete.
            </summary>
        </member>
        <member name="M:java.awt.geom.PathIterator.next">
            <summary>
            Moves the iterator to the next segment of the path forwards
            along the primary direction of traversal as long as there are
            more points in that direction.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.clone">
            <summary>
            Creates a new object of the same class and with the
            same contents as this object.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distance(System.Double,System.Double)">
            <summary>
            Returns the distance from this <code>Point2D</code> to
            a specified point.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the distance between two points.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distance(java.awt.geom.Point2D)">
            <summary>
            Returns the distance from this <code>Point2D</code> to a
            specified <code>Point2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distanceSq(System.Double,System.Double)">
            <summary>
            Returns the square of the distance from this
            <code>Point2D</code> to a specified point.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distanceSq(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.distanceSq(java.awt.geom.Point2D)">
            <summary>
            Returns the square of the distance from this
            <code>Point2D</code> to a specified <code>Point2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.Equals(System.Object)">
            <summary>
            Determines whether or not two points are equal.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.getX">
            <summary>
            Returns the X coordinate of this <code>Point2D</code> in
            <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.getY">
            <summary>
            Returns the Y coordinate of this <code>Point2D</code> in
            <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.GetHashCode">
            <summary>
            Returns the hashcode for this <code>Point2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.setLocation(System.Double,System.Double)">
            <summary>
            Sets the location of this <code>Point2D</code> to the
            specified <code>double</code> coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Point2D.setLocation(java.awt.geom.Point2D)">
            <summary>
            Sets the location of this <code>Point2D</code> to the same
            coordinates as the specified <code>Point2D</code> object.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.clone">
            <summary>
            Creates a new object of the same class and with the same
            contents as this object.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.contains(java.awt.geom.Point2D)">
            <summary>
            Tests if a specified <code>Point2D</code> is inside the boundary
            of the <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.contains(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of the <code>Shape</code> entirely contains the
            specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getBounds">
            <summary>
            Returns the bounding box of the <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getCenterX">
            <summary>
            Returns the X coordinate of the center of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getCenterY">
            <summary>
            Returns the Y coordinate of the center of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getFrame">
            <summary>
            Returns the framing <A HREF="../../../java/awt/geom/Rectangle2D.html" title="class in java.awt.geom"><CODE>Rectangle2D</CODE></A>
            that defines the overall shape of this object.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getHeight">
            <summary>
            Returns the height of the framing rectangle
            in <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getMaxX">
            <summary>
            Returns the largest X coordinate of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getMaxY">
            <summary>
            Returns the largest Y coordinate of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getMinX">
            <summary>
            Returns the smallest X coordinate of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getMinY">
            <summary>
            Returns the smallest Y coordinate of the framing
            rectangle of the <code>Shape</code> in <code>double</code>
            precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getPathIterator(java.awt.geom.AffineTransform,System.Double)">
            <summary>
            Returns an iterator object that iterates along the
            <code>Shape</code> object's boundary and provides access to a
            flattened view of the outline of the <code>Shape</code>
            object's geometry.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getWidth">
            <summary>
            Returns the width of the framing rectangle in
            <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getX">
            <summary>
            Returns the X coordinate of the upper left corner of
            the framing rectangle in <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.getY">
            <summary>
            Returns the Y coordinate of the upper left corner of
            the framing rectangle in <code>double</code> precision.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.intersects(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of the<code>Shape</code> intersects the
            interior of a specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.isEmpty">
            <summary>
            Determines whether the <code>RectangularShape</code> is empty.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrame(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location and size of the framing rectangle of this
            <code>Shape</code> to the specified rectangular values.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrame(java.awt.geom.Point2D,java.awt.geom.Dimension2D)">
            <summary>
            Sets the location and size of the framing rectangle of this
            <code>Shape</code> to the specified <A HREF="../../../java/awt/geom/Point2D.html" title="class in java.awt.geom"><CODE>Point2D</CODE></A> and
            <A HREF="../../../java/awt/geom/Dimension2D.html" title="class in java.awt.geom"><CODE>Dimension2D</CODE></A>, respectively.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrame(java.awt.geom.Rectangle2D)">
            <summary>
            Sets the framing rectangle of this <code>Shape</code> to
            be the specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrameFromCenter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the framing rectangle of this <code>Shape</code>
            based on the specified center point coordinates and corner point
            coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrameFromCenter(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Sets the framing rectangle of this <code>Shape</code> based on a
            specified center <code>Point2D</code> and corner
            <code>Point2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrameFromDiagonal(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the diagonal of the framing rectangle of this <code>Shape</code>
            based on the two specified coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.RectangularShape.setFrameFromDiagonal(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Sets the diagonal of the framing rectangle of this <code>Shape</code>
            based on two specified <code>Point2D</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.add(System.Double,System.Double)">
            <summary>
            Adds a point, specified by the double precision arguments
            <code>newx</code> and <code>newy</code>, to this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.add(java.awt.geom.Point2D)">
            <summary>
            Adds the <code>Point2D</code> object <code>pt</code> to this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.add(java.awt.geom.Rectangle2D)">
            <summary>
            Adds a <code>Rectangle2D</code> object to this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.contains(System.Double,System.Double)">
            <summary>
            Tests if a specified coordinate is inside the boundary of this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of this <code>Rectangle2D</code> entirely
            contains the specified set of rectangular coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.createIntersection(java.awt.geom.Rectangle2D)">
            <summary>
            Returns a new <code>Rectangle2D</code> object representing the
            intersection of this <code>Rectangle2D</code> with the specified
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.createUnion(java.awt.geom.Rectangle2D)">
            <summary>
            Returns a new <code>Rectangle2D</code> object representing the
            union of this <code>Rectangle2D</code> with the specified
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.Equals(System.Object)">
            <summary>
            Determines whether or not the specified <code>Object</code> is
            equal to this <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.getBounds2D">
            <summary>
            Returns the high precision bounding box of this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform)">
            <summary>
            Returns an iteration object that defines the boundary of this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.getPathIterator(java.awt.geom.AffineTransform,System.Double)">
            <summary>
            Returns an iteration object that defines the boundary of the
            flattened <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.GetHashCode">
            <summary>
            Returns the hashcode for this <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)">
            <summary>
            Intersects the pair of specified source <code>Rectangle2D</code>
            objects and puts the result into the specified destination
            <code>Rectangle2D</code> object.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of this <code>Rectangle2D</code>
            intersects the interior of a specified set of rectangular
            coordinates.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.intersectsLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the specified line segment intersects the interior of this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.intersectsLine(java.awt.geom.Line2D)">
            <summary>
            Tests if the specified line segment intersects the interior of this
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.outcode(System.Double,System.Double)">
            <summary>
            Determines where the specified coordinates lie with respect
            to this <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.outcode(java.awt.geom.Point2D)">
            <summary>
            Determines where the specified <A HREF="../../../java/awt/geom/Point2D.html" title="class in java.awt.geom"><CODE>Point2D</CODE></A> lies with
            respect to this <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.setFrame(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location and size of the outer bounds of this
            <code>Rectangle2D</code> to the specified rectangular values.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.setRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the location and size of this <code>Rectangle2D</code>
            to the specified double values.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.setRect(java.awt.geom.Rectangle2D)">
            <summary>
            Sets this <code>Rectangle2D</code> to be the same as the specified
            <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.geom.Rectangle2D.union(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)">
            <summary>
            Unions the pair of source <code>Rectangle2D</code> objects
            and puts the result into the specified destination
            <code>Rectangle2D</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.#ctor">
            <summary>
            Constructs a new <code>Graphics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.clearRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the specified rectangle by filling it with the background
            color of the current drawing surface.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.clipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Intersects the current clip with the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.copyArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies an area of the component by a distance specified by
            <code>dx</code> and <code>dy</code>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.create">
            <summary>
            Creates a new <code>Graphics</code> object that is
            a copy of this <code>Graphics</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <code>Graphics</code> object based on this
            <code>Graphics</code> object, but with a new translation and clip area.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.dispose">
            <summary>
            Disposes of this graphics context and releases
            any system resources that it is using.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.draw3DRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws a 3-D highlighted outline of the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the outline of a circular or elliptical arc
            covering the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawBytes(System.SByte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the text given by the specified sbyte array, using this
            graphics context's current font and color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawChars(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the text given by the specified character array, using this
            graphics context's current font and color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,java.awt.Color,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified image as is currently available.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified image as is currently available.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Color,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified image as has already been scaled
            to fit inside the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified image as has already been scaled
            to fit inside the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Color,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified area of the specified image as is
            currently available, scaling it on the fly to fit inside the
            specified area of the destination drawable surface.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawImage(java.awt.Image,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.image.ImageObserver)">
            <summary>
            Draws as much of the specified area of the specified image as is
            currently available, scaling it on the fly to fit inside the
            specified area of the destination drawable surface.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line, using the current color, between the points
            <code>(x1, y1)</code> and <code>(x2, y2)</code>
            in this graphics context's coordinate system.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the outline of an oval.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawPolygon(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Draws a closed polygon defined by
            arrays of <i>x</i> and <i>y</i> coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawPolygon(java.awt.Polygon)">
            <summary>
            Draws the outline of a polygon defined by the specified
            <code>Polygon</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawPolyline(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Draws a sequence of connected lines defined by
            arrays of <i>x</i> and <i>y</i> coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the outline of the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an outlined round-cornered rectangle using this graphics
            context's current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawString(java.text.AttributedCharacterIterator,System.Int32,System.Int32)">
            <summary>
            Draws the text given by the specified iterator, using this
            graphics context's current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.drawString(System.String,System.Int32,System.Int32)">
            <summary>
            Draws the text given by the specified string, using this
            graphics context's current font and color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fill3DRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints a 3-D highlighted rectangle filled with the current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a circular or elliptical arc covering the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillOval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an oval bounded by the specified rectangle with the
            current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillPolygon(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Fills a closed polygon defined by
            arrays of <i>x</i> and <i>y</i> coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillPolygon(java.awt.Polygon)">
            <summary>
            Fills the polygon defined by the specified Polygon object with
            the graphics context's current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.fillRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the specified rounded corner rectangle with the current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.finalize">
            <summary>
            Disposes of this graphics context once it is no longer referenced.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getClip">
            <summary>
            Gets the current clipping area.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getClipBounds">
            <summary>
            Returns the bounding rectangle of the current clipping area.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getClipBounds(java.awt.Rectangle)">
            <summary>
            Returns the bounding rectangle of the current clipping area.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getClipRect">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getClipBounds()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getColor">
            <summary>
            Gets this graphics context's current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getFont">
            <summary>
            Gets the current font.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getFontMetrics">
            <summary>
            Gets the font metrics of the current font.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.getFontMetrics(java.awt.Font)">
            <summary>
            Gets the font metrics for the specified font.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.hitClip(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the specified rectangular area might intersect
            the current clipping area.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setClip(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the current clip to the rectangle specified by the given
            coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setClip(java.awt.Shape)">
            <summary>
            Sets the current clipping area to an arbitrary clip shape.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setColor(java.awt.Color)">
            <summary>
            Sets this graphics context's current color to the specified
            color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setFont(java.awt.Font)">
            <summary>
            Sets this graphics context's font to the specified font.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setPaintMode">
            <summary>
            Sets the paint mode of this graphics context to overwrite the
            destination with this graphics context's current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.setXORMode(java.awt.Color)">
            <summary>
            Sets the paint mode of this graphics context to alternate between
            this graphics context's current color and the new specified color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.ToString">
            <summary>
            Returns a <code>String</code> object representing this
            <code>Graphics</code> object's value.
            </summary>
        </member>
        <member name="M:java.awt.Graphics.translate(System.Int32,System.Int32)">
            <summary>
            Translates the origin of the graphics context to the point
            (<i>x</i>, <i>y</i>) in the current coordinate system.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.#ctor">
            <summary>
            Constructs a new <code>Graphics2D</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.addRenderingHints(java.util.Map)">
            <summary>
            Sets the values of an arbitrary number of preferences for the
            rendering algorithms.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.clip(java.awt.Shape)">
            <summary>
            Intersects the current <code>Clip</code> with the interior of the
            specified <code>Shape</code> and sets the <code>Clip</code> to the
            resulting intersection.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.draw(java.awt.Shape)">
            <summary>
            Strokes the outline of a <code>Shape</code> using the settings of the
            current <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.draw3DRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws a 3-D highlighted outline of the specified rectangle.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawGlyphVector(java.awt.font.GlyphVector,System.Single,System.Single)">
            <summary>
            Renders the text of the specified
            <A HREF="../../java/awt/font/GlyphVector.html" title="class in java.awt.font"><CODE>GlyphVector</CODE></A> using
            the <code>Graphics2D</code> context's rendering attributes.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,System.Int32,System.Int32)">
            <summary>
            Renders a <code>BufferedImage</code> that is
            filtered with a
            <A HREF="../../java/awt/image/BufferedImageOp.html" title="interface in java.awt.image"><CODE>BufferedImageOp</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)">
            <summary>
            Renders an image, applying a transform from image space into user space
            before drawing.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)">
            <summary>
            Renders a
            <A HREF="../../java/awt/image/renderable/RenderableImage.html" title="interface in java.awt.image.renderable"><CODE>RenderableImage</CODE></A>,
            applying a transform from image space into user space before drawing.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)">
            <summary>
            Renders a <A HREF="../../java/awt/image/RenderedImage.html" title="interface in java.awt.image"><CODE>RenderedImage</CODE></A>,
            applying a transform from image
            space into user space before drawing.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,System.Single,System.Single)">
            <summary>
            Renders the text of the specified iterator, using the
            <code>Graphics2D</code> context's current <code>Paint</code>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawString(java.text.AttributedCharacterIterator,System.Int32,System.Int32)">
            <summary>
            Renders the text of the specified iterator, using the
            <code>Graphics2D</code> context's current <code>Paint</code>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawString(System.String,System.Single,System.Single)">
            <summary>
            Renders the text specified by the specified <code>String</code>,
            using the current text attribute state in the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.drawString(System.String,System.Int32,System.Int32)">
            <summary>
            Renders the text of the specified <code>String</code>, using the
            current text attribute state in the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.fill(java.awt.Shape)">
            <summary>
            Fills the interior of a <code>Shape</code> using the settings of the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.fill3DRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paints a 3-D highlighted rectangle filled with the current color.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getBackground">
            <summary>
            Returns the background color used for clearing a region.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getComposite">
            <summary>
            Returns the current <code>Composite</code> in the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getDeviceConfiguration">
            <summary>
            Returns the device configuration associated with this
            <code>Graphics2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getFontRenderContext">
            <summary>
            Get the rendering context of the <code>Font</code> within this
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getPaint">
            <summary>
            Returns the current <code>Paint</code> of the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getRenderingHint(java.awt.RenderingHints.Key)">
            <summary>
            Returns the value of a single preference for the rendering algorithms.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getRenderingHints">
            <summary>
            Gets the preferences for the rendering algorithms.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getStroke">
            <summary>
            Returns the current <code>Stroke</code> in the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.getTransform">
            <summary>
            Returns a copy of the current <code>Transform</code> in the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.hit(java.awt.Rectangle,java.awt.Shape,System.Boolean)">
            <summary>
            Checks whether or not the specified <code>Shape</code> intersects
            the specified <A HREF="../../java/awt/Rectangle.html" title="class in java.awt"><CODE>Rectangle</CODE></A>, which is in device
            space.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.rotate(System.Double)">
            <summary>
            Concatenates the current <code>Graphics2D</code>
            <code>Transform</code> with a rotation transform.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.rotate(System.Double,System.Double,System.Double)">
            <summary>
            Concatenates the current <code>Graphics2D</code>
            <code>Transform</code> with a translated rotation
            transform.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.scale(System.Double,System.Double)">
            <summary>
            Concatenates the current <code>Graphics2D</code>
            <code>Transform</code> with a scaling transformation
            Subsequent rendering is resized according to the specified scaling
            factors relative to the previous scaling.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setBackground(java.awt.Color)">
            <summary>
            Sets the background color for the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setComposite(java.awt.Composite)">
            <summary>
            Sets the <code>Composite</code> for the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setPaint(java.awt.Paint)">
            <summary>
            Sets the <code>Paint</code> attribute for the
            <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setRenderingHint(java.awt.RenderingHints.Key,System.Object)">
            <summary>
            Sets the value of a single preference for the rendering algorithms.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setRenderingHints(java.util.Map)">
            <summary>
            Replaces the values of all preferences for the rendering
            algorithms with the specified <code>hints</code>.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setStroke(java.awt.Stroke)">
            <summary>
            Sets the <code>Stroke</code> for the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.setTransform(java.awt.geom.AffineTransform)">
            <summary>
            Overwrites the Transform in the <code>Graphics2D</code> context.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.shear(System.Double,System.Double)">
            <summary>
            Concatenates the current <code>Graphics2D</code>
            <code>Transform</code> with a shearing transform.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)">
            <summary>
            Composes an <code>AffineTransform</code> object with the
            <code>Transform</code> in this <code>Graphics2D</code> according
            to the rule last-specified-first-applied.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.translate(System.Double,System.Double)">
            <summary>
            Concatenates the current
            <code>Graphics2D</code> <code>Transform</code>
            with a translation transform.
            </summary>
        </member>
        <member name="M:java.awt.Graphics2D.translate(System.Int32,System.Int32)">
            <summary>
            Translates the origin of the <code>Graphics2D</code> context to the
            point (<i>x</i>, <i>y</i>) in the current coordinate system.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfigTemplate.#ctor">
            <summary>
            This class is an abstract class so only subclasses can be
            instantiated.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfigTemplate.getBestConfiguration(java.awt.GraphicsConfiguration[])">
            <summary>
            Returns the "best" configuration possible that passes the
            criteria defined in the <code>GraphicsConfigTemplate</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfigTemplate.isGraphicsConfigSupported(java.awt.GraphicsConfiguration)">
            <summary>
            Returns a <code>boolean</code> indicating whether or
            not the specified <code>GraphicsConfiguration</code> can be
            used to create a drawing surface that supports the indicated
            features.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.createCompatibleImage(System.Int32,System.Int32)">
            <summary>
            Returns a <A HREF="../../java/awt/image/BufferedImage.html" title="class in java.awt.image"><CODE>BufferedImage</CODE></A> with a data layout and color model
            compatible with this <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.createCompatibleImage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <code>BufferedImage</code> that supports the specified
            transparency and has a data layout and color model
            compatible with this <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.createCompatibleVolatileImage(System.Int32,System.Int32)">
            <summary>
            Returns a <A HREF="../../java/awt/image/VolatileImage.html" title="class in java.awt.image"><CODE>VolatileImage</CODE></A> with a data layout and color model
            compatible with this <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.createCompatibleVolatileImage(System.Int32,System.Int32,java.awt.ImageCapabilities)">
            <summary>
            Returns a <A HREF="../../java/awt/image/VolatileImage.html" title="class in java.awt.image"><CODE>VolatileImage</CODE></A> with a data layout and color model
            compatible with this <code>GraphicsConfiguration</code>, using
            the specified image capabilities.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getBounds">
            <summary>
            Returns the bounds of the <code>GraphicsConfiguration</code>
            in the device coordinates.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getBufferCapabilities">
            <summary>
            Returns the buffering capabilities of this
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getColorModel">
            <summary>
            Returns the <A HREF="../../java/awt/image/ColorModel.html" title="class in java.awt.image"><CODE>ColorModel</CODE></A> associated with this
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getColorModel(System.Int32)">
            <summary>
            Returns the <code>ColorModel</code> associated with this
            <code>GraphicsConfiguration</code> that supports the specified
            transparency.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getDefaultTransform">
            <summary>
            Returns the default <A HREF="../../java/awt/geom/AffineTransform.html" title="class in java.awt.geom"><CODE>AffineTransform</CODE></A> for this
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getDevice">
            <summary>
            Returns the <A HREF="../../java/awt/GraphicsDevice.html" title="class in java.awt"><CODE>GraphicsDevice</CODE></A> associated with this
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getImageCapabilities">
            <summary>
            Returns the image capabilities of this
            <code>GraphicsConfiguration</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsConfiguration.getNormalizingTransform">
            <summary>
            Returns a <code>AffineTransform</code> that can be concatenated
            with the default <code>AffineTransform</code>
            of a <code>GraphicsConfiguration</code> so that 72 units in user
            space equals 1 inch in device space.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.#ctor">
            <summary>
            This is an abstract class that cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getAvailableAcceleratedMemory">
            <summary>
            This method returns the number of bytes available in
            accelerated memory on this device.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)">
            <summary>
            Returns the "best" configuration possible that passes the
            criteria defined in the <A HREF="../../java/awt/GraphicsConfigTemplate.html" title="class in java.awt"><CODE>GraphicsConfigTemplate</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getConfigurations">
            <summary>
            Returns all of the <code>GraphicsConfiguration</code>
            objects associated with this <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getDefaultConfiguration">
            <summary>
            Returns the default <code>GraphicsConfiguration</code>
            associated with this <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getDisplayMode">
            <summary>
            Returns the current display mode of this
            <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getDisplayModes">
            <summary>
            Returns all display modes available for this
            <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getFullScreenWindow">
            <summary>
            Returns the <code>Window</code> object representing the
            full-screen window if the device is in full-screen mode.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getIDstring">
            <summary>
            Returns the identification string associated with this
            <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.getType">
            <summary>
            Returns the type of this <code>GraphicsDevice</code>.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.isDisplayChangeSupported">
            <summary>
            Returns <code>true</code> if this <code>GraphicsDevice</code>
            supports low-level display changes.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.isFullScreenSupported">
            <summary>
            Returns <code>true</code> if this <code>GraphicsDevice</code>
            supports full-screen exclusive mode.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.setDisplayMode(java.awt.DisplayMode)">
            <summary>
            Sets the display mode of this graphics device.
            </summary>
        </member>
        <member name="M:java.awt.GraphicsDevice.setFullScreenWindow(java.awt.Window)">
            <summary>
            Enter full-screen mode, or return to windowed mode.
            </summary>
        </member>
        <member name="M:java.awt.ImageCapabilities.#ctor(System.Boolean)">
            <summary>
            Creates a new object for specifying image capabilities.
            </summary>
        </member>
        <member name="M:java.awt.ImageCapabilities.clone">
            <summary>
            Creates and returns a copy of this object.
            </summary>
        </member>
        <member name="M:java.awt.ImageCapabilities.isAccelerated">
            <summary>
            Returns <code>true</code> if the object whose capabilities are
            encapsulated in this <code>ImageCapabilities</code> can be or is
            accelerated.
            </summary>
        </member>
        <member name="M:java.awt.ImageCapabilities.isTrueVolatile">
            <summary>
            Returns <code>true</code> if the <code>VolatileImage</code>
            described by this <code>ImageCapabilities</code> can lose
            its surfaces.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.#ctor(java.awt.image.ColorModel,java.awt.image.WritableRaster,System.Boolean,java.util.Hashtable)">
            <summary>
            Constructs a new <code>BufferedImage</code> with a specified
            <code>ColorModel</code> and <code>Raster</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a <code>BufferedImage</code> of one of the predefined
            image types.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.#ctor(System.Int32,System.Int32,System.Int32,java.awt.image.IndexColorModel)">
            <summary>
            Constructs a <code>BufferedImage</code> of one of the predefined
            image types:
            TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.addTileObserver(java.awt.image.TileObserver)">
            <summary>
            Adds a tile observer.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.coerceData(System.Boolean)">
            <summary>
            Forces the data to match the state specified in the
            <code>isAlphaPremultiplied</code> variable.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.copyData(java.awt.image.WritableRaster)">
            <summary>
            Computes an arbitrary rectangular region of the
            <code>BufferedImage</code> and copies it into a specified
            <code>WritableRaster</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.createGraphics">
            <summary>
            Creates a <code>Graphics2D</code>, which can be used to draw into
            this <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.flush">
            <summary>
            Flushes all resources being used to cache optimization information.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getAlphaRaster">
            <summary>
            Returns a <code>WritableRaster</code> representing the alpha
            channel for <code>BufferedImage</code> objects
            with <code>ColorModel</code> objects that support a separate
            spatial alpha channel, such as <code>ComponentColorModel</code> and
            <code>DirectColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getColorModel">
            <summary>
            Returns the <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getData">
            <summary>
            Returns the image as one large tile.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getData(java.awt.Rectangle)">
            <summary>
            Computes and returns an arbitrary region of the
            <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getGraphics">
            <summary>
            This method returns a <A HREF="../../../java/awt/Graphics2D.html" title="class in java.awt"><CODE>Graphics2D</CODE></A>, but is here
            for backwards compatibility.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getHeight">
            <summary>
            Returns the height of the <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getHeight(java.awt.image.ImageObserver)">
            <summary>
            Returns the height of the <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getMinTileX">
            <summary>
            Returns the minimum tile index in the x direction.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getMinTileY">
            <summary>
            Returns the minimum tile index in the y direction.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getMinX">
            <summary>
            Returns the minimum x coordinate of this
            <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getMinY">
            <summary>
            Returns the minimum y coordinate of this
            <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getNumXTiles">
            <summary>
            Returns the number of tiles in the x direction.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getNumYTiles">
            <summary>
            Returns the number of tiles in the y direction.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getProperty(System.String)">
            <summary>
            Returns a property of the image by name.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getProperty(System.String,java.awt.image.ImageObserver)">
            <summary>
            Returns a property of the image by name.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getPropertyNames">
            <summary>
            Returns an array of names recognized by
            <A HREF="../../../java/awt/image/BufferedImage.html#getProperty(java.lang.String)"><CODE>getProperty(String)</CODE></A>
            or <code>null</code>, if no property names are recognized.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getRaster">
            <summary>
            Returns the <A HREF="../../../java/awt/image/WritableRaster.html" title="class in java.awt.image"><CODE>WritableRaster</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getRGB(System.Int32,System.Int32)">
            <summary>
            Returns an integer pixel in the default RGB color model
            (TYPE_INT_ARGB) and default sRGB colorspace.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getRGB(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Returns an array of integer pixels in the default RGB color model
            (TYPE_INT_ARGB) and default sRGB color space,
            from a portion of the image data.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getSampleModel">
            <summary>
            Returns the <code>SampleModel</code> associated with this
            <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getSource">
            <summary>
            Returns the object that produces the pixels for the image.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getSources">
            <summary>
            Returns a <A HREF="../../../java/util/Vector.html" title="class in java.util"><CODE>Vector</CODE></A> of <A HREF="../../../java/awt/image/RenderedImage.html" title="interface in java.awt.image"><CODE>RenderedImage</CODE></A> objects that are
            the immediate sources, not the sources of these immediate sources,
            of image data for this <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getSubimage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a subimage defined by a specified rectangular region.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getTile(System.Int32,System.Int32)">
            <summary>
            Returns tile (<code>tileX</code>, <code>tileY</code>).
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getTileGridXOffset">
            <summary>
            Returns the x offset of the tile grid relative to the origin,
            For example, the x coordinate of the location of tile
            (0, 0).
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getTileGridYOffset">
            <summary>
            Returns the y offset of the tile grid relative to the origin,
            For example, the y coordinate of the location of tile
            (0, 0).
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getTileHeight">
            <summary>
            Returns the tile height in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getTileWidth">
            <summary>
            Returns the tile width in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getType">
            <summary>
            Returns the image type.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getWidth">
            <summary>
            Returns the width of the <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getWidth(java.awt.image.ImageObserver)">
            <summary>
            Returns the width of the <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getWritableTile(System.Int32,System.Int32)">
            <summary>
            Checks out a tile for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.getWritableTileIndices">
            <summary>
            Returns an array of <A HREF="../../../java/awt/Point.html" title="class in java.awt"><CODE>Point</CODE></A> objects indicating which tiles
            are checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.hasTileWriters">
            <summary>
            Returns whether or not any tile is checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.isAlphaPremultiplied">
            <summary>
            Returns whether or not the alpha has been premultiplied.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.isTileWritable(System.Int32,System.Int32)">
            <summary>
            Returns whether or not a tile is currently checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.releaseWritableTile(System.Int32,System.Int32)">
            <summary>
            Relinquishes permission to write to a tile.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.removeTileObserver(java.awt.image.TileObserver)">
            <summary>
            Removes a tile observer.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.setData(java.awt.image.Raster)">
            <summary>
            Sets a rectangular region of the image to the contents of the
            specified <code>Raster</code> <code>r</code>, which is
            assumed to be in the same coordinate space as the
            <code>BufferedImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.setRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a pixel in this <code>BufferedImage</code> to the specified
            RGB value.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.setRGB(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sets an array of integer pixels in the default RGB color model
            (TYPE_INT_ARGB) and default sRGB color space,
            into a portion of the image data.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImage.ToString">
            <summary>
            Returns a <code>String</code> representation of this
            <code>BufferedImage</code> object and its values.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImageOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)">
            <summary>
            Creates a zeroed destination image with the correct size and number of
            bands.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImageOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)">
            <summary>
            Performs a single-input/single-output operation on a
            <CODE>BufferedImage</CODE>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImageOp.getBounds2D(java.awt.image.BufferedImage)">
            <summary>
            Returns the bounding box of the filtered destination image.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImageOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)">
            <summary>
            Returns the location of the corresponding destination point given a
            point in the source image.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferedImageOp.getRenderingHints">
            <summary>
            Returns the rendering hints for this operation.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.contentsLost">
            <summary>
            Returns whether the drawing buffer was lost since the last call to
            <code>getDrawGraphics</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.contentsRestored">
            <summary>
            Returns whether the drawing buffer was recently restored from a lost
            state and reinitialized to the default background color (white).
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.getCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.getDrawGraphics">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.image.BufferStrategy.show">
            <summary>
            Makes the next available buffer visible by either copying the memory
            (blitting) or changing the display pointer (flipping).
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.#ctor(System.Int32)">
            <summary>
            Constructs a <code>ColorModel</code> that translates pixels of the
            specified number of bits to color/alpha components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.#ctor(System.Int32,System.Int32[],java.awt.color.ColorSpace,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a <code>ColorModel</code> that translates pixel values
            to color/alpha components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.coerceData(java.awt.image.WritableRaster,System.Boolean)">
            <summary>
            Forces the raster data to match the state specified in the
            <code>isAlphaPremultiplied</code> variable, assuming the data is
            currently correctly described by this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.createCompatibleSampleModel(System.Int32,System.Int32)">
            <summary>
            Creates a <code>SampleModel</code> with the specified width and
            height that has a data layout compatible with this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.createCompatibleWritableRaster(System.Int32,System.Int32)">
            <summary>
            Creates a <code>WritableRaster</code> with the specified width and
            height that has a data layout (<code>SampleModel</code>) compatible
            with this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.Equals(System.Object)">
            <summary>
            Tests if the specified <code>Object</code> is an instance of
            <code>ColorModel</code> and if it equals this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.finalize">
            <summary>
            Disposes of system resources associated with this
            <code>ColorModel</code> once this <code>ColorModel</code> is no
            longer referenced.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getAlpha(System.Int32)">
            <summary>
            Returns the alpha component for the specified pixel, scaled
            from 0 to 255.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getAlpha(System.Object)">
            <summary>
            Returns the alpha component for the specified pixel, scaled
            from 0 to 255.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getAlphaRaster(java.awt.image.WritableRaster)">
            <summary>
            Returns a <code>Raster</code> representing the alpha channel of an
            image, extracted from the input <code>Raster</code>, provided that
            pixel values of this <code>ColorModel</code> represent color and
            alpha information as separate spatial bands (e.g.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getBlue(System.Int32)">
            <summary>
            Returns the blue color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getBlue(System.Object)">
            <summary>
            Returns the blue color component for the specified pixel, scaled
            from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getColorSpace">
            <summary>
            Returns the <code>ColorSpace</code> associated with this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getComponents(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Returns an array of unnormalized color/alpha components given a pixel
            in this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getComponents(System.Object,System.Int32[],System.Int32)">
            <summary>
            Returns an array of unnormalized color/alpha components given a pixel
            in this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getComponentSize">
            <summary>
            Returns an array of the number of bits per color/alpha component.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getComponentSize(System.Int32)">
            <summary>
            Returns the number of bits for the specified color/alpha component.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getDataElement(System.Single[],System.Int32)">
            <summary>
            Returns a pixel value represented as an <code>int</code> in this
            <code>ColorModel</code>, given an array of normalized color/alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getDataElement(System.Int32[],System.Int32)">
            <summary>
            Returns a pixel value represented as an <code>int</code> in this
            <code>ColorModel</code>, given an array of unnormalized color/alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getDataElements(System.Single[],System.Int32,System.Object)">
            <summary>
            Returns a data element array representation of a pixel in this
            <code>ColorModel</code>, given an array of normalized color/alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getDataElements(System.Int32[],System.Int32,System.Object)">
            <summary>
            Returns a data element array representation of a pixel in this
            <code>ColorModel</code>, given an array of unnormalized color/alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getDataElements(System.Int32,System.Object)">
            <summary>
            Returns a data element array representation of a pixel in this
            <code>ColorModel</code>, given an integer pixel representation in
            the default RGB color model.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getGreen(System.Int32)">
            <summary>
            Returns the green color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getGreen(System.Object)">
            <summary>
            Returns the green color component for the specified pixel, scaled
            from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getNormalizedComponents(System.Int32[],System.Int32,System.Single[],System.Int32)">
            <summary>
            Returns an array of all of the color/alpha components in normalized
            form, given an unnormalized component array.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getNormalizedComponents(System.Object,System.Single[],System.Int32)">
            <summary>
            Returns an array of all of the color/alpha components in normalized
            form, given a pixel in this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getNumColorComponents">
            <summary>
            Returns the number of color components in this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getNumComponents">
            <summary>
            Returns the number of components, including alpha, in this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getPixelSize">
            <summary>
            Returns the number of bits per pixel described by this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getRed(System.Int32)">
            <summary>
            Returns the red color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getRed(System.Object)">
            <summary>
            Returns the red color component for the specified pixel, scaled
            from 0 to 255 in the default RGB <code>ColorSpace</code>, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getRGB(System.Int32)">
            <summary>
            Returns the color/alpha components of the pixel in the default
            RGB color model format.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getRGB(System.Object)">
            <summary>
            Returns the color/alpha components for the specified pixel in the
            default RGB color model format.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getRGBdefault">
            <summary>
            Returns a <code>DirectColorModel</code> that describes the default
            format for integer RGB values used in many of the methods in the
            AWT image interfaces for the convenience of the programmer.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getTransferType">
            <summary>
            Returns the transfer type of this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getTransparency">
            <summary>
            Returns the transparency.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.getUnnormalizedComponents(System.Single[],System.Int32,System.Int32[],System.Int32)">
            <summary>
            Returns an array of all of the color/alpha components in unnormalized
            form, given a normalized component array.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.hasAlpha">
            <summary>
            Returns whether or not alpha is supported in this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.GetHashCode">
            <summary>
            Returns the hash code for this ColorModel.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.isAlphaPremultiplied">
            <summary>
            Returns whether or not the alpha has been premultiplied in the
            pixel values to be translated by this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.isCompatibleRaster(java.awt.image.Raster)">
            <summary>
            Returns <code>true</code> if <code>raster</code> is compatible
            with this <code>ColorModel</code> and <code>false</code> if it is
            not.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.isCompatibleSampleModel(java.awt.image.SampleModel)">
            <summary>
            Checks if the <code>SampleModel</code> is compatible with this
            <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.ColorModel.ToString">
            <summary>
            Returns the <code>String</code> representation of the contents of
            this <code>ColorModel</code>object.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a DataBuffer containing one bank of the specified
            data type and size.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a DataBuffer containing the specified number of
            banks.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a DataBuffer that contains the specified number
            of banks.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Constructs a DataBuffer which contains the specified number
            of banks.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getDataType">
            <summary>
            Returns the data type of this DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getDataTypeSize(System.Int32)">
            <summary>
            Returns the size (in bits) of the data type, given a datatype tag.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElem(System.Int32)">
            <summary>
            Returns the requested data array element from the first (default) bank
            as an integer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElem(System.Int32,System.Int32)">
            <summary>
            Returns the requested data array element from the specified bank
            as an integer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElemDouble(System.Int32)">
            <summary>
            Returns the requested data array element from the first (default) bank
            as a double.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElemDouble(System.Int32,System.Int32)">
            <summary>
            Returns the requested data array element from the specified bank as
            a double.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElemFloat(System.Int32)">
            <summary>
            Returns the requested data array element from the first (default) bank
            as a float.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getElemFloat(System.Int32,System.Int32)">
            <summary>
            Returns the requested data array element from the specified bank
            as a float.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getNumBanks">
            <summary>
            Returns the number of banks in this DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getOffset">
            <summary>
            Returns the offset of the default bank in array elements.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getOffsets">
            <summary>
            Returns the offsets (in array elements) of all the banks.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.getSize">
            <summary>
            Returns the size (in array elements) of all banks.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElem(System.Int32,System.Int32)">
            <summary>
            Sets the requested data array element in the first (default) bank
            from the given integer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the requested data array element in the specified bank
            from the given integer.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElemDouble(System.Int32,System.Double)">
            <summary>
            Sets the requested data array element in the first (default) bank
            from the given double.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElemDouble(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the requested data array element in the specified bank
            from the given double.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElemFloat(System.Int32,System.Single)">
            <summary>
            Sets the requested data array element in the first (default) bank
            from the given float.
            </summary>
        </member>
        <member name="M:java.awt.image.DataBuffer.setElemFloat(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the requested data array element in the specified bank
            from the given float.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.SByte[],System.SByte[],System.SByte[])">
            <summary>
            Constructs an <code>IndexColorModel</code> from the specified
            arrays of red, green, and blue components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.SByte[],System.SByte[],System.SByte[],System.SByte[])">
            <summary>
            Constructs an <code>IndexColorModel</code> from the given
            arrays of red, green, blue and alpha components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.SByte[],System.SByte[],System.SByte[],System.Int32)">
            <summary>
            Constructs an <code>IndexColorModel</code> from the given arrays
            of red, green, and blue components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.SByte[],System.Int32,System.Boolean)">
            <summary>
            Constructs an <code>IndexColorModel</code> from a single
            array of interleaved red, green, blue and optional alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.SByte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Constructs an <code>IndexColorModel</code> from a single array of
            interleaved red, green, blue and optional alpha components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs an <code>IndexColorModel</code> from an array of
            ints where each int is comprised of red, green, blue, and
            optional alpha components in the default RGB color model format.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,java.math.BigInteger)">
            <summary>
            Constructs an <code>IndexColorModel</code> from an
            <code>int</code> array where each <code>int</code> is
            comprised of red, green, blue, and alpha
            components in the default RGB color model format.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.convertToIntDiscrete(java.awt.image.Raster,System.Boolean)">
            <summary>
            Returns a new <code>BufferedImage</code> of TYPE_INT_ARGB or
            TYPE_INT_RGB that has a <code>Raster</code> with pixel data
            computed by expanding the indices in the source <code>Raster</code>
            using the color/alpha component arrays of this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.createCompatibleSampleModel(System.Int32,System.Int32)">
            <summary>
            Creates a <code>SampleModel</code> with the specified
            width and height that has a data layout compatible with
            this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.createCompatibleWritableRaster(System.Int32,System.Int32)">
            <summary>
            Creates a <code>WritableRaster</code> with the specified width
            and height that has a data layout (<code>SampleModel</code>)
            compatible with this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.finalize">
            <summary>
            Disposes of system resources associated with this
            <code>ColorModel</code> once this <code>ColorModel</code> is no
            longer referenced.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getAlpha(System.Int32)">
            <summary>
            Returns the alpha component for the specified pixel, scaled
            from 0 to 255.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getAlphas(System.SByte[])">
            <summary>
            Copies the array of alpha transparency components into the
            specified array.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getBlue(System.Int32)">
            <summary>
            Returns the blue color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getBlues(System.SByte[])">
            <summary>
            Copies the array of blue color components into the specified array.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getComponents(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Returns an array of unnormalized color/alpha components for a
            specified pixel in this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getComponents(System.Object,System.Int32[],System.Int32)">
            <summary>
            Returns an array of unnormalized color/alpha components for
            a specified pixel in this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getComponentSize">
            <summary>
            Returns an array of the number of bits for each color/alpha component.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getDataElement(System.Int32[],System.Int32)">
            <summary>
            Returns a pixel value represented as an int in this
            <code>ColorModel</code> given an array of unnormalized
            color/alpha components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getDataElements(System.Int32[],System.Int32,System.Object)">
            <summary>
            Returns a data element array representation of a pixel in this
            <code>ColorModel</code> given an array of unnormalized color/alpha
            components.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getDataElements(System.Int32,System.Object)">
            <summary>
            Returns a data element array representation of a pixel in this
            ColorModel, given an integer pixel representation in the
            default RGB color model.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getGreen(System.Int32)">
            <summary>
            Returns the green color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getGreens(System.SByte[])">
            <summary>
            Copies the array of green color components into the specified array.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getMapSize">
            <summary>
            Returns the size of the color/alpha component arrays in this
            <code>IndexColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getRed(System.Int32)">
            <summary>
            Returns the red color component for the specified pixel, scaled
            from 0 to 255 in the default RGB ColorSpace, sRGB.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getReds(System.SByte[])">
            <summary>
            Copies the array of red color components into the specified array.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getRGB(System.Int32)">
            <summary>
            Returns the color/alpha components of the pixel in the default
            RGB color model format.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getRGBs(System.Int32[])">
            <summary>
            Converts data for each index from the color and alpha component
            arrays to an int in the default RGB ColorModel format and copies
            the resulting 32-bit ARGB values into the specified array.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getTransparency">
            <summary>
            Returns the transparency.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getTransparentPixel">
            <summary>
            Returns the index of the transparent pixel in this
            <code>IndexColorModel</code> or -1 if there is no transparent pixel.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.getValidPixels">
            <summary>
            Returns a <code>BigInteger</code> that indicates the valid/invalid
            pixels in the colormap.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.isCompatibleRaster(java.awt.image.Raster)">
            <summary>
            Returns <code>true</code> if <code>raster</code> is compatible
            with this <code>ColorModel</code> or <code>false</code> if it
            is not compatible with this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.isCompatibleSampleModel(java.awt.image.SampleModel)">
            <summary>
            Checks if the specified <code>SampleModel</code> is compatible
            with this <code>ColorModel</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.isValid">
            <summary>
            Returns whether or not all of the pixels are valid.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.isValid(System.Int32)">
            <summary>
            Returns whether or not the pixel is valid.
            </summary>
        </member>
        <member name="M:java.awt.image.IndexColorModel.ToString">
            <summary>
            Returns the <code>String</code> representation of the contents of
            this <code>ColorModel</code>object.
            </summary>
        </member>
        <member name="M:java.awt.image.MemoryImageSource.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Constructs an ImageProducer object which uses an array of integers in the default RGB ColorModel to produce data for an Image object.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
            <param name="pix"></param>
            <param name="off"></param>
            <param name="scan"></param>
        </member>
        <member name="M:java.awt.image.MemoryImageSource.newPixels">
            <summary>
            Sends a whole new buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete.
            </summary>
        </member>
        <member name="M:java.awt.image.MemoryImageSource.setAnimated(System.Boolean)">
            <summary>
            Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter.
            </summary>
            <param name="animated"></param>
        </member>
        <member name="M:java.awt.image.MemoryImageSource.setFullBufferUpdates(System.Boolean)">
            <summary>
            Specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change.
            </summary>
            <param name="fullbuffers"></param>
        </member>
        <member name="M:java.awt.image.Raster.#ctor(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)">
            <summary>
            Constructs a Raster with the given SampleModel and DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.#ctor(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Rectangle,java.awt.Point,java.awt.image.Raster)">
            <summary>
            Constructs a Raster with the given SampleModel, DataBuffer, and
            parent.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.#ctor(java.awt.image.SampleModel,java.awt.Point)">
            <summary>
            Constructs a Raster with the given SampleModel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createBandedRaster(java.awt.image.DataBuffer,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a BandedSampleModel with the
            specified DataBuffer, width, height, scanline stride, bank
            indices, and band offsets.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createBandedRaster(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a BandedSampleModel with the
            specified data type, width, height, scanline stride, bank
            indices and band offsets.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createBandedRaster(System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Point)">
            <summary>
            Creates a Raster based on a BandedSampleModel with the
            specified data type, width, height, and number of bands.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createChild(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns a new Raster which shares all or part of this Raster's
            DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createCompatibleWritableRaster">
            <summary>
            Create a compatible WritableRaster the same size as this Raster with
            the same SampleModel and a new initialized DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createCompatibleWritableRaster(System.Int32,System.Int32)">
            <summary>
            Create a compatible WritableRaster with the specified size, a new
            SampleModel, and a new initialized DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createCompatibleWritableRaster(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a compatible WritableRaster with the specified
            location (minX, minY) and size (width, height), a
            new SampleModel, and a new initialized DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createCompatibleWritableRaster(java.awt.Rectangle)">
            <summary>
            Create a compatible WritableRaster with location (minX, minY)
            and size (width, height) specified by rect, a
            new SampleModel, and a new initialized DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createInterleavedRaster(java.awt.image.DataBuffer,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a PixelInterleavedSampleModel with the
            specified DataBuffer, width, height, scanline stride, pixel
            stride, and band offsets.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createInterleavedRaster(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a PixelInterleavedSampleModel with the
            specified data type, width, height, scanline stride, pixel
            stride, and band offsets.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createInterleavedRaster(System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Point)">
            <summary>
            Creates a Raster based on a PixelInterleavedSampleModel with the
            specified data type, width, height, and number of bands.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a SinglePixelPackedSampleModel with
            the specified DataBuffer, width, height, scanline stride, and
            band masks.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,System.Int32,System.Int32,System.Int32,java.awt.Point)">
            <summary>
            Creates a Raster based on a MultiPixelPackedSampleModel with the
            specified DataBuffer, width, height, and bits per pixel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createPackedRaster(System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.Point)">
            <summary>
            Creates a Raster based on a SinglePixelPackedSampleModel with
            the specified data type, width, height, and band masks.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createPackedRaster(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,java.awt.Point)">
            <summary>
            Creates a Raster based on a packed SampleModel with the
            specified data type, width, height, number of bands, and bits
            per band.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)">
            <summary>
            Creates a Raster with the specified SampleModel and DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createTranslatedChild(System.Int32,System.Int32)">
            <summary>
            Create a Raster with the same size, SampleModel and DataBuffer
            as this one, but with a different location.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)">
            <summary>
            Creates a WritableRaster with the specified SampleModel and DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.Point)">
            <summary>
            Creates a WritableRaster with the specified SampleModel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getBounds">
            <summary>
            Returns the bounding Rectangle of this Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getDataBuffer">
            <summary>
            Returns the DataBuffer associated with this Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getDataElements(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Returns the pixel data for the specified rectangle of pixels in a
            primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getDataElements(System.Int32,System.Int32,System.Object)">
            <summary>
            Returns data for a single pixel in a primitive array of type
            TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getHeight">
            <summary>
            Returns the height in pixels of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getMinX">
            <summary>
            Returns the minimum valid X coordinate of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getMinY">
            <summary>
            Returns the minimum valid Y coordinate of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getNumBands">
            <summary>
            Returns the number of bands (samples per pixel) in this Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getNumDataElements">
            <summary>
            Returns the number of data elements needed to transfer one pixel
            via the getDataElements and setDataElements methods.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getParent">
            <summary>
            Returns the parent Raster (if any) of this Raster or null.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixel(System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the samples in an array of double for the specified pixel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixel(System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns the samples in an array of float for the
            specified pixel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixel(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the samples in an array of int for the specified pixel.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns a double array containing all samples for a rectangle of pixels,
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns a float array containing all samples for a rectangle of pixels,
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns an int array containing all samples for a rectangle of pixels,
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSample(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the sample in a specified band for the pixel located
            at (x,y) as an int.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSampleDouble(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the sample in a specified band
            for a pixel located at (x,y) as a double.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSampleFloat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the sample in a specified band
            for the pixel located at (x,y) as a float.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSampleModel">
            <summary>
            Returns the SampleModel that describes the layout of the image data.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSampleModelTranslateX">
            <summary>
            Returns the X translation from the coordinate system of the
            SampleModel to that of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSampleModelTranslateY">
            <summary>
            Returns the Y translation from the coordinate system of the
            SampleModel to that of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the samples for a specified band for a specified rectangle
            of pixels in a double array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns the samples for a specified band for the specified rectangle
            of pixels in a float array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the samples for a specified band for the specified rectangle
            of pixels in an int array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getTransferType">
            <summary>
            Returns the TransferType used to transfer pixels via the
            getDataElements and setDataElements methods.
            </summary>
        </member>
        <member name="M:java.awt.image.Raster.getWidth">
            <summary>
            Returns the width in pixels of the Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.createDefaultRendering">
            <summary>
            Returnd a RenderedImage instance of this image with a default
            width and height in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.createRendering(java.awt.image.renderable.RenderContext)">
            <summary>
            Creates a RenderedImage that represented a rendering of this image
            using a given RenderContext.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.createScaledRendering(System.Int32,System.Int32,java.awt.RenderingHints)">
            <summary>
            Creates a RenderedImage instance of this image with width w, and
            height h in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getHeight">
            <summary>
            Gets the height in user coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getMinX">
            <summary>
            Gets the minimum X coordinate of the rendering-independent image data.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getMinY">
            <summary>
            Gets the minimum Y coordinate of the rendering-independent image data.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getProperty(System.String)">
            <summary>
            Gets a property from the property set of this image.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getPropertyNames">
            <summary>
            Returns a list of names recognized by getProperty.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getSources">
            <summary>
            Returns a vector of RenderableImages that are the sources of
            image data for this RenderableImage.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.getWidth">
            <summary>
            Gets the width in user coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderableImage.isDynamic">
            <summary>
            Returns true if successive renderings (that is, calls to
            createRendering() or createScaledRendering()) with the same arguments
            may produce different results.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.#ctor(java.awt.geom.AffineTransform)">
            <summary>
            Constructs a RenderContext with a given transform.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.#ctor(java.awt.geom.AffineTransform,java.awt.RenderingHints)">
            <summary>
            Constructs a RenderContext with a given transform and rendering hints.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.#ctor(java.awt.geom.AffineTransform,java.awt.Shape)">
            <summary>
            Constructs a RenderContext with a given transform and area of interest.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.#ctor(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)">
            <summary>
            Constructs a RenderContext with a given transform.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.clone">
            <summary>
            Makes a copy of a RenderContext.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.concatenateTransform(java.awt.geom.AffineTransform)">
            <summary>
            Modifies the current user-to-device transform by appending another
            transform.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.concetenateTransform(java.awt.geom.AffineTransform)">
            <summary>
            <B>Deprecated.</B> <I>replaced by
            <code>concatenateTransform(AffineTransform)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.getAreaOfInterest">
            <summary>
            Gets the ares of interest currently contained in the
            RenderContext.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.getRenderingHints">
            <summary>
            Gets the rendering hints of this <code>RenderContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.getTransform">
            <summary>
            Gets the current user-to-device AffineTransform.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.preConcatenateTransform(java.awt.geom.AffineTransform)">
            <summary>
            Modifies the current user-to-device transform by prepending another
            transform.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.preConcetenateTransform(java.awt.geom.AffineTransform)">
            <summary>
            <B>Deprecated.</B> <I>replaced by
            <code>preConcatenateTransform(AffineTransform)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.setAreaOfInterest(java.awt.Shape)">
            <summary>
            Sets the current area of interest.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.setRenderingHints(java.awt.RenderingHints)">
            <summary>
            Sets the rendering hints of this <code>RenderContext</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.renderable.RenderContext.setTransform(java.awt.geom.AffineTransform)">
            <summary>
            Sets the current user-to-device AffineTransform contained
            in the RenderContext to a given transform.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.copyData(java.awt.image.WritableRaster)">
            <summary>
            Computes an arbitrary rectangular region of the RenderedImage
            and copies it into a caller-supplied WritableRaster.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getColorModel">
            <summary>
            Returns the ColorModel associated with this image.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getData">
            <summary>
            Returns the image as one large tile (for tile based
            images this will require fetching the whole image
            and copying the image data over).
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getData(java.awt.Rectangle)">
            <summary>
            Computes and returns an arbitrary region of the RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getHeight">
            <summary>
            Returns the height of the RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getMinTileX">
            <summary>
            Returns the minimum tile index in the X direction.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getMinTileY">
            <summary>
            Returns the minimum tile index in the Y direction.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getMinX">
            <summary>
            Returns the minimum X coordinate (inclusive) of the RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getMinY">
            <summary>
            Returns the minimum Y coordinate (inclusive) of the RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getNumXTiles">
            <summary>
            Returns the number of tiles in the X direction.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getNumYTiles">
            <summary>
            Returns the number of tiles in the Y direction.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getProperty(System.String)">
            <summary>
            Gets a property from the property set of this image.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getPropertyNames">
            <summary>
            Returns an array of names recognized by
            <A HREF="../../../java/awt/image/RenderedImage.html#getProperty(java.lang.String)"><CODE>getProperty(String)</CODE></A>
            or <code>null</code>, if no property names are recognized.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getSampleModel">
            <summary>
            Returns the SampleModel associated with this image.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getSources">
            <summary>
            Returns a vector of RenderedImages that are the immediate sources of
            image data for this RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getTile(System.Int32,System.Int32)">
            <summary>
            Returns tile (tileX, tileY).
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getTileGridXOffset">
            <summary>
            Returns the X offset of the tile grid relative to the origin,
            i.e., the X coordinate of the upper-left pixel of tile (0, 0).
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getTileGridYOffset">
            <summary>
            Returns the Y offset of the tile grid relative to the origin,
            i.e., the Y coordinate of the upper-left pixel of tile (0, 0).
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getTileHeight">
            <summary>
            Returns the tile height in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getTileWidth">
            <summary>
            Returns the tile width in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.RenderedImage.getWidth">
            <summary>
            Returns the width of the RenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a SampleModel with the specified parameters.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.createCompatibleSampleModel(System.Int32,System.Int32)">
            <summary>
            Creates a SampleModel which describes data in this SampleModel's
            format, but with a different width and height.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.createDataBuffer">
            <summary>
            Creates a DataBuffer that corresponds to this SampleModel.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.createSubsetSampleModel(System.Int32[])">
            <summary>
            Creates a new SampleModel
            with a subset of the bands of this
            SampleModel.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getDataElements(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,java.awt.image.DataBuffer)">
            <summary>
            Returns the pixel data for the specified rectangle of pixels in a
            primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getDataElements(System.Int32,System.Int32,System.Object,java.awt.image.DataBuffer)">
            <summary>
            Returns data for a single pixel in a primitive array of type
            TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getDataType">
            <summary>
            Returns the data type of the DataBuffer storing the pixel data.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getHeight">
            <summary>
            Returns the height in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getNumBands">
            <summary>
            Returns the total number of bands of image data.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getNumDataElements">
            <summary>
            Returns the number of data elements needed to transfer a pixel
            via the getDataElements and setDataElements methods.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixel(System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for the specified pixel in an array of double.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixel(System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for the specified pixel in an array of float.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixel(System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for a specified pixel in an int array,
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Returns all samples for a rectangle of pixels in a double
            array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Returns all samples for a rectangle of pixels in a float
            array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Returns all samples for a rectangle of pixels in an
            int array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSample(System.Int32,System.Int32,System.Int32,java.awt.image.DataBuffer)">
            <summary>
            Returns the sample in a specified band for the pixel located
            at (x,y) as an int.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSampleDouble(System.Int32,System.Int32,System.Int32,java.awt.image.DataBuffer)">
            <summary>
            Returns the sample in a specified band
            for a pixel located at (x,y) as a double.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSampleFloat(System.Int32,System.Int32,System.Int32,java.awt.image.DataBuffer)">
            <summary>
            Returns the sample in a specified band
            for the pixel located at (x,y) as a float.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for a specified band for a specified rectangle
            of pixels in a double array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for a specified band for the specified rectangle
            of pixels in a float array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Returns the samples for a specified band for the specified rectangle
            of pixels in an int array, one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSampleSize">
            <summary>
            Returns the size in bits of samples for all bands.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getSampleSize(System.Int32)">
            <summary>
            Returns the size in bits of samples for the specified band.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getTransferType">
            <summary>
            Returns the TransferType used to transfer pixels via the
            getDataElements and setDataElements methods.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.getWidth">
            <summary>
            Returns the width in pixels.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setDataElements(System.Int32,System.Int32,System.Int32,System.Int32,System.Object,java.awt.image.DataBuffer)">
            <summary>
            Sets the data for a rectangle of pixels in the specified DataBuffer
            from a primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setDataElements(System.Int32,System.Int32,System.Object,java.awt.image.DataBuffer)">
            <summary>
            Sets the data for a single pixel in the specified DataBuffer from a
            primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixel(System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Sets a pixel in the DataBuffer using a double array of samples
            for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixel(System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Sets a pixel in the DataBuffer using a float array of samples for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixel(System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Sets a pixel in 	the DataBuffer using an int array of samples for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Sets all samples for a rectangle of pixels from a double array
            containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Sets all samples for a rectangle of pixels from a float array containing
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Sets all samples for a rectangle of pixels from an int array containing
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSample(System.Int32,System.Int32,System.Int32,System.Double,java.awt.image.DataBuffer)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using a double for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSample(System.Int32,System.Int32,System.Int32,System.Single,java.awt.image.DataBuffer)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using a float for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSample(System.Int32,System.Int32,System.Int32,System.Int32,java.awt.image.DataBuffer)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using an int for input.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[],java.awt.image.DataBuffer)">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from a double array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single[],java.awt.image.DataBuffer)">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from a float array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.SampleModel.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],java.awt.image.DataBuffer)">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from an int array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.TileObserver.tileUpdate(java.awt.image.WritableRenderedImage,System.Int32,System.Int32,System.Boolean)">
            <summary>
            A tile is about to be updated (it is either about to be grabbed
            for writing, or it is being released from writing).
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.#ctor(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)">
            <summary>
            Constructs a WritableRaster with the given SampleModel and DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.#ctor(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Rectangle,java.awt.Point,java.awt.image.WritableRaster)">
            <summary>
            Constructs a WritableRaster with the given SampleModel, DataBuffer,
            and parent.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.#ctor(java.awt.image.SampleModel,java.awt.Point)">
            <summary>
            Constructs a WritableRaster with the given SampleModel.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.createWritableChild(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns a new WritableRaster which shares all or part of this
            WritableRaster's DataBuffer.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.createWritableTranslatedChild(System.Int32,System.Int32)">
            <summary>
            Create a WritableRaster with the same size, SampleModel and DataBuffer
            as this one, but with a different location.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.getWritableParent">
            <summary>
            Returns the parent WritableRaster (if any) of this WritableRaster,
            or else null.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setDataElements(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the data for a rectangle of pixels from a
            primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setDataElements(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets the data for a single pixel from a
            primitive array of type TransferType.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setDataElements(System.Int32,System.Int32,java.awt.image.Raster)">
            <summary>
            Sets the data for a rectangle of pixels from an input Raster.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixel(System.Int32,System.Int32,System.Double[])">
            <summary>
            Sets a pixel in the DataBuffer using a double array of samples for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixel(System.Int32,System.Int32,System.Single[])">
            <summary>
            Sets a pixel in the DataBuffer using a float array of samples for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixel(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets a pixel in the DataBuffer using an int array of samples for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Sets all samples for a rectangle of pixels from a double array containing
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Sets all samples for a rectangle of pixels from a float array containing
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets all samples for a rectangle of pixels from an int array containing
            one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setRect(System.Int32,System.Int32,java.awt.image.Raster)">
            <summary>
            Copies pixels from Raster srcRaster to this WritableRaster.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setRect(java.awt.image.Raster)">
            <summary>
            Copies pixels from Raster srcRaster to this WritableRaster.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSample(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using a double for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSample(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using a float for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSample(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a sample in the specified band for the pixel located at (x,y)
            in the DataBuffer using an int for input.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from a double array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from a float array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRaster.setSamples(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets the samples in the specified band for the specified rectangle
            of pixels from an int array containing one sample per array element.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.addTileObserver(java.awt.image.TileObserver)">
            <summary>
            Adds an observer.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.getWritableTile(System.Int32,System.Int32)">
            <summary>
            Checks out a tile for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.getWritableTileIndices">
            <summary>
            Returns an array of Point objects indicating which tiles
            are checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.hasTileWriters">
            <summary>
            Returns whether any tile is checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.isTileWritable(System.Int32,System.Int32)">
            <summary>
            Returns whether a tile is currently checked out for writing.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.releaseWritableTile(System.Int32,System.Int32)">
            <summary>
            Relinquishes the right to write to a tile.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.removeTileObserver(java.awt.image.TileObserver)">
            <summary>
            Removes an observer.
            </summary>
        </member>
        <member name="M:java.awt.image.WritableRenderedImage.setData(java.awt.image.Raster)">
            <summary>
            Sets a rect of the image to the contents of the Raster r, which is
            assumed to be in the same coordinate space as the WritableRenderedImage.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.#ctor">
            <summary>
            Constructs an InputContext.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.dispatchEvent(java.awt.AWTEvent)">
            <summary>
            Dispatches an event to the active input method.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.dispose">
            <summary>
            Disposes of the input context and release the resources used by it.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.endComposition">
            <summary>
            Ends any input composition that may currently be going on in this
            context.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.getInputMethodControlObject">
            <summary>
            Returns a control object from the current input method, or null.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.getInstance">
            <summary>
            Returns a new InputContext instance.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.getLocale">
            <summary>
            Returns the current locale of the current input method or keyboard
            layout.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.isCompositionEnabled">
            <summary>
            Determines whether the current input method is enabled for composition.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.reconvert">
            <summary>
            Asks the current input method to reconvert text from the
            current client component.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.removeNotify(java.awt.Component)">
            <summary>
            Notifies the input context that a client component has been
            removed from its containment hierarchy, or that input method
            support has been disabled for the component.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.selectInputMethod(java.util.Locale)">
            <summary>
            Attempts to select an input method or keyboard layout that
            supports the given locale, and returns a value indicating whether such
            an input method or keyboard layout has been successfully selected.
            </summary>
        </member>
        <member name="M:java.awt.im.InputContext.setCompositionEnabled(System.Boolean)">
            <summary>
            Enables or disables the current input method for composition,
            depending on the value of the parameter <code>enable</code>.
            </summary>
        </member>
        <member name="M:java.awt.im.InputMethodRequests.getCommittedTextLength">
            <summary>
            Gets the length of the entire text contained in the text
            editing component except for uncommitted (composed) text.
            </summary>
        </member>
        <member name="M:java.awt.im.InputMethodRequests.getInsertPositionOffset">
            <summary>
            Gets the offset of the insert position in the committed text contained
            in the text editing component.
            </summary>
        </member>
        <member name="M:java.awt.im.InputMethodRequests.getLocationOffset(System.Int32,System.Int32)">
            <summary>
            Gets the offset within the composed text for the specified absolute x
            and y coordinates on the screen.
            </summary>
        </member>
        <member name="M:java.awt.im.InputMethodRequests.getTextLocation(java.awt.font.TextHitInfo)">
            <summary>
            Gets the location of a specified offset in the current composed text,
            or of the selection in committed text.
            </summary>
        </member>
        <member name="M:java.awt.Insets.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new <code>Insets</code> object with the
            specified top, left, bottom, and right insets.
            </summary>
        </member>
        <member name="M:java.awt.Insets.clone">
            <summary>
            Create a copy of this object.
            </summary>
        </member>
        <member name="M:java.awt.Insets.Equals(System.Object)">
            <summary>
            Checks whether two insets objects are equal.
            </summary>
        </member>
        <member name="M:java.awt.Insets.GetHashCode">
            <summary>
            Returns the hash code for this Insets.
            </summary>
        </member>
        <member name="M:java.awt.Insets.ToString">
            <summary>
            Returns a string representation of this <code>Insets</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Label.#ctor">
            <summary>
            Constructs an empty label.
            </summary>
        </member>
        <member name="M:java.awt.Label.#ctor(System.String)">
            <summary>
            Constructs a new label with the specified string of text,
            left justified.
            </summary>
        </member>
        <member name="M:java.awt.Label.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new label that presents the specified string of
            text with the specified alignment.
            </summary>
        </member>
        <member name="M:java.awt.Label.addNotify">
            <summary>
            Creates the peer for this label.
            </summary>
        </member>
        <member name="M:java.awt.Label.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this Label.
            </summary>
        </member>
        <member name="M:java.awt.Label.getAlignment">
            <summary>
            Gets the current alignment of this label.
            </summary>
        </member>
        <member name="M:java.awt.Label.getText">
            <summary>
            Gets the text of this label.
            </summary>
        </member>
        <member name="M:java.awt.Label.paramString">
            <summary>
            Returns a string representing the state of this <code>Label</code>.
            </summary>
        </member>
        <member name="M:java.awt.Label.setAlignment(System.Int32)">
            <summary>
            Sets the alignment for this label to the specified alignment.
            </summary>
        </member>
        <member name="M:java.awt.Label.setText(System.String)">
            <summary>
            Sets the text for this label to the specified text.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.#ctor">
            <summary>
            Creates a <code>MenuComponent</code>.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.dispatchEvent(java.awt.AWTEvent)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with
            this <code>MenuComponent</code>.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.getFont">
            <summary>
            Gets the font used for this menu component.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.getName">
            <summary>
            Gets the name of the menu component.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.getParent">
            <summary>
            Returns the parent container for this menu component.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.getTreeLock">
            <summary>
            Gets this component's locking object (the object that owns the thread
            sychronization monitor) for AWT component-tree and layout
            operations.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.paramString">
            <summary>
            Returns a string representing the state of this
            <code>MenuComponent</code>.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.postEvent(java.awt.Event)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <A HREF="../../java/awt/MenuComponent.html#dispatchEvent(java.awt.AWTEvent)"><CODE>dispatchEvent</CODE></A>.</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.processEvent(java.awt.AWTEvent)">
            <summary>
            Processes events occurring on this menu component.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.removeNotify">
            <summary>
            Removes the menu component's peer.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.setFont(java.awt.Font)">
            <summary>
            Sets the font to be used for this menu component to the specified
            font.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.setName(System.String)">
            <summary>
            Sets the name of the component to the specified string.
            </summary>
        </member>
        <member name="M:java.awt.MenuComponent.ToString">
            <summary>
            Returns a representation of this menu component as a string.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.#ctor">
            <summary>
            Constructs a new MenuItem with an empty label and no keyboard
            shortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.#ctor(System.String)">
            <summary>
            Constructs a new MenuItem with the specified label
            and no keyboard shortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.#ctor(System.String,java.awt.MenuShortcut)">
            <summary>
            Create a menu item with an associated keyboard shortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.addActionListener(java.awt.event.ActionListener)">
            <summary>
            Adds the specified action listener to receive action events
            from this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.addNotify">
            <summary>
            Creates the menu item's peer.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.deleteShortcut">
            <summary>
            Delete any <code>MenuShortcut</code> object associated
            with this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.disable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.disableEvents(System.Int64)">
            <summary>
            Disables event delivery to this menu item for events
            defined by the specified event mask parameter.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.enable">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.enable(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>setEnabled(boolean)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.enableEvents(System.Int64)">
            <summary>
            Enables event delivery to this menu item for events
            to be defined by the specified event mask parameter
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this MenuItem.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getActionCommand">
            <summary>
            Gets the command name of the action event that is fired
            by this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getActionListeners">
            <summary>
            Returns an array of all the action listeners
            registered on this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getLabel">
            <summary>
            Gets the label for this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getListeners(java.lang.Class)">
            <summary>
            Returns an array of all the objects currently registered
            as <code><em>Foo</em>Listener</code>s
            upon this <code>MenuItem</code>.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.getShortcut">
            <summary>
            Get the <code>MenuShortcut</code> object associated with this
            menu item,
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.isEnabled">
            <summary>
            Checks whether this menu item is enabled.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.paramString">
            <summary>
            Returns a string representing the state of this <code>MenuItem</code>.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.processActionEvent(java.awt.event.ActionEvent)">
            <summary>
            Processes action events occurring on this menu item,
            by dispatching them to any registered
            <code>ActionListener</code> objects.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.processEvent(java.awt.AWTEvent)">
            <summary>
            Processes events on this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.removeActionListener(java.awt.event.ActionListener)">
            <summary>
            Removes the specified action listener so it no longer receives
            action events from this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.setActionCommand(System.String)">
            <summary>
            Sets the command name of the action event that is fired
            by this menu item.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.setEnabled(System.Boolean)">
            <summary>
            Sets whether or not this menu item can be chosen.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.setLabel(System.String)">
            <summary>
            Sets the label for this menu item to the specified label.
            </summary>
        </member>
        <member name="M:java.awt.MenuItem.setShortcut(java.awt.MenuShortcut)">
            <summary>
            Set the <code>MenuShortcut</code> object associated with this
            menu item.
            </summary>
        </member>
        <member name="M:java.awt.Menu.#ctor">
            <summary>
            Constructs a new menu with an empty label.
            </summary>
        </member>
        <member name="M:java.awt.Menu.#ctor(System.String)">
            <summary>
            Constructs a new menu with the specified label.
            </summary>
        </member>
        <member name="M:java.awt.Menu.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new menu with the specified label,
            indicating whether the menu can be torn off.
            </summary>
        </member>
        <member name="M:java.awt.Menu.add(java.awt.MenuItem)">
            <summary>
            Adds the specified menu item to this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.add(System.String)">
            <summary>
            Adds an item with the specified label to this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.addNotify">
            <summary>
            Creates the menu's peer.
            </summary>
        </member>
        <member name="M:java.awt.Menu.addSeparator">
            <summary>
            Adds a separator line, or a hypen, to the menu at the current position.
            </summary>
        </member>
        <member name="M:java.awt.Menu.countItems">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getItemCount()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Menu.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this Menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.getItem(System.Int32)">
            <summary>
            Gets the item located at the specified index of this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.getItemCount">
            <summary>
            Get the number of items in this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.insert(java.awt.MenuItem,System.Int32)">
            <summary>
            Inserts a menu item into this menu
            at the specified position.
            </summary>
        </member>
        <member name="M:java.awt.Menu.insert(System.String,System.Int32)">
            <summary>
            Inserts a menu item with the specified label into this menu
            at the specified position.
            </summary>
        </member>
        <member name="M:java.awt.Menu.insertSeparator(System.Int32)">
            <summary>
            Inserts a separator at the specified position.
            </summary>
        </member>
        <member name="M:java.awt.Menu.isTearOff">
            <summary>
            Indicates whether this menu is a tear-off menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.paramString">
            <summary>
            Returns a string representing the state of this <code>Menu</code>.
            </summary>
        </member>
        <member name="M:java.awt.Menu.remove(System.Int32)">
            <summary>
            Removes the menu item at the specified index from this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.remove(java.awt.MenuComponent)">
            <summary>
            Removes the specified menu item from this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.removeAll">
            <summary>
            Removes all items from this menu.
            </summary>
        </member>
        <member name="M:java.awt.Menu.removeNotify">
            <summary>
            Removes the menu's peer.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.#ctor">
            <summary>
            Creates a new menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.add(java.awt.Menu)">
            <summary>
            Adds the specified menu to the menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.addNotify">
            <summary>
            Creates the menu bar's peer.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.countMenus">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getMenuCount()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.deleteShortcut(java.awt.MenuShortcut)">
            <summary>
            Deletes the specified menu shortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.getAccessibleContext">
            <summary>
            Gets the AccessibleContext associated with this MenuBar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.getHelpMenu">
            <summary>
            Gets the help menu on the menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.getMenu(System.Int32)">
            <summary>
            Gets the specified menu.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.getMenuCount">
            <summary>
            Gets the number of menus on the menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.getShortcutMenuItem(java.awt.MenuShortcut)">
            <summary>
            Gets the instance of <code>MenuItem</code> associated
            with the specified <code>MenuShortcut</code> object,
            or <code>null</code> if none of the menu items being managed
            by this menu bar is associated with the specified menu
            shortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.remove(System.Int32)">
            <summary>
            Removes the menu located at the specified
            index from this menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.remove(java.awt.MenuComponent)">
            <summary>
            Removes the specified menu component from this menu bar.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.removeNotify">
            <summary>
            Removes the menu bar's peer.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.setHelpMenu(java.awt.Menu)">
            <summary>
            Sets the specified menu to be this menu bar's help menu.
            </summary>
        </member>
        <member name="M:java.awt.MenuBar.shortcuts">
            <summary>
            Gets an enumeration of all menu shortcuts this menu bar
            is managing.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.#ctor(System.Int32)">
            <summary>
            Constructs a new MenuShortcut for the specified virtual keycode.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs a new MenuShortcut for the specified virtual keycode.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.equals(java.awt.MenuShortcut)">
            <summary>
            Returns whether this MenuShortcut is the same as another:
            equality is defined to mean that both MenuShortcuts use the same key
            and both either use or don't use the SHIFT key.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.Equals(System.Object)">
            <summary>
            Returns whether this MenuShortcut is the same as another:
            equality is defined to mean that both MenuShortcuts use the same key
            and both either use or don't use the SHIFT key.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.getKey">
            <summary>
            Returns the raw keycode of this MenuShortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.GetHashCode">
            <summary>
            Returns the hashcode for this MenuShortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.paramString">
            <summary>
            Returns the parameter string representing the state of this
            MenuShortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.ToString">
            <summary>
            Returns an internationalized description of the MenuShortcut.
            </summary>
        </member>
        <member name="M:java.awt.MenuShortcut.usesShiftModifier">
            <summary>
            Returns whether this MenuShortcut must be invoked using the SHIFT key.
            </summary>
        </member>
        <member name="M:java.awt.Transparency.getTransparency">
            <summary>
            Returns the type of this <code>Transparency</code>.
            </summary>
        </member>
        <member name="M:java.awt.Paint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)">
            <summary>
            Creates and returns a <A HREF="../../java/awt/PaintContext.html" title="interface in java.awt"><CODE>PaintContext</CODE></A> used to
            generate the color pattern.
            </summary>
        </member>
        <member name="M:java.awt.PaintContext.dispose">
            <summary>
            Releases the resources allocated for the operation.
            </summary>
        </member>
        <member name="M:java.awt.PaintContext.getColorModel">
            <summary>
            Returns the <code>ColorModel</code> of the output.
            </summary>
        </member>
        <member name="M:java.awt.PaintContext.getRaster(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <code>Raster</code> containing the colors generated for
            the graphics operation.
            </summary>
        </member>
        <member name="M:java.awt.Point.#ctor">
            <summary>
            Constructs and initializes a point at the origin
            (0, 0) of the coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs and initializes a point at the specified
            (<i>x</i>, <i>y</i>) location in the coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.Point.#ctor(java.awt.Point)">
            <summary>
            Constructs and initializes a point with the same location as
            the specified <code>Point</code> object.
            </summary>
        </member>
        <member name="M:java.awt.Point.Equals(System.Object)">
            <summary>
            Determines whether or not two points are equal.
            </summary>
        </member>
        <member name="M:java.awt.Point.getLocation">
            <summary>
            Returns the location of this point.
            </summary>
        </member>
        <member name="M:java.awt.Point.getX">
            <summary>
            Returns the X coordinate of the point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.Point.getY">
            <summary>
            Returns the Y coordinate of the point in double precision.
            </summary>
        </member>
        <member name="M:java.awt.Point.move(System.Int32,System.Int32)">
            <summary>
            Moves this point to the specified location in the
            (<i>x</i>, <i>y</i>) coordinate plane.
            </summary>
        </member>
        <member name="M:java.awt.Point.setLocation(System.Double,System.Double)">
            <summary>
            Sets the location of this point to the specified double coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Point.setLocation(System.Int32,System.Int32)">
            <summary>
            Changes the point to have the specified location.
            </summary>
        </member>
        <member name="M:java.awt.Point.setLocation(java.awt.Point)">
            <summary>
            Sets the location of the point to the specified location.
            </summary>
        </member>
        <member name="M:java.awt.Point.ToString">
            <summary>
            Returns a string representation of this point and its location
            in the (<i>x</i>, <i>y</i>) coordinate space.
            </summary>
        </member>
        <member name="M:java.awt.Point.translate(System.Int32,System.Int32)">
            <summary>
            Translates this point, at location (<i>x</i>, <i>y</i>),
            by <code>dx</code> along the <i>x</i> axis and <code>dy</code>
            along the <i>y</i> axis so that it now represents the point
            (<code>x</code> <code>+</code> <code>dx</code>,
            <code>y</code> <code>+</code> <code>dy</code>).
            </summary>
        </member>
        <member name="M:java.awt.Polygon.#ctor">
            <summary>
            Creates an empty polygon.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.#ctor(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Constructs and initializes a <code>Polygon</code> from the specified
            parameters.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.addPoint(System.Int32,System.Int32)">
            <summary>
            Appends the specified coordinates to this <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(System.Double,System.Double)">
            <summary>
            Determines if the specified coordinates are inside this
            <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of this <code>Polygon</code> entirely
            contains the specified set of rectangular coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified coordinates are inside this
            <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(java.awt.Point)">
            <summary>
            Determines whether the specified <A HREF="../../java/awt/Point.html" title="class in java.awt"><CODE>Point</CODE></A> is inside this
            <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(java.awt.geom.Point2D)">
            <summary>
            Tests if a specified <A HREF="../../java/awt/geom/Point2D.html" title="class in java.awt.geom"><CODE>Point2D</CODE></A> is inside the boundary of this
            <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.contains(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of this <code>Polygon</code> entirely
            contains the specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.getBoundingBox">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>getBounds()</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Polygon.getBounds">
            <summary>
            Gets the bounding box of this <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.getBounds2D">
            <summary>
            Returns the high precision bounding box of the <A HREF="../../java/awt/Shape.html" title="interface in java.awt"><CODE>Shape</CODE></A>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the boundary of this
            <code>Polygon</code> and provides access to the geometry
            of the outline of this <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.getPathIterator(java.awt.geom.AffineTransform,System.Double)">
            <summary>
            Returns an iterator object that iterates along the boundary of
            the <code>Shape</code> and provides access to the geometry of the
            outline of the <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.inside(System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1,
            replaced by <code>contains(int, int)</code>.</I>
            </summary>
        </member>
        <member name="M:java.awt.Polygon.intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of this <code>Polygon</code> intersects the
            interior of a specified set of rectangular coordinates.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.intersects(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of this <code>Polygon</code> intersects the
            interior of a specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.invalidate">
            <summary>
            Invalidates or flushes any internally-cached data that depends
            on the vertex coordinates of this <code>Polygon</code>.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.reset">
            <summary>
            Resets this <code>Polygon</code> object to an empty polygon.
            </summary>
        </member>
        <member name="M:java.awt.Polygon.translate(System.Int32,System.Int32)">
            <summary>
            Translates the vertices of the <code>Polygon</code> by
            <code>deltaX</code> along the x axis and by
            <code>deltaY</code> along the y axis.
            </summary>
        </member>
        <member name="M:java.awt.PopupMenu.#ctor">
            <summary>
            Creates a new popup menu with an empty name.
            </summary>
        </member>
        <member name="M:java.awt.PopupMenu.#ctor(System.String)">
            <summary>
            Creates a new popup menu with the specified name.
            </summary>
        </member>
        <member name="M:java.awt.PopupMenu.addNotify">
            <summary>
            Creates the popup menu's peer.
            </summary>
        </member>
        <member name="M:java.awt.PopupMenu.getAccessibleContext">
            <summary>
            Gets the <code>AccessibleContext</code> associated with this
            <code>PopupMenu</code>.
            </summary>
        </member>
        <member name="M:java.awt.PopupMenu.show(java.awt.Component,System.Int32,System.Int32)">
            <summary>
            Shows the popup menu at the x, y position relative to an origin
            component.
            </summary>
        </member>
        <member name="T:java.util.Map">
            <summary>
            public interface Map
            </summary>
        </member>
        <member name="M:java.util.Map.clear">
            <summary>
            Removes all mappings from this map (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Map.containsKey(System.Object)">
            <summary>
            Returns
            </summary>
        </member>
        <member name="M:java.util.Map.containsValue(System.Object)">
            <summary>
            Returns
            </summary>
        </member>
        <member name="M:java.util.Map.entrySet">
            <summary>
            Returns a set view of the mappings contained in this map.
            </summary>
        </member>
        <member name="M:java.util.Map.Equals(System.Object)">
            <summary>
            Compares the specified object with this map for equality.
            </summary>
        </member>
        <member name="M:java.util.Map.get(System.Object)">
            <summary>
            Returns the value to which this map maps the specified key.
            </summary>
        </member>
        <member name="M:java.util.Map.GetHashCode">
            <summary>
            Returns the hash code value for this map.
            </summary>
        </member>
        <member name="M:java.util.Map.isEmpty">
            <summary>
            Returns
            </summary>
        </member>
        <member name="M:java.util.Map.keySet">
            <summary>
            Returns a set view of the keys contained in this map.
            </summary>
        </member>
        <member name="M:java.util.Map.put(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this map (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Map.putAll(java.util.Map)">
            <summary>
            Copies all of the mappings from the specified map to this map (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Map.remove(System.Object)">
            <summary>
            Removes the mapping for this key from this map if it is present (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Map.size">
            <summary>
            Returns the number of key-value mappings in this map.
            </summary>
        </member>
        <member name="M:java.util.Map.values">
            <summary>
            Returns a collection view of the values contained in this map.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.#ctor(java.util.Map)">
            <summary>
            Constructs a new object with keys and values initialized
            from the specified Map object (which may be null).
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.#ctor(java.awt.RenderingHints.Key,System.Object)">
            <summary>
            Constructs a new object with the specified key/value pair.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.add(java.awt.RenderingHints)">
            <summary>
            Adds all of the keys and corresponding values from the specified
            <code>RenderingHints</code> object to this
            <code>RenderingHints</code> object.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.clear">
            <summary>
            Clears this <code>RenderingHints</code> object of all key/value
            pairs.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.clone">
            <summary>
            Creates a clone of this <code>RenderingHints</code> object
            that has the same contents as this <code>RenderingHints</code>
            object.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.containsKey(System.Object)">
            <summary>
            Returns <code>true</code> if this <code>RenderingHints</code>
            contains a mapping for the specified key.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.containsValue(System.Object)">
            <summary>
            Returns true if this RenderingHints maps one or more keys to the
            specified value.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.entrySet">
            <summary>
            Returns a <code>Set</code> view of the mappings contained
            in this <code>RenderingHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.Equals(System.Object)">
            <summary>
            Compares the specified <code>Object</code> with this
            <code>RenderingHints</code> for equality.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.get(System.Object)">
            <summary>
            Returns the value to which the specified key is mapped.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.GetHashCode">
            <summary>
            Returns the hash code value for this <code>RenderingHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.isEmpty">
            <summary>
            Returns <code>true</code> if this
            <code>RenderingHints</code> contains no key-value mappings.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.keySet">
            <summary>
            Returns a <code>Set</code> view of the Keys contained in this
            <code>RenderingHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.put(System.Object,System.Object)">
            <summary>
            Maps the specified <code>key</code> to the specified
            <code>value</code> in this <code>RenderingHints</code> object.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.putAll(java.util.Map)">
            <summary>
            Copies all of the mappings from the specified <code>Map</code>
            to this <code>RenderingHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.remove(System.Object)">
            <summary>
            Removes the key and its corresponding value from this
            <code>RenderingHints</code> object.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.size">
            <summary>
            Returns the number of key-value mappings in this
            <code>RenderingHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.ToString">
            <summary>
            Returns a rather long string representation of the hashmap
            which contains the mappings of keys to values for this
            <code>RenderingHints</code> object.
            </summary>
        </member>
        <member name="M:java.awt.RenderingHints.values">
            <summary>
            Returns a <code>Collection</code> view of the values
            contained in this <code>RenderinHints</code>.
            </summary>
        </member>
        <member name="M:java.awt.Shape.contains(System.Double,System.Double)">
            <summary>
            Tests if the specified coordinates are inside the boundary of the
            <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.Shape.contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the <code>Shape</code> entirely contains
            the specified rectangular area.
            </summary>
        </member>
        <member name="M:java.awt.Shape.contains(java.awt.geom.Point2D)">
            <summary>
            Tests if a specified <A HREF="../../java/awt/geom/Point2D.html" title="class in java.awt.geom"><CODE>Point2D</CODE></A> is inside the boundary
            of the <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.Shape.contains(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of the <code>Shape</code> entirely contains the
            specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.Shape.getBounds">
            <summary>
            Returns an integer <A HREF="../../java/awt/Rectangle.html" title="class in java.awt"><CODE>Rectangle</CODE></A> that completely encloses the
            <code>Shape</code>.
            </summary>
        </member>
        <member name="M:java.awt.Shape.getBounds2D">
            <summary>
            Returns a high precision and more accurate bounding box of
            the <code>Shape</code> than the <code>getBounds</code> method.
            </summary>
        </member>
        <member name="M:java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform)">
            <summary>
            Returns an iterator object that iterates along the
            <code>Shape</code> boundary and provides access to the geometry of the
            <code>Shape</code> outline.
            </summary>
        </member>
        <member name="M:java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform,System.Double)">
            <summary>
            Returns an iterator object that iterates along the <code>Shape</code>
            boundary and provides access to a flattened view of the
            <code>Shape</code> outline geometry.
            </summary>
        </member>
        <member name="M:java.awt.Shape.intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the <code>Shape</code> intersects the
            interior of a specified rectangular area.
            </summary>
        </member>
        <member name="M:java.awt.Shape.intersects(java.awt.geom.Rectangle2D)">
            <summary>
            Tests if the interior of the <code>Shape</code> intersects the
            interior of a specified <code>Rectangle2D</code>.
            </summary>
        </member>
        <member name="M:java.awt.Stroke.createStrokedShape(java.awt.Shape)">
            <summary>
            Returns an outline <code>Shape</code> which encloses the area that
            should be painted when the <code>Shape</code> is stroked according
            to the rules defined by the
            object implementing the <code>Stroke</code> interface.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.contentsLost">
            <summary>
            Returns <code>true</code> if rendering data was lost since last
            <code>validate</code> call.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.createGraphics">
            <summary>
            Creates a <code>Graphics2D</code>, which can be used to draw into
            this <code>VolatileImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.flush">
            <summary>
            Releases system resources currently consumed by this image.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getCapabilities">
            <summary>
            Returns an ImageCapabilities object which can be
            inquired as to the specific capabilities of this
            VolatileImage.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getGraphics">
            <summary>
            This method returns a <A HREF="../../../java/awt/Graphics2D.html" title="class in java.awt"><CODE>Graphics2D</CODE></A>, but is here
            for backwards compatibility.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getHeight">
            <summary>
            Returns the height of the <code>VolatileImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getSnapshot">
            <summary>
            Returns a static snapshot image of this object.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getSource">
            <summary>
            This returns an ImageProducer for this VolatileImage.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.getWidth">
            <summary>
            Returns the width of the <code>VolatileImage</code>.
            </summary>
        </member>
        <member name="M:java.awt.image.VolatileImage.validate(java.awt.GraphicsConfiguration)">
            <summary>
            Attempts to restore the drawing surface of the image if the surface
            had been lost since the last <code>validate</code> call.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.#ctor(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Constructs a new <code>PropertyChangeEvent</code>.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.getNewValue">
            <summary>
            Sets the new value for the property, expressed as an Object.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.getOldValue">
            <summary>
            Gets the old value for the property, expressed as an Object.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.getPropagationId">
            <summary>
            The "propagationId" field is reserved for future use.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.getPropertyName">
            <summary>
            Gets the programmatic name of the property that was changed.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeEvent.setPropagationId(System.Object)">
            <summary>
            Sets the propagationId object for the event.
            </summary>
        </member>
        <member name="M:java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)">
            <summary>
            This method gets called when a bound property is changed.
            </summary>
        </member>
        <member name="M:java.beans.VetoableChangeListener.vetoableChange(java.beans.PropertyChangeEvent)">
            <summary>
            This method gets called when a constrained property is changed.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.#ctor(java.io.OutputStream)">
            <summary>
            Creates an output stream filter built on top of the specified
            underlying output stream.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.close">
            <summary>
            Closes this output stream and releases any system resources
            associated with the stream.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.flush">
            <summary>
            Flushes this output stream and forces any buffered output bytes
            to be written out to the stream.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.write(System.SByte[])">
            <summary>
            Writes <code>b.length</code> bytes to this output stream.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes <code>len</code> bytes from the specified
            <code>sbyte</code> array starting at offset <code>off</code> to
            this output stream.
            </summary>
        </member>
        <member name="M:java.io.FilterOutputStream.write(System.Int32)">
            <summary>
            Writes the specified <code>sbyte</code> to this output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.write(System.SByte[])">
            <summary>
            Writes to the output stream all the bytes in array <code>b</code>.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes <code>len</code> bytes from array
            <code>b</code>, in order,  to
            the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.write(System.Int32)">
            <summary>
            Writes to the output stream the eight
            low-order bits of the argument <code>b</code>.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeBoolean(System.Boolean)">
            <summary>
            Writes a <code>boolean</code> value to this output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeByte(System.Int32)">
            <summary>
            Writes to the output stream the eight low-
            order bits of the argument <code>v</code>.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeBytes(System.String)">
            <summary>
            Writes a string to the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeChar(System.Int32)">
            <summary>
            Writes a <code>char</code> value, wich
            is comprised of two bytes, to the
            output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeChars(System.String)">
            <summary>
            Writes every character in the string <code>s</code>,
            to the output stream, in order,
            two bytes per character.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeDouble(System.Double)">
            <summary>
            Writes a <code>double</code> value,
            which is comprised of eight bytes, to the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeFloat(System.Single)">
            <summary>
            Writes a <code>float</code> value,
            which is comprised of four bytes, to the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeInt(System.Int32)">
            <summary>
            Writes an <code>int</code> value, which is
            comprised of four bytes, to the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeLong(System.Int64)">
            <summary>
            Writes a <code>long</code> value, which is
            comprised of eight bytes, to the output stream.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeShort(System.Int32)">
            <summary>
            Writes two bytes to the output
            stream to represent the value of the argument.
            </summary>
        </member>
        <member name="M:java.io.DataOutput.writeUTF(System.String)">
            <summary>
            Writes two bytes of length information
            to the output stream, followed
            by the Java modified UTF representation
            of  every character in the string <code>s</code>.
            </summary>
        </member>
        <member name="T:java.io.DataInput">
            <summary>
            http://java.sun.com/j2se/1.4.2/docs/api/java/io/DataInput.html
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.available">
            <summary>
            Returns the number of bytes that can be read
            without blocking.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.close">
            <summary>
            Closes the input stream.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.read">
            <summary>
            Reads a sbyte of data.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.read(System.SByte[])">
            <summary>
            Reads into an array of bytes.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads into an array of bytes.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.readObject">
            <summary>
            Read and return an object.
            </summary>
        </member>
        <member name="M:java.io.ObjectInput.skip(System.Int64)">
            <summary>
            Skips n bytes of input.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.write(System.SByte[])">
            <summary>
            Writes an array of bytes.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes a sub array of bytes.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.write(System.Int32)">
            <summary>
            Writes a sbyte.
            </summary>
        </member>
        <member name="M:java.io.ObjectOutput.writeObject(System.Object)">
            <summary>
            Write an object to the underlying storage or stream.
            </summary>
        </member>
        <member name="M:java.io.Reader.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.Reader.mark(System.Int32)">
            <summary>
            Mark the present position in the stream.
            </summary>
        </member>
        <member name="M:java.io.Reader.markSupported">
            <summary>
            Tell whether this stream supports the mark() operation.
            </summary>
        </member>
        <member name="M:java.io.Reader.read">
            <summary>
            Read a single character.
            </summary>
        </member>
        <member name="M:java.io.Reader.read(System.Char[])">
            <summary>
            Read characters into an array.
            </summary>
        </member>
        <member name="M:java.io.Reader.read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters into a portion of an array.
            </summary>
        </member>
        <member name="M:java.io.Reader.ready">
            <summary>
            Tell whether this stream is ready to be read.
            </summary>
        </member>
        <member name="M:java.io.Reader.reset">
            <summary>
            Reset the stream.
            </summary>
        </member>
        <member name="M:java.io.Reader.skip(System.Int64)">
            <summary>
            Skip characters.
            </summary>
        </member>
        <member name="M:java.io.StringReader.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.StringReader.mark(System.Int32)">
            <summary>
            Mark the present position in the stream.
            </summary>
        </member>
        <member name="M:java.io.StringReader.markSupported">
            <summary>
            Tell whether this stream supports the mark() operation, which it does.
            </summary>
        </member>
        <member name="M:java.io.StringReader.read">
            <summary>
            Read a single character.
            </summary>
        </member>
        <member name="M:java.io.StringReader.read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters into a portion of an array.
            </summary>
        </member>
        <member name="M:java.io.StringReader.ready">
            <summary>
            Tell whether this stream is ready to be read.
            </summary>
        </member>
        <member name="M:java.io.StringReader.reset">
            <summary>
            Reset the stream to the most recent mark, or to the beginning of the
            string if it has never been marked.
            </summary>
        </member>
        <member name="M:java.io.StringReader.skip(System.Int64)">
            <summary>
            Skip characters.
            </summary>
        </member>
        <member name="T:java.io.Writer">
            <summary>
            public abstract class Writer
            </summary>
        </member>
        <member name="M:java.io.Writer.close">
            <summary>
            Close the stream, flushing it first.
            </summary>
        </member>
        <member name="M:java.io.Writer.flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:java.io.Writer.write(System.Char[])">
            <summary>
            Write an array of characters.
            </summary>
        </member>
        <member name="M:java.io.Writer.write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a portion of an array of characters.
            </summary>
        </member>
        <member name="M:java.io.Writer.write(System.Int32)">
            <summary>
            Write a single character.
            </summary>
        </member>
        <member name="M:java.io.Writer.write(System.String)">
            <summary>
            Write a string.
            </summary>
        </member>
        <member name="M:java.io.Writer.write(System.String,System.Int32,System.Int32)">
            <summary>
            Write a portion of a string.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.#ctor">
            <summary>
            Create a new string writer, using the default initial string-buffer
            size.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.#ctor(System.Int32)">
            <summary>
            Create a new string writer, using the specified initial string-buffer
            size.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.close">
            <summary>
            Closing a <tt>StringWriter</tt> has no effect.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.getBuffer">
            <summary>
            Return the string buffer itself.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.ToString">
            <summary>
            Return the buffer's current value as a string.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a portion of an array of characters.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.write(System.Int32)">
            <summary>
            Write a single character.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.write(System.String)">
            <summary>
            Write a string.
            </summary>
        </member>
        <member name="M:java.io.StringWriter.write(System.String,System.Int32,System.Int32)">
            <summary>
            Write a portion of a string.
            </summary>
        </member>
        <member name="M:java.lang.Character.#ctor(System.Char)">
            <summary>
            Constructs a newly allocated <code>Character</code> object that
            represents the specified <code>char</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Character.charValue">
            <summary>
            Returns the value of this <code>Character</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Character.compareTo(java.lang.Character)">
            <summary>
            Compares two <code>Character</code> objects numerically.
            </summary>
        </member>
        <member name="M:java.lang.Character.compareTo(System.Object)">
            <summary>
            Compares this <code>Character</code> object to another object.
            </summary>
        </member>
        <member name="M:java.lang.Character.digit(System.Char,System.Int32)">
            <summary>
            Returns the numeric value of the character <code>ch</code> in the
            specified radix.
            </summary>
        </member>
        <member name="M:java.lang.Character.Equals(System.Object)">
            <summary>
            Compares this object against the specified object.
            </summary>
        </member>
        <member name="M:java.lang.Character.forDigit(System.Int32,System.Int32)">
            <summary>
            Determines the character representation for a specific digit in
            the specified radix.
            </summary>
        </member>
        <member name="M:java.lang.Character.getDirectionality(System.Char)">
            <summary>
            Returns the Unicode directionality property for the given
            character.
            </summary>
        </member>
        <member name="M:java.lang.Character.getNumericValue(System.Char)">
            <summary>
            Returns the <code>int</code> value that the specified Unicode
            character represents.
            </summary>
        </member>
        <member name="M:java.lang.Character.getType(System.Char)">
            <summary>
            Returns a value indicating a character's general category.
            </summary>
        </member>
        <member name="M:java.lang.Character.GetHashCode">
            <summary>
            Returns a hash code for this <code>Character</code>.
            </summary>
        </member>
        <member name="M:java.lang.Character.isDefined(System.Char)">
            <summary>
            Determines if a character is defined in Unicode.
            </summary>
        </member>
        <member name="M:java.lang.Character.isDigit(System.Char)">
            <summary>
            Determines if the specified character is a digit.
            </summary>
        </member>
        <member name="M:java.lang.Character.isIdentifierIgnorable(System.Char)">
            <summary>
            Determines if the specified character should be regarded as
            an ignorable character in a Java identifier or a Unicode identifier.
            </summary>
        </member>
        <member name="M:java.lang.Character.isISOControl(System.Char)">
            <summary>
            Determines if the specified character is an ISO control
            character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isJavaIdentifierPart(System.Char)">
            <summary>
            Determines if the specified character may be part of a Java
            identifier as other than the first character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isJavaIdentifierStart(System.Char)">
            <summary>
            Determines if the specified character is
            permissible as the first character in a Java identifier.
            </summary>
        </member>
        <member name="M:java.lang.Character.isJavaLetter(System.Char)">
            <summary>
            <B>Deprecated.</B> <I>Replaced by isJavaIdentifierStart(char).</I>
            </summary>
        </member>
        <member name="M:java.lang.Character.isJavaLetterOrDigit(System.Char)">
            <summary>
            <B>Deprecated.</B> <I>Replaced by isJavaIdentifierPart(char).</I>
            </summary>
        </member>
        <member name="M:java.lang.Character.isLetter(System.Char)">
            <summary>
            Determines if the specified character is a letter.
            </summary>
        </member>
        <member name="M:java.lang.Character.isLetterOrDigit(System.Char)">
            <summary>
            Determines if the specified character is a letter or digit.
            </summary>
        </member>
        <member name="M:java.lang.Character.isLowerCase(System.Char)">
            <summary>
            Determines if the specified character is a lowercase character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isMirrored(System.Char)">
            <summary>
            Determines whether the character is mirrored according to the
            Unicode specification.
            </summary>
        </member>
        <member name="M:java.lang.Character.isSpace(System.Char)">
            <summary>
            <B>Deprecated.</B> <I>Replaced by isWhitespace(char).</I>
            </summary>
        </member>
        <member name="M:java.lang.Character.isSpaceChar(System.Char)">
            <summary>
            Determines if the specified character is a Unicode space character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isTitleCase(System.Char)">
            <summary>
            Determines if the specified character is a titlecase character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isUnicodeIdentifierPart(System.Char)">
            <summary>
            Determines if the specified character may be part of a Unicode
            identifier as other than the first character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isUnicodeIdentifierStart(System.Char)">
            <summary>
            Determines if the specified character is permissible as the
            first character in a Unicode identifier.
            </summary>
        </member>
        <member name="M:java.lang.Character.isUpperCase(System.Char)">
            <summary>
            Determines if the specified character is an uppercase character.
            </summary>
        </member>
        <member name="M:java.lang.Character.isWhitespace(System.Char)">
            <summary>
            Determines if the specified character is white space according to Java.
            </summary>
        </member>
        <member name="M:java.lang.Character.toLowerCase(System.Char)">
            <summary>
            Converts the character argument to lowercase using case
            mapping information from the UnicodeData file.
            </summary>
        </member>
        <member name="M:java.lang.Character.ToString">
            <summary>
            Returns a <code>String</code> object representing this
            <code>Character</code>'s value.
            </summary>
        </member>
        <member name="M:java.lang.Character.ToString(System.Char)">
            <summary>
            Returns a <code>String</code> object representing the
            specified <code>char</code>.
            </summary>
        </member>
        <member name="M:java.lang.Character.toTitleCase(System.Char)">
            <summary>
            Converts the character argument to titlecase using case mapping
            information from the UnicodeData file.
            </summary>
        </member>
        <member name="M:java.lang.Character.toUpperCase(System.Char)">
            <summary>
            Converts the character argument to uppercase using case mapping
            information from the UnicodeData file.
            </summary>
        </member>
        <member name="M:java.lang.Number.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.lang.Number.byteValue">
            <summary>
            Returns the value of the specified number as a <code>sbyte</code>.
            </summary>
        </member>
        <member name="M:java.lang.Number.doubleValue">
            <summary>
            Returns the value of the specified number as a <code>double</code>.
            </summary>
        </member>
        <member name="M:java.lang.Number.floatValue">
            <summary>
            Returns the value of the specified number as a <code>float</code>.
            </summary>
        </member>
        <member name="M:java.lang.Number.intValue">
            <summary>
            Returns the value of the specified number as an <code>int</code>.
            </summary>
        </member>
        <member name="M:java.lang.Number.longValue">
            <summary>
            Returns the value of the specified number as a <code>long</code>.
            </summary>
        </member>
        <member name="M:java.lang.Number.shortValue">
            <summary>
            Returns the value of the specified number as a <code>short</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.AccessibleObject.isAccessible">
            <summary>
            Get the value of the <tt>accessible</tt> flag for this object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],System.Boolean)">
            <summary>
            Convenience method to set the <tt>accessible</tt> flag for an
            array of objects with a single security check (for efficiency).
            </summary>
        </member>
        <member name="M:java.lang.reflect.AccessibleObject.setAccessible(System.Boolean)">
            <summary>
            Set the <tt>accessible</tt> flag for this object to
            the indicated boolean value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.InvocationTargetException.getCause">
            <summary>
            Returns the the cause of this exception (the thrown target exception, which may be null).
            </summary>
            <returns></returns>
        </member>
        <member name="M:java.lang.reflect.InvocationTargetException.getTargetException">
            <summary>
            Get the thrown target exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.SByte[])">
            <summary>
            Translates a sbyte array containing the two's-complement binary
            representation of a BigInteger into a BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.Int32,System.SByte[])">
            <summary>
            Translates the sign-magnitude representation of a BigInteger into a
            BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.Int32,System.Int32,java.util.Random)">
            <summary>
            Constructs a randomly generated positive BigInteger that is probably
            prime, with the specified bitLength.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.Int32,java.util.Random)">
            <summary>
            Constructs a randomly generated BigInteger, uniformly distributed over
            the range <tt>0</tt> to <tt>(2<sup>numBits</sup> - 1)</tt>, inclusive.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.String)">
            <summary>
            Translates the decimal String representation of a BigInteger into a
            BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            Translates the String representation of a BigInteger in the specified
            radix into a BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.abs">
            <summary>
            Returns a BigInteger whose value is the absolute value of this
            BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.add(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this + val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.and(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this &amp; val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.andNot(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this &amp; ~val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.bitCount">
            <summary>
            Returns the number of bits in the two's complement representation
            of this BigInteger that differ from its sign bit.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.bitLength">
            <summary>
            Returns the number of bits in the minimal two's-complement
            representation of this BigInteger, <i>excluding</i> a sign bit.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.clearBit(System.Int32)">
            <summary>
            Returns a BigInteger whose value is equivalent to this BigInteger
            with the designated bit cleared.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.compareTo(java.math.BigInteger)">
            <summary>
            Compares this BigInteger with the specified BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.compareTo(System.Object)">
            <summary>
            Compares this BigInteger with the specified Object.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.divide(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this / val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.divideAndRemainder(java.math.BigInteger)">
            <summary>
            Returns an array of two BigIntegers containing <tt>(this / val)</tt>
            followed by <tt>(this % val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.doubleValue">
            <summary>
            Converts this BigInteger to a <code>double</code>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.Equals(System.Object)">
            <summary>
            Compares this BigInteger with the specified Object for equality.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.flipBit(System.Int32)">
            <summary>
            Returns a BigInteger whose value is equivalent to this BigInteger
            with the designated bit flipped.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.floatValue">
            <summary>
            Converts this BigInteger to a <code>float</code>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.gcd(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is the greatest common divisor of
            <tt>abs(this)</tt> and <tt>abs(val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.getLowestSetBit">
            <summary>
            Returns the index of the rightmost (lowest-order) one bit in this
            BigInteger (the number of zero bits to the right of the rightmost
            one bit).
            </summary>
        </member>
        <member name="M:java.math.BigInteger.GetHashCode">
            <summary>
            Returns the hash code for this BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.intValue">
            <summary>
            Converts this BigInteger to an <code>int</code>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.isProbablePrime(System.Int32)">
            <summary>
            Returns <tt>true</tt> if this BigInteger is probably prime,
            <tt>false</tt> if it's definitely composite.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.longValue">
            <summary>
            Converts this BigInteger to a <code>long</code>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.max(java.math.BigInteger)">
            <summary>
            Returns the maximum of this BigInteger and <tt>val</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.min(java.math.BigInteger)">
            <summary>
            Returns the minimum of this BigInteger and <tt>val</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.mod(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this mod m</tt>).
            </summary>
        </member>
        <member name="M:java.math.BigInteger.modInverse(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this<sup>-1</sup> mod m)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.modPow(java.math.BigInteger,java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is
            <tt>(this<sup>exponent</sup> mod m)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.multiply(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this * val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.negate">
            <summary>
            Returns a BigInteger whose value is <tt>(-this)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.not">
            <summary>
            Returns a BigInteger whose value is <tt>(~this)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.or(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this | val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.pow(System.Int32)">
            <summary>
            Returns a BigInteger whose value is <tt>(this<sup>exponent</sup>)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.probablePrime(System.Int32,java.util.Random)">
            <summary>
            Returns a positive BigInteger that is probably prime, with the
            specified bitLength.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.remainder(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this % val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.setBit(System.Int32)">
            <summary>
            Returns a BigInteger whose value is equivalent to this BigInteger
            with the designated bit set.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.shiftLeft(System.Int32)">
            <summary>
            Returns a BigInteger whose value is <tt>(this &lt;&lt; n)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.shiftRight(System.Int32)">
            <summary>
            Returns a BigInteger whose value is <tt>(this &gt;&gt; n)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.signum">
            <summary>
            Returns the signum function of this BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.subtract(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this - val)</tt>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.testBit(System.Int32)">
            <summary>
            Returns <tt>true</tt> if and only if the designated bit is set.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.toByteArray">
            <summary>
            Returns a sbyte array containing the two's-complement
            representation of this BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.ToString">
            <summary>
            Returns the decimal String representation of this BigInteger.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.ToString(System.Int32)">
            <summary>
            Returns the String representation of this BigInteger in the
            given radix.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.valueOf(System.Int64)">
            <summary>
            Returns a BigInteger whose value is equal to that of the
            specified <code>long</code>.
            </summary>
        </member>
        <member name="M:java.math.BigInteger.xor(java.math.BigInteger)">
            <summary>
            Returns a BigInteger whose value is <tt>(this ^ val)</tt>.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.Equals(System.Object)">
            <summary>
            Compares this object against the specified object.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getAddress">
            <summary>
            Returns the raw IP address of this <code>InetAddress</code>
            object.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getAllByName(System.String)">
            <summary>
            Given the name of a host, returns an array of its IP addresses,
            based on the configured name service on the system.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getByAddress(System.SByte[])">
            <summary>
            Returns an <code>InetAddress</code> object given the raw IP address .
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getByAddress(System.String,System.SByte[])">
            <summary>
            Create an InetAddress based on the provided host name and IP address
            No name service is checked for the validity of the address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getByName(System.String)">
            <summary>
            Determines the IP address of a host, given the host's name.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getCanonicalHostName">
            <summary>
            Gets the fully qualified domain name for this IP address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getHostAddress">
            <summary>
            Returns the IP address string in textual presentation.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getHostName">
            <summary>
            Gets the host name for this IP address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.getLocalHost">
            <summary>
            Returns the local host.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.GetHashCode">
            <summary>
            Returns a hashcode for this IP address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isAnyLocalAddress">
            <summary>
            Utility routine to check if the InetAddress in a wildcard address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isLinkLocalAddress">
            <summary>
            Utility routine to check if the InetAddress is an link local address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isLoopbackAddress">
            <summary>
            Utility routine to check if the InetAddress is a loopback address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMCGlobal">
            <summary>
            Utility routine to check if the multicast address has global scope.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMCLinkLocal">
            <summary>
            Utility routine to check if the multicast address has link scope.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMCNodeLocal">
            <summary>
            Utility routine to check if the multicast address has node scope.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMCOrgLocal">
            <summary>
            Utility routine to check if the multicast address has organization scope.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMCSiteLocal">
            <summary>
            Utility routine to check if the multicast address has site scope.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isMulticastAddress">
            <summary>
            Utility routine to check if the InetAddress is an
            IP multicast address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.isSiteLocalAddress">
            <summary>
            Utility routine to check if the InetAddress is a site local address.
            </summary>
        </member>
        <member name="M:java.net.InetAddress.ToString">
            <summary>
            Converts this IP address to a <code>String</code>.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.Equals(System.Object)">
            <summary>
            Compares this object against the specified object.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getByInetAddress(java.net.InetAddress)">
            <summary>
            Convenience method to search for a network interface that
            has the specified Internet Protocol (IP) address bound to
            it.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getByName(System.String)">
            <summary>
            Searches for the network interface with the specified name.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getDisplayName">
            <summary>
            Get the display name of this network interface.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getInetAddresses">
            <summary>
            Convenience method to return an Enumeration with all or a
            subset of the InetAddresses bound to this network interface.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getName">
            <summary>
            Get the name of this network interface.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.getNetworkInterfaces">
            <summary>
            Returns all the interfaces on this machine.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.GetHashCode">
            <summary>
            Returns a hash code value for the object.
            </summary>
        </member>
        <member name="M:java.net.NetworkInterface.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:java.net.URLConnection.getHeaderField(System.String)">
            <summary>
            Returns the value of the named header field.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:java.net.HttpURLConnection.setInstanceFollowRedirects(System.Boolean)">
            <summary>
            Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance.
            </summary>
            <param name="followRedirects"></param>
        </member>
        <member name="M:java.net.HttpURLConnection.setRequestMethod(System.String)">
            <summary>
            Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:javax.servlet.ServletResponse.setContentType(System.String)">
            <summary>
            Sets the content type of the response being sent to the client, if the response has not been committed yet.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:javax.servlet.ServletResponse.getWriter">
            <summary>
            Returns a PrintWriter object that can send character text to the client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:javax.servlet.ServletResponse.getOutputStream">
            <summary>
            Returns a ServletOutputStream suitable for writing binary data in the response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.addCookie(javax.servlet.http.Cookie)">
            <summary>
            Adds the specified cookie to the response.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.addDateHeader(System.String,System.Int64)">
            <summary>
            Adds a response header with the given name and
            date-value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.addHeader(System.String,System.String)">
            <summary>
            Adds a response header with the given name and value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.addIntHeader(System.String,System.Int32)">
            <summary>
            Adds a response header with the given name and
            integer value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.containsHeader(System.String)">
            <summary>
            Returns a boolean indicating whether the named response header
            has already been set.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.encodeRedirectUrl(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of version 2.1, use
            encodeRedirectURL(String url) instead</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.encodeRedirectURL(System.String)">
            <summary>
            Encodes the specified URL for use in the
            <code>sendRedirect</code> method or, if encoding is not needed,
            returns the URL unchanged.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.encodeUrl(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of version 2.1, use encodeURL(String url) instead</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.encodeURL(System.String)">
            <summary>
            Encodes the specified URL by including the session ID in it,
            or, if encoding is not needed, returns the URL unchanged.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.sendError(System.Int32)">
            <summary>
            Sends an error response to the client using the specified status
            code and clearing the buffer.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.sendError(System.Int32,System.String)">
            <summary>
            Sends an error response to the client using the specified
            status.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.sendRedirect(System.String)">
            <summary>
            Sends a temporary redirect response to the client using the
            specified redirect location URL.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.setDateHeader(System.String,System.Int64)">
            <summary>
            Sets a response header with the given name and
            date-value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.setHeader(System.String,System.String)">
            <summary>
            Sets a response header with the given name and value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.setIntHeader(System.String,System.Int32)">
            <summary>
            Sets a response header with the given name and
            integer value.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.setStatus(System.Int32)">
            <summary>
            Sets the status code for this response.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletResponse.setStatus(System.Int32,System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of version 2.1, due to ambiguous meaning of the
            message parameter. To set a status code
            use <code>setStatus(int)</code>, to send an error with a description
            use <code>sendError(int, String)</code>.
            
            Sets the status code and message for this response.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getAuthType">
            <summary>
            Returns the name of the authentication scheme used to protect
            the servlet.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getContextPath">
            <summary>
            Returns the portion of the request URI that indicates the context
            of the request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getCookies">
            <summary>
            Returns an array containing all of the <code>Cookie</code>
            objects the client sent with this request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getDateHeader(System.String)">
            <summary>
            Returns the value of the specified request header
            as a <code>long</code> value that represents a
            <code>Date</code> object.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getHeader(System.String)">
            <summary>
            Returns the value of the specified request header
            as a <code>String</code>.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getHeaderNames">
            <summary>
            Returns an enumeration of all the header names
            this request contains.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getHeaders(System.String)">
            <summary>
            Returns all the values of the specified request header
            as an <code>Enumeration</code> of <code>String</code> objects.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getIntHeader(System.String)">
            <summary>
            Returns the value of the specified request header
            as an <code>int</code>.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getMethod">
            <summary>
            Returns the name of the HTTP method with which this
            request was made, for example, GET, POST, or PUT.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getPathInfo">
            <summary>
            Returns any extra path information associated with
            the URL the client sent when it made this request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getPathTranslated">
            <summary>
            Returns any extra path information after the servlet name
            but before the query string, and translates it to a real
            path.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getQueryString">
            <summary>
            Returns the query string that is contained in the request
            URL after the path.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getRemoteUser">
            <summary>
            Returns the login of the user making this request, if the
            user has been authenticated, or <code>null</code> if the user
            has not been authenticated.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getRequestedSessionId">
            <summary>
            Returns the session ID specified by the client.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getRequestURI">
            <summary>
            Returns the part of this request's URL from the protocol
            name up to the query string in the first line of the HTTP request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getRequestURL">
            <summary>
            Reconstructs the URL the client used to make the request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getServletPath">
            <summary>
            Returns the part of this request's URL that calls
            the servlet.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getSession">
            <summary>
            Returns the current session associated with this request,
            or if the request does not have a session, creates one.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getSession(System.Boolean)">
            <summary>
            Returns the current <code>HttpSession</code>
            associated with this request or, if there is no
            current session and <code>create</code> is true, returns
            a new session.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.getUserPrincipal">
            <summary>
            Returns a <code>java.security.Principal</code> object containing
            the name of the current authenticated user.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromCookie">
            <summary>
            Checks whether the requested session ID came in as a cookie.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromUrl">
            <summary>
            <B>Deprecated.</B> <I>As of Version 2.1 of the Java Servlet
            API, use <A HREF="../../../javax/servlet/http/HttpServletRequest.html#isRequestedSessionIdFromURL()"><CODE>isRequestedSessionIdFromURL()</CODE></A>
            instead.</I>
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.isRequestedSessionIdFromURL">
            <summary>
            Checks whether the requested session ID came in as part of the
            request URL.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.isRequestedSessionIdValid">
            <summary>
            Checks whether the requested session ID is still valid.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServletRequest.isUserInRole(System.String)">
            <summary>
            Returns a boolean indicating whether the authenticated user is included
            in the specified logical "role".
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.#ctor">
            <summary>
            Does nothing, because this is an abstract class.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doDelete(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method)
            to allow a servlet to handle a DELETE request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method) to
            allow a servlet to handle a GET request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doHead(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Receives an HTTP HEAD request from the protected
            <code>service</code> method and handles the
            request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doOptions(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method)
            to allow a servlet to handle a OPTIONS request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method)
            to allow a servlet to handle a POST request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method)
            to allow a servlet to handle a PUT request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Called by the server (via the <code>service</code> method)
            to allow a servlet to handle a TRACE request.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.getLastModified(javax.servlet.http.HttpServletRequest)">
            <summary>
            Returns the time the <code>HttpServletRequest</code>
            object was last modified,
            in milliseconds since midnight January 1, 1970 GMT.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)">
            <summary>
            Receives standard HTTP requests from the public
            <code>service</code> method and dispatches
            them to the <code>do</code><i>XXX</i> methods defined in
            this class.
            </summary>
        </member>
        <member name="M:javax.servlet.http.HttpServlet.service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)">
            <summary>
            Dispatches client requests to the protected
            <code>service</code> method.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.getDOMImplementation">
            <summary>
            Obtain an instance of a <A HREF="../../../org/w3c/dom/DOMImplementation.html" title="interface in org.w3c.dom"><CODE>DOMImplementation</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.isNamespaceAware">
            <summary>
            Indicates whether or not this parser is configured to
            understand namespaces.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.isValidating">
            <summary>
            Indicates whether or not this parser is configured to
            validate XML documents.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.newDocument">
            <summary>
            Obtain a new instance of a DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object
            to build a DOM tree with.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.parse(java.io.File)">
            <summary>
            Parse the content of the given file as an XML document
            and return a new DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)">
            <summary>
            Parse the content of the given input source as an XML document
            and return a new DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)">
            <summary>
            Parse the content of the given <code>InputStream</code> as an XML
            document and return a new DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream,System.String)">
            <summary>
            Parse the content of the given <code>InputStream</code> as an XML
            document and return a new DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.parse(System.String)">
            <summary>
            Parse the content of the given URI as an XML document
            and return a new DOM <A HREF="../../../org/w3c/dom/Document.html" title="interface in org.w3c.dom"><CODE>Document</CODE></A> object.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.setEntityResolver(org.xml.sax.EntityResolver)">
            <summary>
            Specify the <A HREF="../../../org/xml/sax/EntityResolver.html" title="interface in org.xml.sax"><CODE>EntityResolver</CODE></A> to be used to resolve
            entities present in the XML document to be parsed.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilder.setErrorHandler(org.xml.sax.ErrorHandler)">
            <summary>
            Specify the <A HREF="../../../org/xml/sax/ErrorHandler.html" title="interface in org.xml.sax"><CODE>ErrorHandler</CODE></A> to be used to report
            errors present in the XML document to be parsed.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.getAttribute(System.String)">
            <summary>
            Allows the user to retrieve specific attributes on the underlying
            implementation.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isCoalescing">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which converts CDATA nodes to Text nodes and appends it to
            the adjacent (if any) Text node.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isExpandEntityReferences">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which expand entity reference nodes.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isIgnoringComments">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which ignores comments.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isIgnoringElementContentWhitespace">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which ignore ignorable whitespace in element content.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isNamespaceAware">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which are namespace aware.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.isValidating">
            <summary>
            Indicates whether or not the factory is configured to produce
            parsers which validate the XML content during parse.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder">
            <summary>
            Creates a new instance of a <A HREF="../../../javax/xml/parsers/DocumentBuilder.html" title="class in javax.xml.parsers"><CODE>DocumentBuilder</CODE></A>
            using the currently configured parameters.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.newInstance">
            <summary>
            Obtain a new instance of a
            <code>DocumentBuilderFactory</code>.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setAttribute(System.String,System.Object)">
            <summary>
            Allows the user to set specific attributes on the underlying
            implementation.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setCoalescing(System.Boolean)">
            <summary>
            Specifies that the parser produced by this code will
            convert CDATA nodes to Text nodes and append it to the
            adjacent (if any) text node.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setExpandEntityReferences(System.Boolean)">
            <summary>
            Specifies that the parser produced by this code will
            expand entity reference nodes.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setIgnoringComments(System.Boolean)">
            <summary>
            Specifies that the parser produced by this code will
            ignore comments.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setIgnoringElementContentWhitespace(System.Boolean)">
            <summary>
            Specifies that the parsers created by this  factory must eliminate
            whitespace in element content (sometimes known loosely as
            'ignorable whitespace') when parsing XML documents (see XML Rec
            2.10).
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(System.Boolean)">
            <summary>
            Specifies that the parser produced by this code will
            provide support for XML namespaces.
            </summary>
        </member>
        <member name="M:javax.xml.parsers.DocumentBuilderFactory.setValidating(System.Boolean)">
            <summary>
            Specifies that the parser produced by this code will
            validate documents as they are parsed.
            </summary>
        </member>
        <member name="T:java.io.BufferedReader">
            <summary>
            http://java.sun.com/j2se/1.4.2/docs/api/java/io/BufferedReader.html
            </summary>
        </member>
        <member name="M:java.io.BufferedReader.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.BufferedReader.read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters into a portion of an array.
            </summary>
        </member>
        <member name="M:java.io.BufferedReader.readLine">
            <summary>
            Read a line of text.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayInputStream.#ctor(System.SByte[])">
            <summary>
            Creates a ByteArrayInputStream  so that it uses buf as its buffer array.
            </summary>
            <param name="buf"></param>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.#ctor">
            <summary>
            Creates a new sbyte array output stream.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.#ctor(System.Int32)">
            <summary>
            Creates a new sbyte array output stream, with a buffer capacity of the specified size, in bytes.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.close">
            <summary>
            Closing a
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.reset">
            <summary>
            Resets the
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.size">
            <summary>
            Returns the current size of the buffer.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.toByteArray">
            <summary>
            Creates a newly allocated sbyte array.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.ToString">
            <summary>
            Converts the buffer's contents into a string, translating bytes into characters according to the platform's default character encoding.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.toString(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.toString(System.String)">
            <summary>
            Converts the buffer's contents into a string, translating bytes into characters according to the specified character encoding.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.write(System.Int32)">
            <summary>
            Writes the specified sbyte to this sbyte array output stream.
            </summary>
        </member>
        <member name="M:java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream)">
            <summary>
            Writes the complete contents of this sbyte array output stream to the specified output stream argument, as if by calling the output stream's write method using
            </summary>
        </member>
        <member name="T:java.io.OutputStreamWriter">
            <summary>
            public class OutputStreamWriter
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.#ctor(java.io.OutputStream)">
            <summary>
            Create an OutputStreamWriter that uses the default character encoding.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.getEncoding">
            <summary>
            Return the name of the character encoding being used by this stream.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a portion of an array of characters.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.write(System.Int32)">
            <summary>
            Write a single character.
            </summary>
        </member>
        <member name="M:java.io.OutputStreamWriter.write(System.String,System.Int32,System.Int32)">
            <summary>
            Write a portion of a string.
            </summary>
        </member>
        <member name="T:java.io.FileWriter">
            <summary>
            Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default sbyte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream. 
            </summary>
        </member>
        <member name="M:java.io.FileWriter.#ctor(java.io.File)">
            <summary>
            Constructs a FileWriter object given a File object.
            </summary>
        </member>
        <member name="M:java.io.FileWriter.#ctor(java.io.File,System.Boolean)">
            <summary>
            Constructs a FileWriter object given a File object.
            </summary>
        </member>
        <member name="M:java.io.FileWriter.#ctor(java.io.FileDescriptor)">
            <summary>
            Constructs a FileWriter object associated with a file descriptor.
            </summary>
        </member>
        <member name="M:java.io.FileWriter.#ctor(System.String)">
            <summary>
            Constructs a FileWriter object given a file name.
            </summary>
        </member>
        <member name="M:java.io.FileWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written.
            </summary>
        </member>
        <member name="M:java.io.InputStreamReader.#ctor(java.io.InputStream,System.String)">
            <summary>
            Creates an InputStreamReader that uses the named charset.
            </summary>
            <param name="in"></param>
            <param name="charsetName"></param>
        </member>
        <member name="M:java.io.InputStreamReader.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.InputStreamReader.getEncoding">
            <summary>
            Return the name of the character encoding being used by this stream.
            </summary>
        </member>
        <member name="M:java.io.InputStreamReader.read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters into a portion of an array.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.#ctor">
            <summary>
            Creates a piped output stream that is not yet connected to a
            piped input stream.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.#ctor(java.io.PipedInputStream)">
            <summary>
            Creates a piped output stream connected to the specified piped
            input stream.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.close">
            <summary>
            Closes this piped output stream and releases any system resources
            associated with this stream.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.connect(java.io.PipedInputStream)">
            <summary>
            Connects this piped output stream to a receiver.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.flush">
            <summary>
            Flushes this output stream and forces any buffered output bytes
            to be written out.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes <code>len</code> bytes from the specified sbyte array
            starting at offset <code>off</code> to this piped output stream.
            </summary>
        </member>
        <member name="M:java.io.PipedOutputStream.write(System.Int32)">
            <summary>
            Writes the specified <code>sbyte</code> to the piped output stream.
            </summary>
        </member>
        <member name="T:java.io.FileInputStream">
            <summary>
            http://java.sun.com/j2se/1.4.2/docs/api/java/io/FileInputStream.html
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readBoolean">
            <summary>
            See the general contract of the <code>readBoolean</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readByte">
            <summary>
            See the general contract of the <code>readByte</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readChar">
            <summary>
            See the general contract of the <code>readChar</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readDouble">
            <summary>
            See the general contract of the <code>readDouble</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readFloat">
            <summary>
            See the general contract of the <code>readFloat</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readFully(System.SByte[])">
            <summary>
            See the general contract of the <code>readFully</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readFully(System.SByte[],System.Int32,System.Int32)">
            <summary>
            See the general contract of the <code>readFully</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readInt">
            <summary>
            See the general contract of the <code>readInt</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readLine">
            <summary>
            <B>Deprecated.</B> <I>This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the <code>BufferedReader.readLine()</code> method.  Programs that use the <code>DataInputStream</code> class to read lines can be converted to use the <code>BufferedReader</code> class by replacing code of the form: <blockquote><pre>     DataInputStream d = new DataInputStream(in); </pre></blockquote> with: <blockquote><pre>     BufferedReader d          = new BufferedReader(new InputStreamReader(in)); </pre></blockquote></I>
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readLong">
            <summary>
            See the general contract of the <code>readLong</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readShort">
            <summary>
            See the general contract of the <code>readShort</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readUnsignedByte">
            <summary>
            See the general contract of the <code>readUnsignedByte</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readUnsignedShort">
            <summary>
            See the general contract of the <code>readUnsignedShort</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readUTF">
            <summary>
            See the general contract of the <code>readUTF</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.readUTF(java.io.DataInput)">
            <summary>
            Reads from the stream <code>in</code> a representation of a Unicode  character string encoded in Java modified UTF-8 format; this string of characters  is then returned as a <code>String</code>.
            </summary>
        </member>
        <member name="M:java.io.DataInputStream.skipBytes(System.Int32)">
            <summary>
            See the general contract of the <code>skipBytes</code> method of <code>DataInput</code>.
            </summary>
        </member>
        <member name="M:java.io.File.#ctor(java.io.File,System.String)">
            <summary>
            Creates a new <code>File</code> instance from a parent abstract
            pathname and a child pathname string.
            </summary>
        </member>
        <member name="M:java.io.File.#ctor(System.String)">
            <summary>
            Creates a new <code>File</code> instance by converting the given
            pathname string into an abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.#ctor(System.String,System.String)">
            <summary>
            Creates a new <code>File</code> instance from a parent pathname string
            and a child pathname string.
            </summary>
        </member>
        <member name="M:java.io.File.#ctor(java.net.URI)">
            <summary>
            Creates a new <tt>File</tt> instance by converting the given
            <tt>file:</tt> URI into an abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.canRead">
            <summary>
            Tests whether the application can read the file denoted by this
            abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.canWrite">
            <summary>
            Tests whether the application can modify to the file denoted by this
            abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.compareTo(java.io.File)">
            <summary>
            Compares two abstract pathnames lexicographically.
            </summary>
        </member>
        <member name="M:java.io.File.compareTo(System.Object)">
            <summary>
            Compares this abstract pathname to another object.
            </summary>
        </member>
        <member name="M:java.io.File.createNewFile">
            <summary>
            Atomically creates a new, empty file named by this abstract pathname if
            and only if a file with this name does not yet exist.
            </summary>
        </member>
        <member name="M:java.io.File.createTempFile(System.String,System.String)">
            <summary>
            Creates an empty file in the default temporary-file directory, using
            the given prefix and suffix to generate its name.
            </summary>
        </member>
        <member name="M:java.io.File.createTempFile(System.String,System.String,java.io.File)">
            <summary>
            Creates a new empty file in the specified directory, using the
            given prefix and suffix strings to generate its name.
            </summary>
        </member>
        <member name="M:java.io.File.delete">
            <summary>
            Deletes the file or directory denoted by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.deleteOnExit">
            <summary>
            Requests that the file or directory denoted by this abstract
            pathname be deleted when the virtual machine terminates.
            </summary>
        </member>
        <member name="M:java.io.File.Equals(System.Object)">
            <summary>
            Tests this abstract pathname for equality with the given object.
            </summary>
        </member>
        <member name="M:java.io.File.exists">
            <summary>
            Tests whether the file or directory denoted by this abstract pathname
            exists.
            </summary>
        </member>
        <member name="M:java.io.File.getAbsoluteFile">
            <summary>
            Returns the absolute form of this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.getAbsolutePath">
            <summary>
            Returns the absolute pathname string of this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.getCanonicalFile">
            <summary>
            Returns the canonical form of this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.getCanonicalPath">
            <summary>
            Returns the canonical pathname string of this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.getName">
            <summary>
            Returns the name of the file or directory denoted by this abstract
            pathname.
            </summary>
        </member>
        <member name="M:java.io.File.getParent">
            <summary>
            Returns the pathname string of this abstract pathname's parent, or
            <code>null</code> if this pathname does not name a parent directory.
            </summary>
        </member>
        <member name="M:java.io.File.getParentFile">
            <summary>
            Returns the abstract pathname of this abstract pathname's parent,
            or <code>null</code> if this pathname does not name a parent
            directory.
            </summary>
        </member>
        <member name="M:java.io.File.getPath">
            <summary>
            Converts this abstract pathname into a pathname string.
            </summary>
        </member>
        <member name="M:java.io.File.GetHashCode">
            <summary>
            Computes a hash code for this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.isAbsolute">
            <summary>
            Tests whether this abstract pathname is absolute.
            </summary>
        </member>
        <member name="M:java.io.File.isDirectory">
            <summary>
            Tests whether the file denoted by this abstract pathname is a
            directory.
            </summary>
        </member>
        <member name="M:java.io.File.isFile">
            <summary>
            Tests whether the file denoted by this abstract pathname is a normal
            file.
            </summary>
        </member>
        <member name="M:java.io.File.isHidden">
            <summary>
            Tests whether the file named by this abstract pathname is a hidden
            file.
            </summary>
        </member>
        <member name="M:java.io.File.lastModified">
            <summary>
            Returns the time that the file denoted by this abstract pathname was
            last modified.
            </summary>
        </member>
        <member name="M:java.io.File.length">
            <summary>
            Returns the length of the file denoted by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.list">
            <summary>
            Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.list(java.io.FilenameFilter)">
            <summary>
            Returns an array of strings naming the files and directories in the
            directory denoted by this abstract pathname that satisfy the specified
            filter.
            </summary>
        </member>
        <member name="M:java.io.File.listFiles">
            <summary>
            Returns an array of abstract pathnames denoting the files in the
            directory denoted by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.listFiles(java.io.FileFilter)">
            <summary>
            Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.
            </summary>
        </member>
        <member name="M:java.io.File.listFiles(java.io.FilenameFilter)">
            <summary>
            Returns an array of abstract pathnames denoting the files and
            directories in the directory denoted by this abstract pathname that
            satisfy the specified filter.
            </summary>
        </member>
        <member name="M:java.io.File.listRoots">
            <summary>
            List the available filesystem roots.
            </summary>
        </member>
        <member name="M:java.io.File.mkdir">
            <summary>
            Creates the directory named by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.mkdirs">
            <summary>
            Creates the directory named by this abstract pathname, including any
            necessary but nonexistent parent directories.
            </summary>
        </member>
        <member name="M:java.io.File.renameTo(java.io.File)">
            <summary>
            Renames the file denoted by this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.setLastModified(System.Int64)">
            <summary>
            Sets the last-modified time of the file or directory named by this
            abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.setReadOnly">
            <summary>
            Marks the file or directory named by this abstract pathname so that
            only read operations are allowed.
            </summary>
        </member>
        <member name="M:java.io.File.ToString">
            <summary>
            Returns the pathname string of this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.toURI">
            <summary>
            Constructs a <tt>file:</tt> URI that represents this abstract pathname.
            </summary>
        </member>
        <member name="M:java.io.File.toURL">
            <summary>
            Converts this abstract pathname into a <code>file:</code> URL.
            </summary>
        </member>
        <member name="M:java.io.PipedInputStream.connect(java.io.PipedOutputStream)">
            <summary>
            Causes this piped input stream to be connected to the piped  output stream <code>src</code>.
            </summary>
        </member>
        <member name="M:java.io.PipedInputStream.read">
            <summary>
            Reads the next sbyte of data from this piped input stream.
            </summary>
        </member>
        <member name="M:java.io.PipedInputStream.receive(System.Int32)">
            <summary>
            Receives a sbyte of data.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.#ctor(java.io.OutputStream)">
            <summary>
            Create a new print stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.#ctor(java.io.OutputStream,System.Boolean)">
            <summary>
            Create a new print stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.#ctor(java.io.OutputStream,System.Boolean,System.String)">
            <summary>
            Create a new print stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.checkError">
            <summary>
            Flush the stream and check its error state.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Boolean)">
            <summary>
            Print a boolean value.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Char)">
            <summary>
            Print a character.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Char[])">
            <summary>
            Print an array of characters.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Double)">
            <summary>
            Print a double-precision floating-point number.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Single)">
            <summary>
            Print a floating-point number.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Int32)">
            <summary>
            Print an integer.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Int64)">
            <summary>
            Print a long integer.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.Object)">
            <summary>
            Print an object.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.print(System.String)">
            <summary>
            Print a string.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println">
            <summary>
            Terminate the current line by writing the line separator string.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Boolean)">
            <summary>
            Print a boolean and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Char)">
            <summary>
            Print a character and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Char[])">
            <summary>
            Print an array of characters and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Double)">
            <summary>
            Print a double and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Single)">
            <summary>
            Print a float and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Int32)">
            <summary>
            Print an integer and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Int64)">
            <summary>
            Print a long and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.Object)">
            <summary>
            Print an Object and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.println(System.String)">
            <summary>
            Print a String and then terminate the line.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.setError">
            <summary>
            Set the error state of the stream to <code>true</code>.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Write <code>len</code> bytes from the specified sbyte array starting at
            offset <code>off</code> to this stream.
            </summary>
        </member>
        <member name="M:java.io.PrintStream.write(System.Int32)">
            <summary>
            Write the specified sbyte to this stream.
            </summary>
        </member>
        <member name="T:java.io.RandomAccessFile">
            <summary>
            http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.close">
            <summary>
            Closes this random access file stream and releases any system  resources associated with the stream.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.getChannel">
            <summary>
            Returns the unique <A HREF="../../java/nio/channels/FileChannel.html" title="class in java.nio.channels"><CODE>FileChannel</CODE></A> object associated with this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.getFD">
            <summary>
            Returns the opaque file descriptor object associated with this stream.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.getFilePointer">
            <summary>
            Returns the current offset in this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.length">
            <summary>
            Returns the length of this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.read">
            <summary>
            Reads a sbyte of data from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.read(System.SByte[])">
            <summary>
            Reads up to <code>b.length</code> bytes of data from this file  into an array of bytes.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.read(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads up to <code>len</code> bytes of data from this file into an  array of bytes.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readBoolean">
            <summary>
            Reads a <code>boolean</code> from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readByte">
            <summary>
            Reads a signed eight-bit value from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readChar">
            <summary>
            Reads a Unicode character from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readDouble">
            <summary>
            Reads a <code>double</code> from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readFloat">
            <summary>
            Reads a <code>float</code> from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readFully(System.SByte[])">
            <summary>
            Reads <code>b.length</code> bytes from this file into the sbyte  array, starting at the current file pointer.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readFully(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Reads exactly <code>len</code> bytes from this file into the sbyte  array, starting at the current file pointer.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readInt">
            <summary>
            Reads a signed 32-bit integer from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readLine">
            <summary>
            Reads the next line of text from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readLong">
            <summary>
            Reads a signed 64-bit integer from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readShort">
            <summary>
            Reads a signed 16-bit number from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readUnsignedByte">
            <summary>
            Reads an unsigned eight-bit number from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readUnsignedShort">
            <summary>
            Reads an unsigned 16-bit number from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.readUTF">
            <summary>
            Reads in a string from this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.seek(System.Int64)">
            <summary>
            Sets the file-pointer offset, measured from the beginning of this  file, at which the next read or write occurs.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.setLength(System.Int64)">
            <summary>
            Sets the length of this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.skipBytes(System.Int32)">
            <summary>
            Attempts to skip over <code>n</code> bytes of input discarding the  skipped bytes.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.write(System.SByte[])">
            <summary>
            Writes <code>b.length</code> bytes from the specified sbyte array  to this file, starting at the current file pointer.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes <code>len</code> bytes from the specified sbyte array  starting at offset <code>off</code> to this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.write(System.Int32)">
            <summary>
            Writes the specified sbyte to this file.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeBoolean(System.Boolean)">
            <summary>
            Writes a <code>boolean</code> to the file as a one-sbyte value.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeByte(System.Int32)">
            <summary>
            Writes a <code>sbyte</code> to the file as a one-sbyte value.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeBytes(System.String)">
            <summary>
            Writes the string to the file as a sequence of bytes.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeChar(System.Int32)">
            <summary>
            Writes a <code>char</code> to the file as a two-sbyte value, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeChars(System.String)">
            <summary>
            Writes a string to the file as a sequence of characters.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeDouble(System.Double)">
            <summary>
            Converts the double argument to a <code>long</code> using the  <code>doubleToLongBits</code> method in class <code>Double</code>,  and then writes that <code>long</code> value to the file as an  eight-sbyte quantity, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeFloat(System.Single)">
            <summary>
            Converts the float argument to an <code>int</code> using the  <code>floatToIntBits</code> method in class <code>Float</code>,  and then writes that <code>int</code> value to the file as a  four-sbyte quantity, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeInt(System.Int32)">
            <summary>
            Writes an <code>int</code> to the file as four bytes, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeLong(System.Int64)">
            <summary>
            Writes a <code>long</code> to the file as eight bytes, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeShort(System.Int32)">
            <summary>
            Writes a <code>short</code> to the file as two bytes, high sbyte first.
            </summary>
        </member>
        <member name="M:java.io.RandomAccessFile.writeUTF(System.String)">
            <summary>
            Writes a string to the file using UTF-8 encoding in a  machine-independent manner.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.clearAssertionStatus">
            <summary>
            Sets the default assertion status for this class loader to <tt>false</tt> and discards any package defaults or class assertion status settings associated with the class loader.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.defineClass(System.SByte[],System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>Replaced by <A HREF="../../java/lang/ClassLoader.html#defineClass(java.lang.String, sbyte[], int, int)"><CODE>defineClass(String, sbyte[], int, int)</CODE></A></I>
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.defineClass(System.String,System.SByte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes into an instance of class <tt>Class</tt>.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.defineClass(System.String,System.SByte[],System.Int32,System.Int32,java.security.ProtectionDomain)">
            <summary>
            Converts an array of bytes into an instance of class <tt>Class</tt>, with an optional <tt>ProtectionDomain</tt>.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.definePackage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,java.net.URL)">
            <summary>
            Defines a package by name in this <tt>ClassLoader</tt>.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findClass(System.String)">
            <summary>
            Finds the specified class.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findLibrary(System.String)">
            <summary>
            Returns the absolute path name of a native library.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findLoadedClass(System.String)">
            <summary>
            Returns the class with the given name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findResource(System.String)">
            <summary>
            Finds the resource with the given name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findResources(System.String)">
            <summary>
            Returns an enumeration of <A HREF="../../java/net/URL.html" title="class in java.net"><CODE><tt>URL</tt></CODE></A> objects representing all the resources with the given name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.findSystemClass(System.String)">
            <summary>
            Finds a class with the specified name, loading it if necessary.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getPackage(System.String)">
            <summary>
            Returns a <tt>Package</tt> that has been defined by this class loader or any of its ancestors.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getPackages">
            <summary>
            Returns all of the <tt>Packages</tt> defined by this class loader and its ancestors.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getParent">
            <summary>
            Returns the parent class loader for delegation.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getResource(System.String)">
            <summary>
            Finds the resource with the given name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getResourceAsStream(System.String)">
            <summary>
            Returns an input stream for reading the specified resource.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getResources(System.String)">
            <summary>
            Finds all the resources with the given name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getSystemClassLoader">
            <summary>
            Returns the system class loader for delegation.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getSystemResource(System.String)">
            <summary>
            Find a resource of the specified name from the search path used to load classes.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getSystemResourceAsStream(System.String)">
            <summary>
            Open for reading, a resource of the specified name from the search path used to load classes.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.getSystemResources(System.String)">
            <summary>
            Finds all resources of the specified name from the search path used to load classes.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.loadClass(System.String)">
            <summary>
            Loads the class with the specified name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.loadClass(System.String,System.Boolean)">
            <summary>
            Loads the class with the specified name.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.resolveClass(java.lang.Class)">
            <summary>
            Links the specified class.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.setClassAssertionStatus(System.String,System.Boolean)">
            <summary>
            Sets the desired assertion status for the named top-level class in this class loader and any nested classes contained therein.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.setDefaultAssertionStatus(System.Boolean)">
            <summary>
            Sets the default assertion status for this class loader.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.setPackageAssertionStatus(System.String,System.Boolean)">
            <summary>
            Sets the package default assertion status for the named package.
            </summary>
        </member>
        <member name="M:java.lang.ClassLoader.setSigners(java.lang.Class,System.Object[])">
            <summary>
            Sets the signers of a class.
            </summary>
        </member>
        <member name="M:java.lang.Class.desiredAssertionStatus">
            <summary>
            Returns the assertion status that would be assigned to this
            class if it were to be initialized at the time this method is invoked.
            </summary>
        </member>
        <member name="M:java.lang.Class.forName(System.String)">
            <summary>
            Returns the <code>Class</code> object associated with the class or
            interface with the given string name.
            </summary>
        </member>
        <member name="M:java.lang.Class.forName(System.String,System.Boolean,java.lang.ClassLoader)">
            <summary>
            Returns the <code>Class</code> object associated with the class or
            interface with the given string name, using the given class loader.
            </summary>
        </member>
        <member name="M:java.lang.Class.getClasses">
            <summary>
            Returns an array containing <code>Class</code> objects representing all
            the public classes and interfaces that are members of the class
            represented by this <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getClassLoader">
            <summary>
            Returns the class loader for the class.
            </summary>
        </member>
        <member name="M:java.lang.Class.getComponentType">
            <summary>
            Returns the <code>Class</code> representing the component type of an
            array.
            </summary>
        </member>
        <member name="M:java.lang.Class.getConstructor(java.lang.Class[])">
            <summary>
            Returns a <code>Constructor</code> object that reflects the specified
            public constructor of the class represented by this <code>Class</code>
            object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getConstructors">
            <summary>
            Returns an array containing <code>Constructor</code> objects reflecting
            all the public constructors of the class represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredClasses">
            <summary>
            Returns an array of <code>Class</code> objects reflecting all the
            classes and interfaces declared as members of the class represented by
            this <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredConstructor(java.lang.Class[])">
            <summary>
            Returns a <code>Constructor</code> object that reflects the specified
            constructor of the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredConstructors">
            <summary>
            Returns an array of <code>Constructor</code> objects reflecting all the
            constructors declared by the class represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredField(System.String)">
            <summary>
            Returns a <code>Field</code> object that reflects the specified declared
            field of the class or interface represented by this <code>Class</code>
            object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredFields">
            <summary>
            Returns an array of <code>Field</code> objects reflecting all the fields
            declared by the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredMethod(System.String,java.lang.Class[])">
            <summary>
            Returns a <code>Method</code> object that reflects the specified
            declared method of the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaredMethods">
            <summary>
            Returns an array of <code>Method</code> objects reflecting all the
            methods declared by the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getDeclaringClass">
            <summary>
            If the class or interface represented by this <code>Class</code> object
            is a member of another class, returns the <code>Class</code> object
            representing the class in which it was declared.
            </summary>
        </member>
        <member name="M:java.lang.Class.getField(System.String)">
            <summary>
            Returns a <code>Field</code> object that reflects the specified public
            member field of the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getFields">
            <summary>
            Returns an array containing <code>Field</code> objects reflecting all
            the accessible public fields of the class or interface represented by
            this <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getInterfaces">
            <summary>
            Determines the interfaces implemented by the class or interface
            represented by this object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getMethod(System.String,java.lang.Class[])">
            <summary>
            Returns a <code>Method</code> object that reflects the specified public
            member method of the class or interface represented by this
            <code>Class</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Class.getMethods">
            <summary>
            Returns an array containing <code>Method</code> objects reflecting all
            the public <em>member</em> methods of the class or interface represented
            by this <code>Class</code> object, including those declared by the class
            or interface and and those inherited from superclasses and
            superinterfaces.
            </summary>
        </member>
        <member name="M:java.lang.Class.getModifiers">
            <summary>
            Returns the Java language modifiers for this class or interface, encoded
            in an integer.
            </summary>
        </member>
        <member name="M:java.lang.Class.getName">
            <summary>
            Returns the  name of the entity (class, interface, array class,
            primitive type, or void) represented by this <tt>Class</tt> object,
            as a <tt>String</tt>.
            </summary>
        </member>
        <member name="M:java.lang.Class.getPackage">
            <summary>
            Gets the package for this class.
            </summary>
        </member>
        <member name="M:java.lang.Class.getProtectionDomain">
            <summary>
            Returns the <code>ProtectionDomain</code> of this class.
            </summary>
        </member>
        <member name="M:java.lang.Class.getResource(System.String)">
            <summary>
            Finds a resource with a given name.
            </summary>
        </member>
        <member name="M:java.lang.Class.getResourceAsStream(System.String)">
            <summary>
            Finds a resource with a given name.
            </summary>
        </member>
        <member name="M:java.lang.Class.getSigners">
            <summary>
            Gets the signers of this class.
            </summary>
        </member>
        <member name="M:java.lang.Class.getSuperclass">
            <summary>
            Returns the <code>Class</code> representing the superclass of the entity
            (class, interface, primitive type or void) represented by this
            <code>Class</code>.
            </summary>
        </member>
        <member name="M:java.lang.Class.isArray">
            <summary>
            Determines if this <code>Class</code> object represents an array class.
            </summary>
        </member>
        <member name="M:java.lang.Class.isAssignableFrom(java.lang.Class)">
            <summary>
            Determines if the class or interface represented by this
            <code>Class</code> object is either the same as, or is a superclass or
            superinterface of, the class or interface represented by the specified
            <code>Class</code> parameter.
            </summary>
        </member>
        <member name="M:java.lang.Class.isInstance(System.Object)">
            <summary>
            Determines if the specified <code>Object</code> is assignment-compatible
            with the object represented by this <code>Class</code>.
            </summary>
        </member>
        <member name="M:java.lang.Class.isInterface">
            <summary>
            Determines if the specified <code>Class</code> object represents an
            interface type.
            </summary>
        </member>
        <member name="M:java.lang.Class.isPrimitive">
            <summary>
            Determines if the specified <code>Class</code> object represents a
            primitive type.
            </summary>
        </member>
        <member name="M:java.lang.Class.newInstance">
            <summary>
            Creates a new instance of the class represented by this <tt>Class</tt>
            object.
            </summary>
        </member>
        <member name="M:java.lang.Class.ToString">
            <summary>
            Converts the object to a string.
            </summary>
        </member>
        <member name="M:java.lang.JavaSystem.currentTimeMillis">
            <summary>
            Returns the current time in milliseconds.
            </summary>
        </member>
        <member name="M:java.lang.JavaSystem.arraycopy(System.Object,System.Int32,System.Object,System.Int32,System.Int32)">
            <summary>
            Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.
            </summary>
            <param name="src"></param>
            <param name="srcPos"></param>
            <param name="dest"></param>
            <param name="destPos"></param>
            <param name="length"></param>
        </member>
        <member name="M:java.lang.JavaSystem.getProperty(System.String)">
            <summary>
            Gets the system property indicated by the specified key.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.get(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getBoolean(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>boolean</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getByte(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>sbyte</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getChar(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>char</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getDouble(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>double</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getFloat(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>float</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getInt(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as an <code>int</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getLength(System.Object)">
            <summary>
            Returns the length of the specified array object, as an <code>int</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getLong(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>long</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.getShort(System.Object,System.Int32)">
            <summary>
            Returns the value of the indexed component in the specified
            array object, as a <code>short</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.newInstance(java.lang.Class,System.Int32)">
            <summary>
            Creates a new array with the specified component type and
            length.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.newInstance(java.lang.Class,System.Int32[])">
            <summary>
            Creates a new array
            with the specified component type and dimensions.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.set(System.Object,System.Int32,System.Object)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified new value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setBoolean(System.Object,System.Int32,System.Boolean)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>boolean</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setByte(System.Object,System.Int32,System.SByte)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>sbyte</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setChar(System.Object,System.Int32,System.Char)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>char</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setDouble(System.Object,System.Int32,System.Double)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>double</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setFloat(System.Object,System.Int32,System.Single)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>float</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setInt(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>int</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setLong(System.Object,System.Int32,System.Int64)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>long</code> value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Array.setShort(System.Object,System.Int32,System.Int16)">
            <summary>
            Sets the value of the indexed component of the specified array
            object to the specified <code>short</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Double.#ctor(System.Double)">
            <summary>
            Constructs a newly allocated <code>Double</code> object that
            represents the primitive <code>double</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.Double.#ctor(System.String)">
            <summary>
            Constructs a newly allocated <code>Double</code> object that
            represents the floating-point value of type <code>double</code>
            represented by the string.
            </summary>
        </member>
        <member name="M:java.lang.Double.byteValue">
            <summary>
            Returns the value of this <code>Double</code> as a <code>sbyte</code> (by
            casting to a <code>sbyte</code>).
            </summary>
        </member>
        <member name="M:java.lang.Double.compare(System.Double,System.Double)">
            <summary>
            Compares the two specified <code>double</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Double.compareTo(java.lang.Double)">
            <summary>
            Compares two <code>Double</code> objects numerically.
            </summary>
        </member>
        <member name="M:java.lang.Double.compareTo(System.Object)">
            <summary>
            Compares this <code>Double</code> object to another object.
            </summary>
        </member>
        <member name="M:java.lang.Double.doubleToLongBits(System.Double)">
            <summary>
            Returns a representation of the specified floating-point value
            according to the IEEE 754 floating-point "double
            format" bit layout.
            </summary>
        </member>
        <member name="M:java.lang.Double.doubleToRawLongBits(System.Double)">
            <summary>
            Returns a representation of the specified floating-point value
            according to the IEEE 754 floating-point "double
            format" bit layout, preserving Not-a-Number (NaN) values.
            </summary>
        </member>
        <member name="M:java.lang.Double.doubleValue">
            <summary>
            Returns the <code>double</code> value of this
            <code>Double</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Double.Equals(System.Object)">
            <summary>
            Compares this object against the specified object.
            </summary>
        </member>
        <member name="M:java.lang.Double.floatValue">
            <summary>
            Returns the <code>float</code> value of this
            <code>Double</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Double.GetHashCode">
            <summary>
            Returns a hash code for this <code>Double</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Double.intValue">
            <summary>
            Returns the value of this <code>Double</code> as an
            <code>int</code> (by casting to type <code>int</code>).
            </summary>
        </member>
        <member name="M:java.lang.Double.isInfinite">
            <summary>
            Returns <code>true</code> if this <code>Double</code> value is
            infinitely large in magnitude, <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.Double.isInfinite(System.Double)">
            <summary>
            Returns <code>true</code> if the specified number is infinitely
            large in magnitude, <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.Double.isNaN">
            <summary>
            Returns <code>true</code> if this <code>Double</code> value is
            a Not-a-Number (NaN), <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.Double.isNaN(System.Double)">
            <summary>
            Returns <code>true</code> if the specified number is a
            Not-a-Number (NaN) value, <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.Double.longBitsToDouble(System.Int64)">
            <summary>
            Returns the <code>double</code> value corresponding to a given
            bit representation.
            </summary>
        </member>
        <member name="M:java.lang.Double.longValue">
            <summary>
            Returns the value of this <code>Double</code> as a
            <code>long</code> (by casting to type <code>long</code>).
            </summary>
        </member>
        <member name="M:java.lang.Double.parseDouble(System.String)">
            <summary>
            Returns a new <code>double</code> initialized to the value
            represented by the specified <code>String</code>, as performed
            by the <code>valueOf</code> method of class
            <code>Double</code>.
            </summary>
        </member>
        <member name="M:java.lang.Double.shortValue">
            <summary>
            Returns the value of this <code>Double</code> as a
            <code>short</code> (by casting to a <code>short</code>).
            </summary>
        </member>
        <member name="M:java.lang.Double.ToString">
            <summary>
            Returns a string representation of this <code>Double</code> object.
            </summary>
        </member>
        <member name="M:java.lang.Double.ToString(System.Double)">
            <summary>
            Returns a string representation of the <code>double</code>
            argument.
            </summary>
        </member>
        <member name="M:java.lang.Double.valueOf(System.String)">
            <summary>
            Returns a <code>Double</code> object holding the
            <code>double</code> value represented by the argument string
            <code>s</code>.
            </summary>
        </member>
        <member name="T:java.lang.Runtime">
            <summary>
            Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the getRuntime method. 
            </summary>
        </member>
        <member name="M:java.lang.Runtime.addShutdownHook(java.lang.Thread)">
            <summary>
            Registers a new virtual-machine shutdown hook.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.availableProcessors">
            <summary>
            Returns the number of processors available to the Java virtual machine.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String)">
            <summary>
            Executes the specified string command in a separate process.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String[])">
            <summary>
            Executes the specified command and arguments in a separate process.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String[],System.String[])">
            <summary>
            Executes the specified command and arguments in a separate process with the specified environment.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String[],System.String[],java.io.File)">
            <summary>
            Executes the specified command and arguments in a separate process with the specified environment and working directory.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String,System.String[])">
            <summary>
            Executes the specified string command in a separate process with the specified environment.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exec(System.String,System.String[],java.io.File)">
            <summary>
            Executes the specified string command in a separate process with the specified environment and working directory.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.exit(System.Int32)">
            <summary>
            Terminates the currently running Java virtual machine by initiating its shutdown sequence.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.freeMemory">
            <summary>
            Returns the amount of free memory in the Java Virtual Machine.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.gc">
            <summary>
            Runs the garbage collector.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.getLocalizedInputStream(java.io.InputStream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.lang.Runtime.getLocalizedOutputStream(java.io.OutputStream)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.lang.Runtime.getRuntime">
            <summary>
            Returns the runtime object associated with the current Java application.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.halt(System.Int32)">
            <summary>
            Forcibly terminates the currently running Java virtual machine.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.load(System.String)">
            <summary>
            Loads the specified filename as a dynamic library.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.loadLibrary(System.String)">
            <summary>
            Loads the dynamic library with the specified library name.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.maxMemory">
            <summary>
            Returns the maximum amount of memory that the Java virtual machine will attempt to use.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.removeShutdownHook(java.lang.Thread)">
            <summary>
            De-registers a previously-registered virtual-machine shutdown hook.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.runFinalization">
            <summary>
            Runs the finalization methods of any objects pending finalization.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.runFinalizersOnExit(System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.lang.Runtime.totalMemory">
            <summary>
            Returns the total amount of memory in the Java virtual machine.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.traceInstructions(System.Boolean)">
            <summary>
            Enables/Disables tracing of instructions.
            </summary>
        </member>
        <member name="M:java.lang.Runtime.traceMethodCalls(System.Boolean)">
            <summary>
            Enables/Disables tracing of method calls.
            </summary>
        </member>
        <member name="M:java.lang.Math.abs(System.Double)">
            <summary>
            Returns the absolute value of a <code>double</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.abs(System.Single)">
            <summary>
            Returns the absolute value of a <code>float</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.abs(System.Int32)">
            <summary>
            Returns the absolute value of an <code>int</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.abs(System.Int64)">
            <summary>
            Returns the absolute value of a <code>long</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.acos(System.Double)">
            <summary>
            Returns the arc cosine of an angle, in the range of 0.0 through
            <i>pi</i>.
            </summary>
        </member>
        <member name="M:java.lang.Math.asin(System.Double)">
            <summary>
            Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through
            <i>pi</i>/2.
            </summary>
        </member>
        <member name="M:java.lang.Math.atan(System.Double)">
            <summary>
            Returns the arc tangent of an angle, in the range of -<i>pi</i>/2
            through <i>pi</i>/2.
            </summary>
        </member>
        <member name="M:java.lang.Math.atan2(System.Double,System.Double)">
            <summary>
            Converts rectangular coordinates (<code>x</code>, <code>y</code>)
            to polar (r, <i>theta</i>).
            </summary>
        </member>
        <member name="M:java.lang.Math.ceil(System.Double)">
            <summary>
            Returns the smallest (closest to negative infinity)
            <code>double</code> value that is not less than the argument and is
            equal to a mathematical integer.
            </summary>
        </member>
        <member name="M:java.lang.Math.cos(System.Double)">
            <summary>
            Returns the trigonometric cosine of an angle.
            </summary>
        </member>
        <member name="M:java.lang.Math.exp(System.Double)">
            <summary>
            Returns Euler's number <i>e</i> raised to the power of a
            <code>double</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.floor(System.Double)">
            <summary>
            Returns the largest (closest to positive infinity)
            <code>double</code> value that is not greater than the argument and
            is equal to a mathematical integer.
            </summary>
        </member>
        <member name="M:java.lang.Math.IEEEremainder(System.Double,System.Double)">
            <summary>
            Computes the remainder operation on two arguments as prescribed
            by the IEEE 754 standard.
            </summary>
        </member>
        <member name="M:java.lang.Math.log(System.Double)">
            <summary>
            Returns the natural logarithm (base <i>e</i>) of a <code>double</code>
            value.
            </summary>
        </member>
        <member name="M:java.lang.Math.max(System.Double,System.Double)">
            <summary>
            Returns the greater of two <code>double</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.max(System.Single,System.Single)">
            <summary>
            Returns the greater of two <code>float</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.max(System.Int32,System.Int32)">
            <summary>
            Returns the greater of two <code>int</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.max(System.Int64,System.Int64)">
            <summary>
            Returns the greater of two <code>long</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two <code>double</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two <code>float</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two <code>int</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two <code>long</code> values.
            </summary>
        </member>
        <member name="M:java.lang.Math.pow(System.Double,System.Double)">
            <summary>
            Returns the value of the first argument raised to the power of the
            second argument.
            </summary>
        </member>
        <member name="M:java.lang.Math.random">
            <summary>
            Returns a <code>double</code> value with a positive sign, greater
            than or equal to <code>0.0</code> and less than <code>1.0</code>.
            </summary>
        </member>
        <member name="M:java.lang.Math.rint(System.Double)">
            <summary>
            Returns the <code>double</code> value that is closest in value
            to the argument and is equal to a mathematical integer.
            </summary>
        </member>
        <member name="M:java.lang.Math.round(System.Double)">
            <summary>
            Returns the closest <code>long</code> to the argument.
            </summary>
        </member>
        <member name="M:java.lang.Math.round(System.Single)">
            <summary>
            Returns the closest <code>int</code> to the argument.
            </summary>
        </member>
        <member name="M:java.lang.Math.sin(System.Double)">
            <summary>
            Returns the trigonometric sine of an angle.
            </summary>
        </member>
        <member name="M:java.lang.Math.sqrt(System.Double)">
            <summary>
            Returns the correctly rounded positive square root of a
            <code>double</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Math.tan(System.Double)">
            <summary>
            Returns the trigonometric tangent of an angle.
            </summary>
        </member>
        <member name="M:java.lang.Math.toDegrees(System.Double)">
            <summary>
            Converts an angle measured in radians to an approximately
            equivalent angle measured in degrees.
            </summary>
        </member>
        <member name="M:java.lang.Math.toRadians(System.Double)">
            <summary>
            Converts an angle measured in degrees to an approximately
            equivalent angle measured in radians.
            </summary>
        </member>
        <member name="M:java.lang.Package.getImplementationTitle">
            <summary>
            Return the title of this package.
            </summary>
        </member>
        <member name="M:java.lang.Package.getImplementationVendor">
            <summary>
            Returns the name of the organization, vendor or company that provided this implementation.
            </summary>
        </member>
        <member name="M:java.lang.Package.getImplementationVersion">
            <summary>
            Return the version of this implementation.
            </summary>
        </member>
        <member name="M:java.lang.Package.getName">
            <summary>
            Return the name of this package.
            </summary>
        </member>
        <member name="M:java.lang.Package.getPackage(System.String)">
            <summary>
            Find a package by name in the callers <code>ClassLoader</code> instance.
            </summary>
        </member>
        <member name="M:java.lang.Package.getPackages">
            <summary>
            Get all the packages currently known for the caller's <code>ClassLoader</code> instance.
            </summary>
        </member>
        <member name="M:java.lang.Package.getSpecificationTitle">
            <summary>
            Return the title of the specification that this package implements.
            </summary>
        </member>
        <member name="M:java.lang.Package.getSpecificationVendor">
            <summary>
            Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.
            </summary>
        </member>
        <member name="M:java.lang.Package.getSpecificationVersion">
            <summary>
            Returns the version number of the specification that this package implements.
            </summary>
        </member>
        <member name="M:java.lang.Package.isCompatibleWith(System.String)">
            <summary>
            Compare this package's specification version with a desired version.
            </summary>
        </member>
        <member name="M:java.lang.Package.isSealed">
            <summary>
            Returns true if this package is sealed.
            </summary>
        </member>
        <member name="M:java.lang.Package.isSealed(java.net.URL)">
            <summary>
            Returns true if this package is sealed with respect to the specified code source url.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.getDeclaringClass">
            <summary>
            Returns the <code>Class</code> object representing the class that declares the constructor represented by this <code>Constructor</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.getExceptionTypes">
            <summary>
            Returns an array of <code>Class</code> objects that represent the types of of exceptions declared to be thrown by the underlying constructor represented by this <code>Constructor</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.getModifiers">
            <summary>
            Returns the Java language modifiers for the constructor represented by this <code>Constructor</code> object, as an integer.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.getName">
            <summary>
            Returns the name of this constructor, as a string.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.getParameterTypes">
            <summary>
            Returns an array of <code>Class</code> objects that represent the formal parameter types, in declaration order, of the constructor represented by this <code>Constructor</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Constructor.newInstance(System.Object[])">
            <summary>
            Uses the constructor represented by this <code>Constructor</code> object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isAbstract(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>abstract</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isFinal(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>final</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isInterface(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>interface</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isNative(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>native</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isPrivate(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>private</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isProtected(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>protected</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isPublic(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>public</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isStatic(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>static</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isStrict(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>strictfp</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isSynchronized(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>synchronized</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isTransient(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>transient</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Modifier.isVolatile(System.Int32)">
            <summary>
            Return <tt>true</tt> if the integer argument includes the <tt>volatile</tt> modifer, <tt>false</tt> otherwise.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getDeclaringClass">
            <summary>
            Returns the <code>Class</code> object representing the class or interface that declares the method represented by this <code>Method</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getExceptionTypes">
            <summary>
            Returns an array of <code>Class</code> objects that represent  the types of the exceptions declared to be thrown by the underlying method represented by this <code>Method</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getModifiers">
            <summary>
            Returns the Java language modifiers for the method represented by this <code>Method</code> object, as an integer.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getName">
            <summary>
            Returns the name of the method represented by this <code>Method</code>  object, as a <code>String</code>.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getParameterTypes">
            <summary>
            Returns an array of <code>Class</code> objects that represent the formal parameter types, in declaration order, of the method represented by this <code>Method</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.getReturnType">
            <summary>
            Returns a <code>Class</code> object that represents the formal return type of the method represented by this <code>Method</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Method.invoke(System.Object,System.Object[])">
            <summary>
            Invokes the underlying method represented by this <code>Method</code>  object, on the specified object with the specified parameters.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.get(System.Object)">
            <summary>
            Returns the value of the field represented by this <code>Field</code>, on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getBoolean(System.Object)">
            <summary>
            Gets the value of a static or instance <code>boolean</code> field.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getByte(System.Object)">
            <summary>
            Gets the value of a static or instance <code>sbyte</code> field.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getChar(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>char</code> or of another primitive type convertible to type <code>char</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getDeclaringClass">
            <summary>
            Returns the <code>Class</code> object representing the class or interface that declares the field represented by this <code>Field</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getDouble(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>double</code> or of another primitive type convertible to type <code>double</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getFloat(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>float</code> or of another primitive type convertible to type <code>float</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getInt(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>int</code> or of another primitive type convertible to type <code>int</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getLong(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>long</code> or of another primitive type convertible to type <code>long</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getModifiers">
            <summary>
            Returns the Java language modifiers for the field represented by this <code>Field</code> object, as an integer.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getName">
            <summary>
            Returns the name of the field represented by this <code>Field</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getShort(System.Object)">
            <summary>
            Gets the value of a static or instance field of type <code>short</code> or of another primitive type convertible to type <code>short</code> via a widening conversion.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.getType">
            <summary>
            Returns a <code>Class</code> object that identifies the declared type for the field represented by this <code>Field</code> object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.set(System.Object,System.Object)">
            <summary>
            Sets the field represented by this <code>Field</code> object on the specified object argument to the specified new value.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setBoolean(System.Object,System.Boolean)">
            <summary>
            Sets the value of a field as a <code>boolean</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setByte(System.Object,System.SByte)">
            <summary>
            Sets the value of a field as a <code>sbyte</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setChar(System.Object,System.Char)">
            <summary>
            Sets the value of a field as a <code>char</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setDouble(System.Object,System.Double)">
            <summary>
            Sets the value of a field as a <code>double</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setFloat(System.Object,System.Single)">
            <summary>
            Sets the value of a field as a <code>float</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setInt(System.Object,System.Int32)">
            <summary>
            Sets the value of a field as an <code>int</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setLong(System.Object,System.Int64)">
            <summary>
            Sets the value of a field as a <code>long</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.reflect.Field.setShort(System.Object,System.Int16)">
            <summary>
            Sets the value of a field as a <code>short</code> on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.activeCount">
            <summary>
            Returns an estimate of the number of active threads in this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.activeGroupCount">
            <summary>
            Returns an estimate of the number of active groups in this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.allowThreadSuspension(System.Boolean)">
            <summary>
            <B>Deprecated.</B> <I>The definition of this call depends on <A HREF="../../java/lang/ThreadGroup.html#suspend()"><CODE>suspend()</CODE></A>,		   which is deprecated.  Further, the behavior of this call		   was never specified.</I>
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.checkAccess">
            <summary>
            Determines if the currently running thread has permission to  modify this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.destroy">
            <summary>
            Destroys this thread group and all of its subgroups.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.enumerate(java.lang.Thread[])">
            <summary>
            Copies into the specified array every active thread in this  thread group and its subgroups.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.enumerate(java.lang.Thread[],System.Boolean)">
            <summary>
            Copies into the specified array every active thread in this  thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[])">
            <summary>
            Copies into the specified array references to every active  subgroup in this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.enumerate(java.lang.ThreadGroup[],System.Boolean)">
            <summary>
            Copies into the specified array references to every active  subgroup in this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.getMaxPriority">
            <summary>
            Returns the maximum priority of this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.getName">
            <summary>
            Returns the name of this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.getParent">
            <summary>
            Returns the parent of this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.interrupt">
            <summary>
            Interrupts all threads in this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.isDaemon">
            <summary>
            Tests if this thread group is a daemon thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.isDestroyed">
            <summary>
            Tests if this thread group has been destroyed.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.list">
            <summary>
            Prints information about this thread group to the standard  output.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.parentOf(java.lang.ThreadGroup)">
            <summary>
            Tests if this thread group is either the thread group  argument or one of its ancestor thread groups.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.resume">
            <summary>
            <B>Deprecated.</B> <I>This method is used solely in conjunction with      <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,       both of which have been deprecated, as they are inherently       deadlock-prone.  See <A HREF="../../java/lang/Thread.html#suspend()"><CODE>Thread.suspend()</CODE></A> for details.</I>
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.setDaemon(System.Boolean)">
            <summary>
            Changes the daemon status of this thread group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.setMaxPriority(System.Int32)">
            <summary>
            Sets the maximum priority of the group.
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.stop">
            <summary>
            <B>Deprecated.</B> <I>This method is inherently unsafe.  See     <A HREF="../../java/lang/Thread.html#stop()"><CODE>Thread.stop()</CODE></A> for details.</I>
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.suspend">
            <summary>
            <B>Deprecated.</B> <I>This method is inherently deadlock-prone.  See     <A HREF="../../java/lang/Thread.html#suspend()"><CODE>Thread.suspend()</CODE></A> for details.</I>
            </summary>
        </member>
        <member name="M:java.lang.ThreadGroup.uncaughtException(java.lang.Thread,java.lang.Throwable)">
            <summary>
            Called by the Java Virtual Machine when a thread in this  thread group stops because of an uncaught exception.
            </summary>
        </member>
        <member name="M:java.lang.Thread.activeCount">
            <summary>
            Returns the number of active threads in the current thread's thread group.
            </summary>
        </member>
        <member name="M:java.lang.Thread.checkAccess">
            <summary>
            Determines if the currently running thread has permission to  modify this thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.countStackFrames">
            <summary>
            <B>Deprecated.</B> <I>The definition of this call depends on <A HREF="../../java/lang/Thread.html#suspend()"><CODE>suspend()</CODE></A>,		   which is deprecated.  Further, the results of this call		   were never well-defined.</I>
            </summary>
        </member>
        <member name="M:java.lang.Thread.currentThread">
            <summary>
            Returns a reference to the currently executing thread object.
            </summary>
        </member>
        <member name="M:java.lang.Thread.destroy">
            <summary>
            Destroys this thread, without any cleanup.
            </summary>
        </member>
        <member name="M:java.lang.Thread.dumpStack">
            <summary>
            Prints a stack trace of the current thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.enumerate(java.lang.Thread[])">
            <summary>
            Copies into the specified array every active thread in  the current thread's thread group and its subgroups.
            </summary>
        </member>
        <member name="M:java.lang.Thread.getContextClassLoader">
            <summary>
            Returns the context ClassLoader for this Thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.getName">
            <summary>
            Returns this thread's name.
            </summary>
        </member>
        <member name="M:java.lang.Thread.getPriority">
            <summary>
            Returns this thread's priority.
            </summary>
        </member>
        <member name="M:java.lang.Thread.getThreadGroup">
            <summary>
            Returns the thread group to which this thread belongs.
            </summary>
        </member>
        <member name="M:java.lang.Thread.holdsLock(System.Object)">
            <summary>
            Returns <tt>true</tt> if and only if the current thread holds the monitor lock on the specified object.
            </summary>
        </member>
        <member name="M:java.lang.Thread.interrupt">
            <summary>
            Interrupts this thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.interrupted">
            <summary>
            Tests whether the current thread has been interrupted.
            </summary>
        </member>
        <member name="M:java.lang.Thread.isAlive">
            <summary>
            Tests if this thread is alive.
            </summary>
        </member>
        <member name="M:java.lang.Thread.isDaemon">
            <summary>
            Tests if this thread is a daemon thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.isInterrupted">
            <summary>
            Tests whether this thread has been interrupted.
            </summary>
        </member>
        <member name="M:java.lang.Thread.join">
            <summary>
            Waits for this thread to die.
            </summary>
        </member>
        <member name="M:java.lang.Thread.join(System.Int64)">
            <summary>
            Waits at most <code>millis</code> milliseconds for this thread to  die.
            </summary>
        </member>
        <member name="M:java.lang.Thread.join(System.Int64,System.Int32)">
            <summary>
            Waits at most <code>millis</code> milliseconds plus  <code>nanos</code> nanoseconds for this thread to die.
            </summary>
        </member>
        <member name="M:java.lang.Thread.resume">
            <summary>
            <B>Deprecated.</B> <I>This method exists solely for use with <A HREF="../../java/lang/Thread.html#suspend()"><CODE>suspend()</CODE></A>,     which has been deprecated because it is deadlock-prone.     For more information, see      <a href="../../../guide/misc/threadPrimitiveDeprecation.html">Why      are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.</I>
            </summary>
        </member>
        <member name="M:java.lang.Thread.run">
            <summary>
            If this thread was constructed using a separate  <code>Runnable</code> run object, then that  <code>Runnable</code> object's <code>run</code> method is called;  otherwise, this method does nothing and returns.
            </summary>
        </member>
        <member name="M:java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)">
            <summary>
            Sets the context ClassLoader for this Thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.setDaemon(System.Boolean)">
            <summary>
            Marks this thread as either a daemon thread or a user thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.setName(System.String)">
            <summary>
            Changes the name of this thread to be equal to the argument  <code>name</code>.
            </summary>
        </member>
        <member name="M:java.lang.Thread.setPriority(System.Int32)">
            <summary>
            Changes the priority of this thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.sleep(System.Int64)">
            <summary>
            Causes the currently executing thread to sleep (temporarily cease  execution) for the specified number of milliseconds.
            </summary>
        </member>
        <member name="M:java.lang.Thread.sleep(System.Int64,System.Int32)">
            <summary>
            Causes the currently executing thread to sleep (cease execution)  for the specified number of milliseconds plus the specified number  of nanoseconds.
            </summary>
        </member>
        <member name="M:java.lang.Thread.start">
            <summary>
            Causes this thread to begin execution; the Java Virtual Machine  calls the <code>run</code> method of this thread.
            </summary>
        </member>
        <member name="M:java.lang.Thread.stop">
            <summary>
            <B>Deprecated.</B> <I>This method is inherently unsafe.  Stopping a thread with	     Thread.stop causes it to unlock all of the monitors that it	     has locked (as a natural consequence of the unchecked	     <code>ThreadDeath</code> exception propagating up the stack).  If       any of the objects previously protected by these monitors were in       an inconsistent state, the damaged objects become visible to       other threads, potentially resulting in arbitrary behavior.  Many       uses of <code>stop</code> should be replaced by code that simply       modifies some variable to indicate that the target thread should       stop running.  The target thread should check this variable         regularly, and return from its run method in an orderly fashion       if the variable indicates that it is to stop running.  If the       target thread waits for long periods (on a condition variable,       for example), the <code>interrupt</code> method should be used to       interrupt the wait.        For more information, see        <a href="../../../guide/misc/threadPrimitiveDeprecation.html">Why        are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.</I>
            </summary>
        </member>
        <member name="M:java.lang.Thread.stop(java.lang.Throwable)">
            <summary>
            <B>Deprecated.</B> <I>This method is inherently unsafe.  See <A HREF="../../java/lang/Thread.html#stop()"><CODE>stop()</CODE></A>        (with no arguments) for details.  An additional danger of this        method is that it may be used to generate exceptions that the        target thread is unprepared to handle (including checked        exceptions that the thread could not possibly throw, were it        not for this method).        For more information, see         <a href="../../../guide/misc/threadPrimitiveDeprecation.html">Why         are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.</I>
            </summary>
        </member>
        <member name="M:java.lang.Thread.suspend">
            <summary>
            <B>Deprecated.</B> <I>This method has been deprecated, as it is   inherently deadlock-prone.  If the target thread holds a lock on the   monitor protecting a critical system resource when it is suspended, no   thread can access this resource until the target thread is resumed. If   the thread that would resume the target thread attempts to lock this   monitor prior to calling <code>resume</code>, deadlock results.  Such   deadlocks typically manifest themselves as "frozen" processes.   For more information, see    <a href="../../../guide/misc/threadPrimitiveDeprecation.html">Why    are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.</I>
            </summary>
        </member>
        <member name="M:java.lang.Thread.yield">
            <summary>
            Causes the currently executing thread object to temporarily pause  and allow other threads to execute.
            </summary>
        </member>
        <member name="M:java.lang.Long.byteValue">
            <summary>
            Returns the value of this <code>Long</code> as a <code>sbyte</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.compareTo(java.lang.Long)">
            <summary>
            Compares two <code>Long</code> objects numerically.
            </summary>
        </member>
        <member name="M:java.lang.Long.compareTo(System.Object)">
            <summary>
            Compares this <code>Long</code> object to another object.
            </summary>
        </member>
        <member name="M:java.lang.Long.decode(System.String)">
            <summary>
            Decodes a <code>String</code> into a <code>Long</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.doubleValue">
            <summary>
            Returns the value of this <code>Long</code> as a <code>double</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.floatValue">
            <summary>
            Returns the value of this <code>Long</code> as a <code>float</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.getLong(System.String)">
            <summary>
            Determines the <code>long</code> value of the system property with the specified name.
            </summary>
        </member>
        <member name="M:java.lang.Long.getLong(System.String,System.Int64)">
            <summary>
            Determines the <code>long</code> value of the system property with the specified name.
            </summary>
        </member>
        <member name="M:java.lang.Long.getLong(System.String,java.lang.Long)">
            <summary>
            Returns the <code>long</code> value of the system property with the specified name.
            </summary>
        </member>
        <member name="M:java.lang.Long.intValue">
            <summary>
            Returns the value of this <code>Long</code> as an <code>int</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.longValue">
            <summary>
            Returns the value of this <code>Long</code> as a <code>long</code> value.
            </summary>
        </member>
        <member name="M:java.lang.Long.parseLong(System.String)">
            <summary>
            Parses the string argument as a signed decimal <code>long</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.parseLong(System.String,System.Int32)">
            <summary>
            Parses the string argument as a signed <code>long</code> in the radix specified by the second argument.
            </summary>
        </member>
        <member name="M:java.lang.Long.shortValue">
            <summary>
            Returns the value of this <code>Long</code> as a <code>short</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.toBinaryString(System.Int64)">
            <summary>
            Returns a string representation of the <code>long</code> argument as an unsigned integer in base 2.
            </summary>
        </member>
        <member name="M:java.lang.Long.toHexString(System.Int64)">
            <summary>
            Returns a string representation of the <code>long</code> argument as an unsigned integer in base 16.
            </summary>
        </member>
        <member name="M:java.lang.Long.toOctalString(System.Int64)">
            <summary>
            Returns a string representation of the <code>long</code> argument as an unsigned integer in base 8.
            </summary>
        </member>
        <member name="M:java.lang.Long.valueOf(System.String)">
            <summary>
            Returns a <code>Long</code> object holding the value of the specified <code>String</code>.
            </summary>
        </member>
        <member name="M:java.lang.Long.valueOf(System.String,System.Int32)">
            <summary>
            Returns a <code>Long</code> object holding the value extracted from the specified <code>String</code> when parsed with the radix given by the second argument.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor">
            <summary>
            Initializes a newly created <code>String</code> object so that it
            represents an empty character sequence.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[])">
            <summary>
            Constructs a new <tt>String</tt> by decoding the specified array of
            bytes using the platform's default charset.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[],System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>This method does not properly convert bytes into characters.
            As of JDK 1.1, the preferred way to do this is via the
            <code>String</code> constructors that take a charset name or
            that use the platform's default charset.</I>
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Constructs a new <tt>String</tt> by decoding the specified subarray of
            bytes using the platform's default charset.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>This method does not properly convert bytes into characters.
            As of JDK 1.1, the preferred way to do this is via the
            <code>String</code> constructors that take a charset name or that use
            the platform's default charset.</I>
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[],System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a new <tt>String</tt> by decoding the specified subarray of
            bytes using the specified charset.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.SByte[],System.String)">
            <summary>
            Constructs a new <tt>String</tt> by decoding the specified array of
            bytes using the specified charset.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.Char[])">
            <summary>
            Allocates a new <code>String</code> so that it represents the
            sequence of characters currently contained in the character array
            argument.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Allocates a new <code>String</code> that contains characters from
            a subarray of the character array argument.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(System.String)">
            <summary>
            Initializes a newly created <code>String</code> object so that it
            represents the same sequence of characters as the argument; in other
            words, the newly created string is a copy of the argument string.
            </summary>
        </member>
        <member name="M:java.lang.String.#ctor(java.lang.StringBuffer)">
            <summary>
            Allocates a new string that contains the sequence of characters
            currently contained in the string buffer argument.
            </summary>
        </member>
        <member name="M:java.lang.String.charAt(System.Int32)">
            <summary>
            Returns the character at the specified index.
            </summary>
        </member>
        <member name="M:java.lang.String.compareTo(System.Object)">
            <summary>
            Compares this String to another Object.
            </summary>
        </member>
        <member name="M:java.lang.String.compareTo(System.String)">
            <summary>
            Compares two strings lexicographically.
            </summary>
        </member>
        <member name="M:java.lang.String.compareToIgnoreCase(System.String)">
            <summary>
            Compares two strings lexicographically, ignoring case
            differences.
            </summary>
        </member>
        <member name="M:java.lang.String.concat(System.String)">
            <summary>
            Concatenates the specified string to the end of this string.
            </summary>
        </member>
        <member name="M:java.lang.String.contentEquals(java.lang.StringBuffer)">
            <summary>
            Returns <tt>true</tt> if and only if this <tt>String</tt> represents
            the same sequence of characters as the specified <tt>StringBuffer</tt>.
            </summary>
        </member>
        <member name="M:java.lang.String.copyValueOf(System.Char[])">
            <summary>
            Returns a String that represents the character sequence in the
            array specified.
            </summary>
        </member>
        <member name="M:java.lang.String.copyValueOf(System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns a String that represents the character sequence in the
            array specified.
            </summary>
        </member>
        <member name="M:java.lang.String.endsWith(System.String)">
            <summary>
            Tests if this string ends with the specified suffix.
            </summary>
        </member>
        <member name="M:java.lang.String.Equals(System.Object)">
            <summary>
            Compares this string to the specified object.
            </summary>
        </member>
        <member name="M:java.lang.String.equalsIgnoreCase(System.String)">
            <summary>
            Compares this <code>String</code> to another <code>String</code>,
            ignoring case considerations.
            </summary>
        </member>
        <member name="M:java.lang.String.getBytes">
            <summary>
            Encodes this <tt>String</tt> into a sequence of bytes using the
            platform's default charset, storing the result into a new sbyte array.
            </summary>
        </member>
        <member name="M:java.lang.String.getBytes(System.Int32,System.Int32,System.SByte[],System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>This method does not properly convert characters into bytes.
            As of JDK 1.1, the preferred way to do this is via the
            the <code>getBytes()</code> method, which uses the platform's default
            charset.</I>
            </summary>
        </member>
        <member name="M:java.lang.String.getBytes(System.String)">
            <summary>
            Encodes this <tt>String</tt> into a sequence of bytes using the
            named charset, storing the result into a new sbyte array.
            </summary>
        </member>
        <member name="M:java.lang.String.getChars(System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies characters from this string into the destination character
            array.
            </summary>
        </member>
        <member name="M:java.lang.String.GetHashCode">
            <summary>
            Returns a hash code for this string.
            </summary>
        </member>
        <member name="M:java.lang.String.indexOf(System.Int32)">
            <summary>
            Returns the index within this string of the first occurrence of the
            specified character.
            </summary>
        </member>
        <member name="M:java.lang.String.indexOf(System.Int32,System.Int32)">
            <summary>
            Returns the index within this string of the first occurrence of the
            specified character, starting the search at the specified index.
            </summary>
        </member>
        <member name="M:java.lang.String.indexOf(System.String)">
            <summary>
            Returns the index within this string of the first occurrence of the
            specified substring.
            </summary>
        </member>
        <member name="M:java.lang.String.indexOf(System.String,System.Int32)">
            <summary>
            Returns the index within this string of the first occurrence of the
            specified substring, starting at the specified index.
            </summary>
        </member>
        <member name="M:java.lang.String.intern">
            <summary>
            Returns a canonical representation for the string object.
            </summary>
        </member>
        <member name="M:java.lang.String.lastIndexOf(System.Int32)">
            <summary>
            Returns the index within this string of the last occurrence of the
            specified character.
            </summary>
        </member>
        <member name="M:java.lang.String.lastIndexOf(System.Int32,System.Int32)">
            <summary>
            Returns the index within this string of the last occurrence of the
            specified character, searching backward starting at the specified
            index.
            </summary>
        </member>
        <member name="M:java.lang.String.lastIndexOf(System.String)">
            <summary>
            Returns the index within this string of the rightmost occurrence
            of the specified substring.
            </summary>
        </member>
        <member name="M:java.lang.String.lastIndexOf(System.String,System.Int32)">
            <summary>
            Returns the index within this string of the last occurrence of the
            specified substring, searching backward starting at the specified index.
            </summary>
        </member>
        <member name="M:java.lang.String.length">
            <summary>
            Returns the length of this string.
            </summary>
        </member>
        <member name="M:java.lang.String.matches(System.String)">
            <summary>
            Tells whether or not this string matches the given <a
            href="../util/regex/Pattern.html#sum">regular expression</a>.
            </summary>
        </member>
        <member name="M:java.lang.String.regionMatches(System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Tests if two string regions are equal.
            </summary>
        </member>
        <member name="M:java.lang.String.regionMatches(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Tests if two string regions are equal.
            </summary>
        </member>
        <member name="M:java.lang.String.replace(System.Char,System.Char)">
            <summary>
            Returns a new string resulting from replacing all occurrences of
            <code>oldChar</code> in this string with <code>newChar</code>.
            </summary>
        </member>
        <member name="M:java.lang.String.replaceAll(System.String,System.String)">
            <summary>
            Replaces each substring of this string that matches the given <a
            href="../util/regex/Pattern.html#sum">regular expression</a> with the
            given replacement.
            </summary>
        </member>
        <member name="M:java.lang.String.replaceFirst(System.String,System.String)">
            <summary>
            Replaces the first substring of this string that matches the given <a
            href="../util/regex/Pattern.html#sum">regular expression</a> with the
            given replacement.
            </summary>
        </member>
        <member name="M:java.lang.String.split(System.String)">
            <summary>
            Splits this string around matches of the given <a
            href="../../java/util/regex/Pattern.html#sum">regular expression</a>.
            </summary>
        </member>
        <member name="M:java.lang.String.split(System.String,System.Int32)">
            <summary>
            Splits this string around matches of the given <a
            href="../../java/util/regex/Pattern.html#sum">regular expression</a>.
            </summary>
        </member>
        <member name="M:java.lang.String.startsWith(System.String)">
            <summary>
            Tests if this string starts with the specified prefix.
            </summary>
        </member>
        <member name="M:java.lang.String.startsWith(System.String,System.Int32)">
            <summary>
            Tests if this string starts with the specified prefix beginning
            a specified index.
            </summary>
        </member>
        <member name="M:java.lang.String.subSequence(System.Int32,System.Int32)">
            <summary>
            Returns a new character sequence that is a subsequence of this sequence.
            </summary>
        </member>
        <member name="M:java.lang.String.substring(System.Int32)">
            <summary>
            Returns a new string that is a substring of this string.
            </summary>
        </member>
        <member name="M:java.lang.String.substring(System.Int32,System.Int32)">
            <summary>
            Returns a new string that is a substring of this string.
            </summary>
        </member>
        <member name="M:java.lang.String.toCharArray">
            <summary>
            Converts this string to a new character array.
            </summary>
        </member>
        <member name="M:java.lang.String.toLowerCase">
            <summary>
            Converts all of the characters in this <code>String</code> to lower
            case using the rules of the default locale.
            </summary>
        </member>
        <member name="M:java.lang.String.toLowerCase(java.util.Locale)">
            <summary>
            Converts all of the characters in this <code>String</code> to lower
            case using the rules of the given <code>Locale</code>.
            </summary>
        </member>
        <member name="M:java.lang.String.ToString">
            <summary>
            This object (which is already a string!) is itself returned.
            </summary>
        </member>
        <member name="M:java.lang.String.toUpperCase">
            <summary>
            Converts all of the characters in this <code>String</code> to upper
            case using the rules of the default locale.
            </summary>
        </member>
        <member name="M:java.lang.String.toUpperCase(java.util.Locale)">
            <summary>
            Converts all of the characters in this <code>String</code> to upper
            case using the rules of the given <code>Locale</code>.
            </summary>
        </member>
        <member name="M:java.lang.String.trim">
            <summary>
            Returns a copy of the string, with leading and trailing whitespace
            omitted.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Boolean)">
            <summary>
            Returns the string representation of the <code>boolean</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Char)">
            <summary>
            Returns the string representation of the <code>char</code>
            argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Char[])">
            <summary>
            Returns the string representation of the <code>char</code> array
            argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns the string representation of a specific subarray of the
            <code>char</code> array argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Double)">
            <summary>
            Returns the string representation of the <code>double</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Single)">
            <summary>
            Returns the string representation of the <code>float</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Int32)">
            <summary>
            Returns the string representation of the <code>int</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Int64)">
            <summary>
            Returns the string representation of the <code>long</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.String.valueOf(System.Object)">
            <summary>
            Returns the string representation of the <code>Object</code> argument.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.#ctor">
            <summary>
            Constructs a string buffer with no characters in it and an initial capacity of 16 characters.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.#ctor(System.Int32)">
            <summary>
            Constructs a string buffer with no characters in it and an initial capacity specified by the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.#ctor(System.String)">
            <summary>
            Constructs a string buffer so that it represents the same sequence of characters as the string argument; in other words, the initial contents of the string buffer is a copy of the argument string.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Boolean)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Char)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Char[])">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the string representation of a subarray of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Double)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Single)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Int32)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Int64)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.Object)">
            <summary>
            Appends the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(System.String)">
            <summary>
            Appends the string to this string buffer.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.append(java.lang.StringBuffer)">
            <summary>
            Appends the specified
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.capacity">
            <summary>
            Returns the current capacity of the String buffer.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.charAt(System.Int32)">
            <summary>
            The specified character of the sequence currently represented by the string buffer, as indicated by the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.delete(System.Int32,System.Int32)">
            <summary>
            Removes the characters in a substring of this
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.deleteCharAt(System.Int32)">
            <summary>
            Removes the character at the specified position in this
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.ensureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of the buffer is at least equal to the specified minimum.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.getChars(System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Characters are copied from this string buffer into the destination character array
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.indexOf(System.String)">
            <summary>
            Returns the index within this string of the first occurrence of the specified substring.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.indexOf(System.String,System.Int32)">
            <summary>
            Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Boolean)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Char)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Char[])">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Inserts the string representation of a subarray of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Double)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Single)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Int32)">
            <summary>
            Inserts the string representation of the second
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Int64)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.Object)">
            <summary>
            Inserts the string representation of the
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.insert(System.Int32,System.String)">
            <summary>
            Inserts the string into this string buffer.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.lastIndexOf(System.String)">
            <summary>
            Returns the index within this string of the rightmost occurrence of the specified substring.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.lastIndexOf(System.String,System.Int32)">
            <summary>
            Returns the index within this string of the last occurrence of the specified substring.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.length">
            <summary>
            Returns the length (character count) of this string buffer.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the characters in a substring of this
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.reverse">
            <summary>
            The character sequence contained in this string buffer is replaced by the reverse of the sequence.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.setCharAt(System.Int32,System.Char)">
            <summary>
            The character at the specified index of this string buffer is set to
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.setLength(System.Int32)">
            <summary>
            Sets the length of this String buffer.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.subSequence(System.Int32,System.Int32)">
            <summary>
            Returns a new character sequence that is a subsequence of this sequence.
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.substring(System.Int32)">
            <summary>
            Returns a new
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.substring(System.Int32,System.Int32)">
            <summary>
            Returns a new
            </summary>
        </member>
        <member name="M:java.lang.StringBuffer.toString">
            <summary>
            Converts to a string representing the data in this string buffer.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.#ctor(java.net.InetAddress,System.Int32)">
            <summary>
            Creates a socket address from an IP address and a port number.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.#ctor(System.Int32)">
            <summary>
            Creates a socket address where the IP address is the wildcard address
            and the port number a specified value.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.#ctor(System.String,System.Int32)">
            <summary>
            Creates a socket address from a hostname and a port number.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.Equals(System.Object)">
            <summary>
            Compares this object against the specified object.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.getAddress">
            <summary>
            Gets the <code>InetAddress</code>.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.getHostName">
            <summary>
            Gets the <code>hostname</code>.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.getPort">
            <summary>
            Gets the port number.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.GetHashCode">
            <summary>
            Returns a hashcode for this socket address.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.isUnresolved">
            <summary>
            Checks wether the address has been resolved or not.
            </summary>
        </member>
        <member name="M:java.net.InetSocketAddress.ToString">
            <summary>
            Constructs a string representation of this InetSocketAddress.
            </summary>
        </member>
        <member name="T:java.net.URLClassLoader">
            <summary>
            This class loader is used to load classes and resources from a search
            path of URLs referring to both JAR files and directories. Any URL that
            ends with a '/' is assumed to refer to a directory. Otherwise, the URL
            is assumed to refer to a JAR file which will be opened as needed.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.#ctor(java.net.URL[])">
            <summary>
            Constructs a new URLClassLoader for the specified URLs using the
            default delegation parent <code>ClassLoader</code>.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.#ctor(java.net.URL[],java.lang.ClassLoader)">
            <summary>
            Constructs a new URLClassLoader for the given URLs.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.newInstance(java.net.URL[])">
            <summary>
            Creates a new instance of URLClassLoader for the specified
            URLs and default parent class loader.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.newInstance(java.net.URL[],java.lang.ClassLoader)">
            <summary>
            Creates a new instance of URLClassLoader for the specified
            URLs and parent class loader.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.findResource(System.String)">
            <summary>
            Finds the resource with the specified name on the URL search path.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.findResources(System.String)">
            <summary>
            Returns an Enumeration of URLs representing all of the resources
            on the URL search path having the specified name.
            </summary>
        </member>
        <member name="M:java.net.URLClassLoader.getURLs">
            <summary>
            Returns the search path of URLs for loading classes and resources.
            </summary>
        </member>
        <member name="M:java.net.URL.openConnection">
            <summary>
            Returns a URLConnection object that represents a connection to the remote object referred to by the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:java.net.URL.#ctor(System.String)">
            <summary>
            Creates a
            </summary>
        </member>
        <member name="M:java.net.URL.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a
            </summary>
        </member>
        <member name="M:java.net.URL.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a URL from the specified
            </summary>
        </member>
        <member name="M:java.net.URL.#ctor(java.net.URL,System.String)">
            <summary>
            Creates a URL by parsing the given spec within a specified context.
            </summary>
        </member>
        <member name="M:java.net.URL.getAuthority">
            <summary>
            Gets the authority part of this
            </summary>
        </member>
        <member name="M:java.net.URL.getContent">
            <summary>
            Gets the contents of this URL.
            </summary>
        </member>
        <member name="M:java.net.URL.getContent(java.lang.Class[])">
            <summary>
            Gets the contents of this URL.
            </summary>
        </member>
        <member name="M:java.net.URL.getDefaultPort">
            <summary>
            Gets the default port number of the protocol associated with this
            </summary>
        </member>
        <member name="M:java.net.URL.getFile">
            <summary>
            Gets the file name of this
            </summary>
        </member>
        <member name="M:java.net.URL.getHost">
            <summary>
            Gets the host name of this
            </summary>
        </member>
        <member name="M:java.net.URL.getPath">
            <summary>
            Gets the path part of this
            </summary>
        </member>
        <member name="M:java.net.URL.getPort">
            <summary>
            Gets the port number of this
            </summary>
        </member>
        <member name="M:java.net.URL.getProtocol">
            <summary>
            Gets the protocol name of this
            </summary>
        </member>
        <member name="M:java.net.URL.getQuery">
            <summary>
            Gets the query part of this
            </summary>
        </member>
        <member name="M:java.net.URL.getRef">
            <summary>
            Gets the anchor (also known as the "reference") of this
            </summary>
        </member>
        <member name="M:java.net.URL.getUserInfo">
            <summary>
            Gets the userInfo part of this
            </summary>
        </member>
        <member name="M:java.net.URL.hashCode">
            <summary>
            Creates an integer suitable for hash table indexing.
            </summary>
        </member>
        <member name="M:java.net.URL.openStream">
            <summary>
            Opens a connection to this
            </summary>
        </member>
        <member name="M:java.net.URL.sameFile(java.net.URL)">
            <summary>
            Compares two URLs, excluding the fragment component.
            </summary>
        </member>
        <member name="M:java.net.URL.set(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Sets the fields of the URL.
            </summary>
        </member>
        <member name="M:java.net.URL.set(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the specified 8 fields of the URL.
            </summary>
        </member>
        <member name="M:java.net.URL.toExternalForm">
            <summary>
            Constructs a string representation of this
            </summary>
        </member>
        <member name="M:java.net.Socket.bind(java.net.SocketAddress)">
            <summary>
            Binds the socket to a local address.
            </summary>
        </member>
        <member name="M:java.net.Socket.close">
            <summary>
            Closes this socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.connect(java.net.SocketAddress)">
            <summary>
            Connects this socket to the server.
            </summary>
        </member>
        <member name="M:java.net.Socket.connect(java.net.SocketAddress,System.Int32)">
            <summary>
            Connects this socket to the server with a specified timeout value.
            </summary>
        </member>
        <member name="M:java.net.Socket.getChannel">
            <summary>
            Returns the unique <A HREF="../../java/nio/channels/SocketChannel.html" title="class in java.nio.channels"><CODE>SocketChannel</CODE></A> object associated with this socket, if any.
            </summary>
        </member>
        <member name="M:java.net.Socket.getInetAddress">
            <summary>
            Returns the address to which the socket is connected.
            </summary>
        </member>
        <member name="M:java.net.Socket.getInputStream">
            <summary>
            Returns an input stream for this socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.getKeepAlive">
            <summary>
            Tests if SO_KEEPALIVE is enabled.
            </summary>
        </member>
        <member name="M:java.net.Socket.getLocalAddress">
            <summary>
            Gets the local address to which the socket is bound.
            </summary>
        </member>
        <member name="M:java.net.Socket.getLocalPort">
            <summary>
            Returns the local port to which this socket is bound.
            </summary>
        </member>
        <member name="M:java.net.Socket.getLocalSocketAddress">
            <summary>
            Returns the address of the endpoint this socket is bound to, or <code>null</code> if it is not bound yet.
            </summary>
        </member>
        <member name="M:java.net.Socket.getOOBInline">
            <summary>
            Tests if OOBINLINE is enabled.
            </summary>
        </member>
        <member name="M:java.net.Socket.getOutputStream">
            <summary>
            Returns an output stream for this socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.getPort">
            <summary>
            Returns the remote port to which this socket is connected.
            </summary>
        </member>
        <member name="M:java.net.Socket.getReceiveBufferSize">
            <summary>
            Gets the value of the SO_RCVBUF option for this <tt>Socket</tt>,  that is the buffer size used by the platform for  input on this <tt>Socket</tt>.
            </summary>
        </member>
        <member name="M:java.net.Socket.getRemoteSocketAddress">
            <summary>
            Returns the address of the endpoint this socket is connected to, or <code>null</code> if it is unconnected.
            </summary>
        </member>
        <member name="M:java.net.Socket.getReuseAddress">
            <summary>
            Tests if SO_REUSEADDR is enabled.
            </summary>
        </member>
        <member name="M:java.net.Socket.getSendBufferSize">
            <summary>
            Get value of the SO_SNDBUF option for this <tt>Socket</tt>,  that is the buffer size used by the platform  for output on this <tt>Socket</tt>.
            </summary>
        </member>
        <member name="M:java.net.Socket.getSoLinger">
            <summary>
            Returns setting for SO_LINGER.
            </summary>
        </member>
        <member name="M:java.net.Socket.getSoTimeout">
            <summary>
            Returns setting for SO_TIMEOUT.
            </summary>
        </member>
        <member name="M:java.net.Socket.getTcpNoDelay">
            <summary>
            Tests if TCP_NODELAY is enabled.
            </summary>
        </member>
        <member name="M:java.net.Socket.getTrafficClass">
            <summary>
            Gets traffic class or type-of-service in the IP header for packets sent from this Socket
            </summary>
        </member>
        <member name="M:java.net.Socket.isBound">
            <summary>
            Returns the binding state of the socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.isClosed">
            <summary>
            Returns the closed state of the socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.isConnected">
            <summary>
            Returns the connection state of the socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.isInputShutdown">
            <summary>
            Returns wether the read-half of the socket connection is closed.
            </summary>
        </member>
        <member name="M:java.net.Socket.isOutputShutdown">
            <summary>
            Returns wether the write-half of the socket connection is closed.
            </summary>
        </member>
        <member name="M:java.net.Socket.sendUrgentData(System.Int32)">
            <summary>
            Send one sbyte of urgent data on the socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.setKeepAlive(System.Boolean)">
            <summary>
            Enable/disable SO_KEEPALIVE.
            </summary>
        </member>
        <member name="M:java.net.Socket.setOOBInline(System.Boolean)">
            <summary>
            Enable/disable OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a  socket is silently discarded.
            </summary>
        </member>
        <member name="M:java.net.Socket.setReceiveBufferSize(System.Int32)">
            <summary>
            Sets the SO_RCVBUF option to the specified value for this <tt>Socket</tt>.
            </summary>
        </member>
        <member name="M:java.net.Socket.setReuseAddress(System.Boolean)">
            <summary>
            Enable/disable the SO_REUSEADDR socket option.
            </summary>
        </member>
        <member name="M:java.net.Socket.setSendBufferSize(System.Int32)">
            <summary>
            Sets the SO_SNDBUF option to the specified value for this <tt>Socket</tt>.
            </summary>
        </member>
        <member name="M:java.net.Socket.setSocketImplFactory(java.net.SocketImplFactory)">
            <summary>
            Sets the client socket implementation factory for the application.
            </summary>
        </member>
        <member name="M:java.net.Socket.setSoLinger(System.Boolean,System.Int32)">
            <summary>
            Enable/disable SO_LINGER with the specified linger time in seconds.
            </summary>
        </member>
        <member name="M:java.net.Socket.setSoTimeout(System.Int32)">
            <summary>
            Enable/disable SO_TIMEOUT with the specified timeout, in  milliseconds.
            </summary>
        </member>
        <member name="M:java.net.Socket.setTcpNoDelay(System.Boolean)">
            <summary>
            Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).
            </summary>
        </member>
        <member name="M:java.net.Socket.setTrafficClass(System.Int32)">
            <summary>
            Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.
            </summary>
        </member>
        <member name="M:java.net.Socket.shutdownInput">
            <summary>
            Places the input stream for this socket at "end of stream".
            </summary>
        </member>
        <member name="M:java.net.Socket.shutdownOutput">
            <summary>
            Disables the output stream for this socket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.#ctor">
            <summary>
            Creates an unbound server socket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.#ctor(System.Int32)">
            <summary>
            Creates a server socket, bound to the specified port.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a server socket and binds it to the specified local port
            number, with the specified backlog.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.#ctor(System.Int32,System.Int32,java.net.InetAddress)">
            <summary>
            Create a server with the specified port, listen backlog, and
            local IP address to bind to.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.accept">
            <summary>
            Listens for a connection to be made to this socket and accepts
            it.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.bind(java.net.SocketAddress)">
            <summary>
            Binds the <code>ServerSocket</code> to a specific address
            (IP address and port number).
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.bind(java.net.SocketAddress,System.Int32)">
            <summary>
            Binds the <code>ServerSocket</code> to a specific address
            (IP address and port number).
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.close">
            <summary>
            Closes this socket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getChannel">
            <summary>
            Returns the unique <A HREF="../../java/nio/channels/ServerSocketChannel.html" title="class in java.nio.channels"><CODE>ServerSocketChannel</CODE></A> object
            associated with this socket, if any.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getInetAddress">
            <summary>
            Returns the local address of this server socket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getLocalPort">
            <summary>
            Returns the port on which this socket is listening.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getLocalSocketAddress">
            <summary>
            Returns the address of the endpoint this socket is bound to, or
            <code>null</code> if it is not bound yet.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getReceiveBufferSize">
            <summary>
            Gets the value of the SO_RCVBUF option for this <tt>ServerSocket</tt>,
            that is the proposed buffer size that will be used for Sockets accepted
            from this <tt>ServerSocket</tt>.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getReuseAddress">
            <summary>
            Tests if SO_REUSEADDR is enabled.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.getSoTimeout">
            <summary>
            Retrive setting for SO_TIMEOUT.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.implAccept(java.net.Socket)">
            <summary>
            Subclasses of ServerSocket use this method to override accept()
            to return their own subclass of socket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.isBound">
            <summary>
            Returns the binding state of the ServerSocket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.isClosed">
            <summary>
            Returns the closed state of the ServerSocket.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.setReceiveBufferSize(System.Int32)">
            <summary>
            Sets a default proposed value for the SO_RCVBUF option for sockets
            accepted from this <tt>ServerSocket</tt>.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.setReuseAddress(System.Boolean)">
            <summary>
            Enable/disable the SO_REUSEADDR socket option.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.setSocketFactory(java.net.SocketImplFactory)">
            <summary>
            Sets the server socket implementation factory for the
            application.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.setSoTimeout(System.Int32)">
            <summary>
            Enable/disable SO_TIMEOUT with the specified timeout, in
            milliseconds.
            </summary>
        </member>
        <member name="M:java.net.ServerSocket.ToString">
            <summary>
            Returns the implementation address and implementation port of
            this socket as a <code>String</code>.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.capacity">
            <summary>
            Returns this buffer's capacity.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.clear">
            <summary>
            Clears this buffer.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.flip">
            <summary>
            Flips this buffer.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.hasRemaining">
            <summary>
            Tells whether there are any elements between the current position and the limit.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.isReadOnly">
            <summary>
            Tells whether or not this buffer is read-only.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.limit">
            <summary>
            Returns this buffer's limit.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.limit(System.Int32)">
            <summary>
            Sets this buffer's limit.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.mark">
            <summary>
            Sets this buffer's mark at its position.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.position">
            <summary>
            Returns this buffer's position.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.position(System.Int32)">
            <summary>
            Sets this buffer's position.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.remaining">
            <summary>
            Returns the number of elements between the current position and the limit.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.reset">
            <summary>
            Resets this buffer's position to the previously-marked position.
            </summary>
        </member>
        <member name="M:java.nio.Buffer.rewind">
            <summary>
            Rewinds this buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.allocate(System.Int32)">
            <summary>
            Allocates a new sbyte buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.allocateDirect(System.Int32)">
            <summary>
            Allocates a new direct sbyte buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.array">
            <summary>
            Returns the sbyte array that backs this buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.arrayOffset">
            <summary>
            Returns the offset within this buffer's backing array of the first element of the buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asCharBuffer">
            <summary>
            Creates a view of this sbyte buffer as a char buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asDoubleBuffer">
            <summary>
            Creates a view of this sbyte buffer as a double buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asFloatBuffer">
            <summary>
            Creates a view of this sbyte buffer as a float buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asIntBuffer">
            <summary>
            Creates a view of this sbyte buffer as an int buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asLongBuffer">
            <summary>
            Creates a view of this sbyte buffer as a long buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asReadOnlyBuffer">
            <summary>
            Creates a new, read-only sbyte buffer that shares this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.asShortBuffer">
            <summary>
            Creates a view of this sbyte buffer as a short buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.compact">
            <summary>
            Compacts this buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.compareTo(System.Object)">
            <summary>
            Compares this buffer to another object.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.duplicate">
            <summary>
            Creates a new sbyte buffer that shares this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.get">
            <summary>
            Relative <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.get(System.SByte[])">
            <summary>
            Relative bulk <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.get(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Relative bulk <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.get(System.Int32)">
            <summary>
            Absolute <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getChar">
            <summary>
            Relative <i>get</i> method for reading a char value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getChar(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading a char value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getDouble">
            <summary>
            Relative <i>get</i> method for reading a double value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getDouble(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading a double value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getFloat">
            <summary>
            Relative <i>get</i> method for reading a float value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getFloat(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading a float value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getInt">
            <summary>
            Relative <i>get</i> method for reading an int value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getInt(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading an int value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getLong">
            <summary>
            Relative <i>get</i> method for reading a long value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getLong(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading a long value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getShort">
            <summary>
            Relative <i>get</i> method for reading a short value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.getShort(System.Int32)">
            <summary>
            Absolute <i>get</i> method for reading a short value.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.hasArray">
            <summary>
            Tells whether or not this buffer is backed by an accessible sbyte array.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.isDirect">
            <summary>
            Tells whether or not this sbyte buffer is direct.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.order">
            <summary>
            Retrieves this buffer's sbyte order.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.order(java.nio.ByteOrder)">
            <summary>
            Modifies this buffer's sbyte order.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.put(System.SByte)">
            <summary>
            Relative <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.put(System.SByte[])">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.put(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.put(java.nio.ByteBuffer)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.put(System.Int32,System.SByte)">
            <summary>
            Absolute <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putChar(System.Char)">
            <summary>
            Relative <i>put</i> method for writing a char value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putChar(System.Int32,System.Char)">
            <summary>
            Absolute <i>put</i> method for writing a char value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putDouble(System.Double)">
            <summary>
            Relative <i>put</i> method for writing a double value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putDouble(System.Int32,System.Double)">
            <summary>
            Absolute <i>put</i> method for writing a double value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putFloat(System.Single)">
            <summary>
            Relative <i>put</i> method for writing a float value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putFloat(System.Int32,System.Single)">
            <summary>
            Absolute <i>put</i> method for writing a float value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putInt(System.Int32)">
            <summary>
            Relative <i>put</i> method for writing an int value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putInt(System.Int32,System.Int32)">
            <summary>
            Absolute <i>put</i> method for writing an int value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putLong(System.Int32,System.Int64)">
            <summary>
            Absolute <i>put</i> method for writing a long value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putLong(System.Int64)">
            <summary>
            Relative <i>put</i> method for writing a long value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putShort(System.Int32,System.Int16)">
            <summary>
            Absolute <i>put</i> method for writing a short value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.putShort(System.Int16)">
            <summary>
            Relative <i>put</i> method for writing a short value  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.slice">
            <summary>
            Creates a new sbyte buffer whose content is a shared subsequence of this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.wrap(System.SByte[])">
            <summary>
            Wraps a sbyte array into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteBuffer.wrap(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Wraps a sbyte array into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.channels.ServerSocketChannel.accept">
            <summary>
            Accepts a connection made to this channel's socket.
            </summary>
        </member>
        <member name="M:java.nio.channels.ServerSocketChannel.open">
            <summary>
            Opens a server-socket channel.
            </summary>
        </member>
        <member name="M:java.nio.channels.ServerSocketChannel.socket">
            <summary>
            Retrieves a server socket associated with this channel.
            </summary>
        </member>
        <member name="M:java.nio.channels.ServerSocketChannel.validOps">
            <summary>
            Returns an operation set identifying this channel's supported
            operations.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.allocate(System.Int32)">
            <summary>
            Allocates a new character buffer.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.array">
            <summary>
            Returns the character array that backs this buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.arrayOffset">
            <summary>
            Returns the offset within this buffer's backing array of the first element of the buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.asReadOnlyBuffer">
            <summary>
            Creates a new, read-only character buffer that shares this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.charAt(System.Int32)">
            <summary>
            Reads the character at the given index relative to the current position.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.compact">
            <summary>
            Compacts this buffer  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.compareTo(System.Object)">
            <summary>
            Compares this buffer to another object.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.duplicate">
            <summary>
            Creates a new character buffer that shares this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.get">
            <summary>
            Relative <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.get(System.Char[])">
            <summary>
            Relative bulk <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Relative bulk <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.get(System.Int32)">
            <summary>
            Absolute <i>get</i> method.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.hasArray">
            <summary>
            Tells whether or not this buffer is backed by an accessible character array.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.isDirect">
            <summary>
            Tells whether or not this character buffer is direct.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.length">
            <summary>
            Returns the length of this character buffer.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.order">
            <summary>
            Retrieves this buffer's sbyte order.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.Char)">
            <summary>
            Relative <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.Char[])">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.Char[],System.Int32,System.Int32)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(java.nio.CharBuffer)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.Int32,System.Char)">
            <summary>
            Absolute <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.String)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.put(System.String,System.Int32,System.Int32)">
            <summary>
            Relative bulk <i>put</i> method  <i>(optional operation)</i>.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.slice">
            <summary>
            Creates a new character buffer whose content is a shared subsequence of this buffer's content.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.subSequence(System.Int32,System.Int32)">
            <summary>
            Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.wrap(System.Char[])">
            <summary>
            Wraps a character array into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.wrap(System.Char[],System.Int32,System.Int32)">
            <summary>
            Wraps a character array into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.wrap(java.lang.CharSequence)">
            <summary>
            Wraps a string into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.CharBuffer.wrap(java.lang.CharSequence,System.Int32,System.Int32)">
            <summary>
            Wraps a character sequence into a buffer.
            </summary>
        </member>
        <member name="M:java.nio.ByteOrder.nativeOrder">
            <summary>
            Retrieves the native sbyte order of the underlying platform.
            </summary>
        </member>
        <member name="M:java.security.MessageDigest.getInstance(System.String)">
            <summary>
            Generates a MessageDigest object that implements the specified digest algorithm.
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:java.security.MessageDigest.update(System.SByte[])">
            <summary>
            Updates the digest using the specified array of bytes.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:java.security.MessageDigest.digest">
            <summary>
            Completes the hash computation by performing final operations such as padding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:java.security.Principal.Equals(System.Object)">
            <summary>
            Compares this principal to the specified object.
            </summary>
        </member>
        <member name="M:java.security.Principal.getName">
            <summary>
            Returns the name of this principal.
            </summary>
        </member>
        <member name="M:java.security.Principal.GetHashCode">
            <summary>
            Returns a hashcode for this principal.
            </summary>
        </member>
        <member name="M:java.security.Principal.ToString">
            <summary>
            Returns a string representation of this principal.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.clone">
            <summary>
            Create a copy of this iterator
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.current">
            <summary>
            Gets the character at the current position (as returned by getIndex()).
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.first">
            <summary>
            Sets the position to getBeginIndex() and returns the character at that
            position.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.getBeginIndex">
            <summary>
            Returns the start index of the text.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.getEndIndex">
            <summary>
            Returns the end index of the text.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.getIndex">
            <summary>
            Returns the current index.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.last">
            <summary>
            Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty)
            and returns the character at that position.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.next">
            <summary>
            Increments the iterator's index by one and returns the character
            at the new index.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.previous">
            <summary>
            Decrements the iterator's index by one and returns the character
            at the new index.
            </summary>
        </member>
        <member name="M:java.text.CharacterIterator.setIndex(System.Int32)">
            <summary>
            Sets the position to the specified position in the text and returns that
            character.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getAllAttributeKeys">
            <summary>
            Returns the keys of all attributes defined on the
            iterator's text range.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getAttributes">
            <summary>
            Returns a map with the attributes defined on the current
            character.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getRunLimit">
            <summary>
            Returns the index of the first character following the run
            with respect to all attributes containing the current character.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getRunLimit(java.util.Set)">
            <summary>
            Returns the index of the first character following the run
            with respect to the given attributes containing the current character.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getRunStart">
            <summary>
            Returns the index of the first character of the run
            with respect to all attributes containing the current character.
            </summary>
        </member>
        <member name="M:java.text.AttributedCharacterIterator.getRunStart(java.util.Set)">
            <summary>
            Returns the index of the first character of the run
            with respect to the given attributes containing the current character.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.clone">
            <summary>
            Overrides Cloneable
            </summary>
        </member>
        <member name="M:java.text.DateFormat.format(java.util.Date)">
            <summary>
            Formats a Date into a date/time string.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)">
            <summary>
            Formats a Date into a date/time string.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.format(System.Object,java.lang.StringBuffer,java.text.FieldPosition)">
            <summary>
            Overrides Format.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getAvailableLocales">
            <summary>
            Gets the set of locales for which DateFormats are installed.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getCalendar">
            <summary>
            Gets the calendar associated with this date/time formatter.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateInstance">
            <summary>
            Gets the date formatter with the default formatting style for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateInstance(System.Int32)">
            <summary>
            Gets the date formatter with the given formatting style for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateInstance(System.Int32,java.util.Locale)">
            <summary>
            Gets the date formatter with the given formatting style for the given locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateTimeInstance">
            <summary>
            Gets the date/time formatter with the default formatting style for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateTimeInstance(System.Int32,System.Int32)">
            <summary>
            Gets the date/time formatter with the given date and time formatting styles for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getDateTimeInstance(System.Int32,System.Int32,java.util.Locale)">
            <summary>
            Gets the date/time formatter with the given formatting styles for the given locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getInstance">
            <summary>
            Get a default date/time formatter that uses the SHORT style for both the date and the time.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getNumberFormat">
            <summary>
            Gets the number formatter which this date/time formatter uses to format and parse a time.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getTimeInstance">
            <summary>
            Gets the time formatter with the default formatting style for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getTimeInstance(System.Int32)">
            <summary>
            Gets the time formatter with the given formatting style for the default locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getTimeInstance(System.Int32,java.util.Locale)">
            <summary>
            Gets the time formatter with the given formatting style for the given locale.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.getTimeZone">
            <summary>
            Gets the time zone.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.isLenient">
            <summary>
            Tell whether date/time parsing is to be lenient.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.parse(System.String)">
            <summary>
            Parses text from the beginning of the given string to produce a date.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.parse(System.String,java.text.ParsePosition)">
            <summary>
            Parse a date/time string according to the given parse position.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.parseObject(System.String,java.text.ParsePosition)">
            <summary>
            Parses text from a string to produce a <code>Date</code>.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.setCalendar(java.util.Calendar)">
            <summary>
            Set the calendar to be used by this date format.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.setLenient(System.Boolean)">
            <summary>
            Specify whether or not date/time parsing is to be lenient.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.setNumberFormat(java.text.NumberFormat)">
            <summary>
            Allows you to set the number formatter.
            </summary>
        </member>
        <member name="M:java.text.DateFormat.setTimeZone(java.util.TimeZone)">
            <summary>
            Sets the time zone for the calendar of this DateFormat object.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.applyLocalizedPattern(System.String)">
            <summary>
            Applies the given localized pattern string to this date format.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.applyPattern(System.String)">
            <summary>
            Applies the given pattern string to this date format.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.clone">
            <summary>
            Creates a copy of this <code>SimpleDateFormat</code>.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)">
            <summary>
            Formats the given <code>Date</code> into a date/time string and appends the result to the given <code>StringBuffer</code>.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.get2DigitYearStart">
            <summary>
            Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.parse(System.String,java.text.ParsePosition)">
            <summary>
            Parses text from a string to produce a <code>Date</code>.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.set2DigitYearStart(java.util.Date)">
            <summary>
            Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.toLocalizedPattern">
            <summary>
            Returns a localized pattern string describing this date format.
            </summary>
        </member>
        <member name="M:java.text.SimpleDateFormat.toPattern">
            <summary>
            Returns a pattern string describing this date format.
            </summary>
        </member>
        <member name="M:java.util.Collection.add(System.Object)">
            <summary>
            Ensures that this collection contains the specified element (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.addAll(java.util.Collection)">
            <summary>
            Adds all of the elements in the specified collection to this collection
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.clear">
            <summary>
            Removes all of the elements from this collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this collection contains the specified
            element.
            </summary>
        </member>
        <member name="M:java.util.Collection.containsAll(java.util.Collection)">
            <summary>
            Returns <tt>true</tt> if this collection contains all of the elements
            in the specified collection.
            </summary>
        </member>
        <member name="M:java.util.Collection.Equals(System.Object)">
            <summary>
            Compares the specified object with this collection for equality.
            </summary>
        </member>
        <member name="M:java.util.Collection.GetHashCode">
            <summary>
            Returns the hash code value for this collection.
            </summary>
        </member>
        <member name="M:java.util.Collection.isEmpty">
            <summary>
            Returns <tt>true</tt> if this collection contains no elements.
            </summary>
        </member>
        <member name="M:java.util.Collection.iterator">
            <summary>
            Returns an iterator over the elements in this collection.
            </summary>
        </member>
        <member name="M:java.util.Collection.remove(System.Object)">
            <summary>
            Removes a single instance of the specified element from this
            collection, if it is present (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.removeAll(java.util.Collection)">
            <summary>
            Removes all this collection's elements that are also contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.retainAll(java.util.Collection)">
            <summary>
            Retains only the elements in this collection that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Collection.size">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="M:java.util.Collection.toArray">
            <summary>
            Returns an array containing all of the elements in this collection.
            </summary>
        </member>
        <member name="M:java.util.Collection.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this collection;
            the runtime type of the returned array is that of the specified array.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.add(System.Object)">
            <summary>
            Ensures that this collection contains the specified element (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.addAll(java.util.Collection)">
            <summary>
            Adds all of the elements in the specified collection to this collection
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.clear">
            <summary>
            Removes all of the elements from this collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this collection contains the specified
            element.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.containsAll(java.util.Collection)">
            <summary>
            Returns <tt>true</tt> if this collection contains all of the elements
            in the specified collection.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.isEmpty">
            <summary>
            Returns <tt>true</tt> if this collection contains no elements.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.iterator">
            <summary>
            Returns an iterator over the elements contained in this collection.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.remove(System.Object)">
            <summary>
            Removes a single instance of the specified element from this
            collection, if it is present (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.removeAll(java.util.Collection)">
            <summary>
            Removes from this collection all of its elements that are contained in
            the specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.retainAll(java.util.Collection)">
            <summary>
            Retains only the elements in this collection that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.size">
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.toArray">
            <summary>
            Returns an array containing all of the elements in this collection.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this collection;
            the runtime type of the returned array is that of the specified array.
            </summary>
        </member>
        <member name="M:java.util.AbstractCollection.ToString">
            <summary>
            Returns a string representation of this collection.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this list
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.add(System.Object)">
            <summary>
            Appends the specified element to the end of this List (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in the specified collection into this list
            at the specified position (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.clear">
            <summary>
            Removes all of the elements from this collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.Equals(System.Object)">
            <summary>
            Compares the specified object with this list for equality.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.GetHashCode">
            <summary>
            Returns the hash code value for this list.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.indexOf(System.Object)">
            <summary>
            Returns the index in this list of the first occurence of the specified
            element, or -1 if the list does not contain this element.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.iterator">
            <summary>
            Returns an iterator over the elements in this list in proper
            sequence.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.lastIndexOf(System.Object)">
            <summary>
            Returns the index in this list of the last occurence of the specified
            element, or -1 if the list does not contain this element.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.listIterator">
            <summary>
            Returns an iterator of the elements in this list (in proper sequence).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.listIterator(System.Int32)">
            <summary>
            Returns a list iterator of the elements in this list (in proper
            sequence), starting at the specified position in the list.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this list (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.removeRange(System.Int32,System.Int32)">
            <summary>
            Removes from this list all of the elements whose index is between
            <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
            </summary>
        </member>
        <member name="M:java.util.AbstractList.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the
            specified element (optional operation).
            </summary>
        </member>
        <member name="M:java.util.AbstractList.subList(System.Int32,System.Int32)">
            <summary>
            Returns a view of the portion of this list between <tt>fromIndex</tt>,
            inclusive, and <tt>toIndex</tt>, exclusive.
            </summary>
        </member>
        <member name="T:java.util.AbstractMap">
            <summary>
            http://java.sun.com/j2se/1.4.2/docs/api/java/util/AbstractMap.html
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in in the specified collection into this
            list at the specified position.
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.iterator">
            <summary>
            Returns an iterator over the elements in this list (in proper
            sequence).
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.listIterator(System.Int32)">
            <summary>
            Returns a list iterator over the elements in this list (in proper
            sequence).
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.AbstractSequentialList.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the
            specified element.
            </summary>
        </member>
        <member name="M:java.util.List.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this list
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.add(System.Object)">
            <summary>
            Appends the specified element to the end of this list (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.List.addAll(java.util.Collection)">
            <summary>
            Appends all of the elements in the specified collection to the end of
            this list, in the order that they are returned by the specified
            collection's iterator (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in the specified collection into this
            list at the specified position (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.clear">
            <summary>
            Removes all of the elements from this list (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this list contains the specified element.
            </summary>
        </member>
        <member name="M:java.util.List.containsAll(java.util.Collection)">
            <summary>
            Returns <tt>true</tt> if this list contains all of the elements of the
            specified collection.
            </summary>
        </member>
        <member name="M:java.util.List.Equals(System.Object)">
            <summary>
            Compares the specified object with this list for equality.
            </summary>
        </member>
        <member name="M:java.util.List.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.List.GetHashCode">
            <summary>
            Returns the hash code value for this list.
            </summary>
        </member>
        <member name="M:java.util.List.indexOf(System.Object)">
            <summary>
            Returns the index in this list of the first occurrence of the specified
            element, or -1 if this list does not contain this element.
            </summary>
        </member>
        <member name="M:java.util.List.isEmpty">
            <summary>
            Returns <tt>true</tt> if this list contains no elements.
            </summary>
        </member>
        <member name="M:java.util.List.iterator">
            <summary>
            Returns an iterator over the elements in this list in proper sequence.
            </summary>
        </member>
        <member name="M:java.util.List.lastIndexOf(System.Object)">
            <summary>
            Returns the index in this list of the last occurrence of the specified
            element, or -1 if this list does not contain this element.
            </summary>
        </member>
        <member name="M:java.util.List.listIterator">
            <summary>
            Returns a list iterator of the elements in this list (in proper
            sequence).
            </summary>
        </member>
        <member name="M:java.util.List.listIterator(System.Int32)">
            <summary>
            Returns a list iterator of the elements in this list (in proper
            sequence), starting at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.List.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this list (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.List.remove(System.Object)">
            <summary>
            Removes the first occurrence in this list of the specified element
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.removeAll(java.util.Collection)">
            <summary>
            Removes from this list all the elements that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.retainAll(java.util.Collection)">
            <summary>
            Retains only the elements in this list that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the
            specified element (optional operation).
            </summary>
        </member>
        <member name="M:java.util.List.size">
            <summary>
            Returns the number of elements in this list.
            </summary>
        </member>
        <member name="M:java.util.List.subList(System.Int32,System.Int32)">
            <summary>
            Returns a view of the portion of this list between the specified
            <tt>fromIndex</tt>, inclusive, and <tt>toIndex</tt>, exclusive.
            </summary>
        </member>
        <member name="M:java.util.List.toArray">
            <summary>
            Returns an array containing all of the elements in this list in proper
            sequence.
            </summary>
        </member>
        <member name="M:java.util.List.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this list in proper
            sequence; the runtime type of the returned array is that of the
            specified array.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.#ctor">
            <summary>
            Constructs an empty list with an initial capacity of ten.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.#ctor(java.util.Collection)">
            <summary>
            Constructs a list containing the elements of the specified
            collection, in the order they are returned by the collection's
            iterator.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.#ctor(System.Int32)">
            <summary>
            Constructs an empty list with the specified initial capacity.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this
            list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.add(System.Object)">
            <summary>
            Appends the specified element to the end of this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.addAll(java.util.Collection)">
            <summary>
            Appends all of the elements in the specified Collection to the end of
            this list, in the order that they are returned by the
            specified Collection's Iterator.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in the specified Collection into this
            list, starting at the specified position.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.clear">
            <summary>
            Removes all of the elements from this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.clone">
            <summary>
            Returns a shallow copy of this <tt>ArrayList</tt> instance.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this list contains the specified element.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.ensureCapacity(System.Int32)">
            <summary>
            Increases the capacity of this <tt>ArrayList</tt> instance, if
            necessary, to ensure  that it can hold at least the number of elements
            specified by the minimum capacity argument.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.indexOf(System.Object)">
            <summary>
            Searches for the first occurence of the given argument, testing
            for equality using the <tt>equals</tt> method.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.isEmpty">
            <summary>
            Tests if this list has no elements.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.lastIndexOf(System.Object)">
            <summary>
            Returns the index of the last occurrence of the specified object in
            this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.removeRange(System.Int32,System.Int32)">
            <summary>
            Removes from this List all of the elements whose index is between
            fromIndex, inclusive and toIndex, exclusive.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with
            the specified element.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.size">
            <summary>
            Returns the number of elements in this list.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.toArray">
            <summary>
            Returns an array containing all of the elements in this list
            in the correct order.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this list in the
            correct order; the runtime type of the returned array is that of the
            specified array.
            </summary>
        </member>
        <member name="M:java.util.ArrayList.trimToSize">
            <summary>
            Trims the capacity of this <tt>ArrayList</tt> instance to be the
            list's current size.
            </summary>
        </member>
        <member name="M:java.util.Arrays.asList(System.Object[])">
            <summary>
            Returns a fixed-size list backed by the specified array.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.SByte[],System.SByte)">
            <summary>
            Searches the specified array of bytes for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Char[],System.Char)">
            <summary>
            Searches the specified array of chars for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Double[],System.Double)">
            <summary>
            Searches the specified array of doubles for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Single[],System.Single)">
            <summary>
            Searches the specified array of floats for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Int32[],System.Int32)">
            <summary>
            Searches the specified array of ints for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Int64[],System.Int64)">
            <summary>
            Searches the specified array of longs for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Object[],System.Object)">
            <summary>
            Searches the specified array for the specified object using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Object[],System.Object,java.util.Comparator)">
            <summary>
            Searches the specified array for the specified object using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.binarySearch(System.Int16[],System.Int16)">
            <summary>
            Searches the specified array of shorts for the specified value using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Boolean[],System.Boolean)">
            <summary>
            Assigns the specified boolean value to each element of the specified array of booleans.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Boolean[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Assigns the specified boolean value to each element of the specified  range of the specified array of booleans.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.SByte[],System.SByte)">
            <summary>
            Assigns the specified sbyte value to each element of the specified array of bytes.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.SByte[],System.Int32,System.Int32,System.SByte)">
            <summary>
            Assigns the specified sbyte value to each element of the specified  range of the specified array of bytes.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Char[],System.Char)">
            <summary>
            Assigns the specified char value to each element of the specified array of chars.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Char[],System.Int32,System.Int32,System.Char)">
            <summary>
            Assigns the specified char value to each element of the specified  range of the specified array of chars.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Double[],System.Double)">
            <summary>
            Assigns the specified double value to each element of the specified array of doubles.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Assigns the specified double value to each element of the specified  range of the specified array of doubles.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Single[],System.Single)">
            <summary>
            Assigns the specified float value to each element of the specified array of floats.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Single[],System.Int32,System.Int32,System.Single)">
            <summary>
            Assigns the specified float value to each element of the specified  range of the specified array of floats.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int32[],System.Int32)">
            <summary>
            Assigns the specified int value to each element of the specified array of ints.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Assigns the specified int value to each element of the specified  range of the specified array of ints.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int64[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Assigns the specified long value to each element of the specified  range of the specified array of longs.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int64[],System.Int64)">
            <summary>
            Assigns the specified long value to each element of the specified array of longs.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Object[],System.Int32,System.Int32,System.Object)">
            <summary>
            Assigns the specified Object reference to each element of the specified  range of the specified array of Objects.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Object[],System.Object)">
            <summary>
            Assigns the specified Object reference to each element of the specified array of Objects.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int16[],System.Int32,System.Int32,System.Int16)">
            <summary>
            Assigns the specified short value to each element of the specified  range of the specified array of shorts.
            </summary>
        </member>
        <member name="M:java.util.Arrays.fill(System.Int16[],System.Int16)">
            <summary>
            Assigns the specified short value to each element of the specified array of shorts.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.SByte[])">
            <summary>
            Sorts the specified array of bytes into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of bytes into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Char[])">
            <summary>
            Sorts the specified array of chars into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Char[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of chars into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Double[])">
            <summary>
            Sorts the specified array of doubles into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Double[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of doubles into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Single[])">
            <summary>
            Sorts the specified array of floats into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Single[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of floats into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int32[])">
            <summary>
            Sorts the specified array of ints into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of ints into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int64[])">
            <summary>
            Sorts the specified array of longs into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of longs into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Object[])">
            <summary>
            Sorts the specified array of objects into ascending order, according to the <i>natural ordering</i> of its elements.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Object[],java.util.Comparator)">
            <summary>
            Sorts the specified array of objects according to the order induced by the specified comparator.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Object[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of objects into ascending order, according to the <i>natural ordering</i> of its elements.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Object[],System.Int32,System.Int32,java.util.Comparator)">
            <summary>
            Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int16[])">
            <summary>
            Sorts the specified array of shorts into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Arrays.sort(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Sorts the specified range of the specified array of shorts into ascending numerical order.
            </summary>
        </member>
        <member name="M:java.util.Calendar.add(System.Int32,System.Int32)">
            <summary>
            Date Arithmetic function.
            </summary>
        </member>
        <member name="M:java.util.Calendar.after(System.Object)">
            <summary>
            Compares the time field records.
            </summary>
        </member>
        <member name="M:java.util.Calendar.before(System.Object)">
            <summary>
            Compares the time field records.
            </summary>
        </member>
        <member name="M:java.util.Calendar.clear">
            <summary>
            Clears the values of all the time fields.
            </summary>
        </member>
        <member name="M:java.util.Calendar.clear(System.Int32)">
            <summary>
            Clears the value in the given time field.
            </summary>
        </member>
        <member name="M:java.util.Calendar.clone">
            <summary>
            Overrides Cloneable
            </summary>
        </member>
        <member name="M:java.util.Calendar.complete">
            <summary>
            Fills in any unset fields in the time field list.
            </summary>
        </member>
        <member name="M:java.util.Calendar.computeFields">
            <summary>
            Converts  the current millisecond time value <code>time</code> to field values in <code>fields[]</code>.
            </summary>
        </member>
        <member name="M:java.util.Calendar.computeTime">
            <summary>
            Converts the current field values in <code>fields[]</code> to the millisecond time value <code>time</code>.
            </summary>
        </member>
        <member name="M:java.util.Calendar.get(System.Int32)">
            <summary>
            Gets the value for a given time field.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getActualMaximum(System.Int32)">
            <summary>
            Return the maximum value that this field could have, given the current date.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getActualMinimum(System.Int32)">
            <summary>
            Return the minimum value that this field could have, given the current date.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getAvailableLocales">
            <summary>
            Gets the list of locales for which Calendars are installed.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getFirstDayOfWeek">
            <summary>
            Gets what the first day of the week is; e.g., Sunday in US, Monday in France.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getGreatestMinimum(System.Int32)">
            <summary>
            Gets the highest minimum value for the given field if varies.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getInstance">
            <summary>
            Gets a calendar using the default time zone and locale.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getInstance(java.util.Locale)">
            <summary>
            Gets a calendar using the default time zone and specified locale.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getInstance(java.util.TimeZone)">
            <summary>
            Gets a calendar using the specified time zone and default locale.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)">
            <summary>
            Gets a calendar with the specified time zone and locale.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getLeastMaximum(System.Int32)">
            <summary>
            Gets the lowest maximum value for the given field if varies.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getMaximum(System.Int32)">
            <summary>
            Gets the maximum value for the given time field.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getMinimalDaysInFirstWeek">
            <summary>
            Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, getMinimalDaysInFirstWeek returns 1.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getMinimum(System.Int32)">
            <summary>
            Gets the minimum value for the given time field.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getTime">
            <summary>
            Gets this Calendar's current time.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getTimeInMillis">
            <summary>
            Gets this Calendar's current time as a long.
            </summary>
        </member>
        <member name="M:java.util.Calendar.getTimeZone">
            <summary>
            Gets the time zone.
            </summary>
        </member>
        <member name="M:java.util.Calendar.internalGet(System.Int32)">
            <summary>
            Gets the value for a given time field.
            </summary>
        </member>
        <member name="M:java.util.Calendar.isLenient">
            <summary>
            Tell whether date/time interpretation is to be lenient.
            </summary>
        </member>
        <member name="M:java.util.Calendar.isSet(System.Int32)">
            <summary>
            Determines if the given time field has a value set.
            </summary>
        </member>
        <member name="M:java.util.Calendar.roll(System.Int32,System.Boolean)">
            <summary>
            Time Field Rolling function.
            </summary>
        </member>
        <member name="M:java.util.Calendar.roll(System.Int32,System.Int32)">
            <summary>
            Time Field Rolling function.
            </summary>
        </member>
        <member name="M:java.util.Calendar.set(System.Int32,System.Int32)">
            <summary>
            Sets the time field with the given value.
            </summary>
        </member>
        <member name="M:java.util.Calendar.set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the values for the fields year, month, and date.
            </summary>
        </member>
        <member name="M:java.util.Calendar.set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the values for the fields year, month, date, hour, and minute.
            </summary>
        </member>
        <member name="M:java.util.Calendar.set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the values for the fields year, month, date, hour, minute, and second.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setFirstDayOfWeek(System.Int32)">
            <summary>
            Sets what the first day of the week is; e.g., Sunday in US, Monday in France.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setLenient(System.Boolean)">
            <summary>
            Specify whether or not date/time interpretation is to be lenient.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setMinimalDaysInFirstWeek(System.Int32)">
            <summary>
            Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call the method with value 1.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setTime(java.util.Date)">
            <summary>
            Sets this Calendar's current time with the given Date.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setTimeInMillis(System.Int64)">
            <summary>
            Sets this Calendar's current time from the given long value.
            </summary>
        </member>
        <member name="M:java.util.Calendar.setTimeZone(java.util.TimeZone)">
            <summary>
            Sets the time zone with the given time zone value.
            </summary>
        </member>
        <member name="T:java.util.Collections">
            <summary>
            This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, "wrappers", which return a new collection backed by a specified collection, and a few other odds and ends. 
            </summary>
        </member>
        <member name="M:java.util.Collections.binarySearch(java.util.List,System.Object)">
            <summary>
            Searches the specified list for the specified object using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Collections.binarySearch(java.util.List,System.Object,java.util.Comparator)">
            <summary>
            Searches the specified list for the specified object using the binary search algorithm.
            </summary>
        </member>
        <member name="M:java.util.Collections.copy(java.util.List,java.util.List)">
            <summary>
            Copies all of the elements from one list into another.
            </summary>
        </member>
        <member name="M:java.util.Collections.enumeration(java.util.Collection)">
            <summary>
            Returns an enumeration over the specified collection.
            </summary>
        </member>
        <member name="M:java.util.Collections.fill(java.util.List,System.Object)">
            <summary>
            Replaces all of the elements of the specified list with the specified element.
            </summary>
        </member>
        <member name="M:java.util.Collections.indexOfSubList(java.util.List,java.util.List)">
            <summary>
            Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.
            </summary>
        </member>
        <member name="M:java.util.Collections.lastIndexOfSubList(java.util.List,java.util.List)">
            <summary>
            Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.
            </summary>
        </member>
        <member name="M:java.util.Collections.list(java.util.Enumeration)">
            <summary>
            Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.
            </summary>
        </member>
        <member name="M:java.util.Collections.max(java.util.Collection)">
            <summary>
            Returns the maximum element of the given collection, according to the
            </summary>
        </member>
        <member name="M:java.util.Collections.max(java.util.Collection,java.util.Comparator)">
            <summary>
            Returns the maximum element of the given collection, according to the order induced by the specified comparator.
            </summary>
        </member>
        <member name="M:java.util.Collections.min(java.util.Collection)">
            <summary>
            Returns the minimum element of the given collection, according to the
            </summary>
        </member>
        <member name="M:java.util.Collections.min(java.util.Collection,java.util.Comparator)">
            <summary>
            Returns the minimum element of the given collection, according to the order induced by the specified comparator.
            </summary>
        </member>
        <member name="M:java.util.Collections.nCopies(System.Int32,System.Object)">
            <summary>
            Returns an immutable list consisting of
            </summary>
        </member>
        <member name="M:java.util.Collections.replaceAll(java.util.List,System.Object,System.Object)">
            <summary>
            Replaces all occurrences of one specified value in a list with another.
            </summary>
        </member>
        <member name="M:java.util.Collections.reverse(java.util.List)">
            <summary>
            Reverses the order of the elements in the specified list.
            </summary>
        </member>
        <member name="M:java.util.Collections.reverseOrder">
            <summary>
            Returns a comparator that imposes the reverse of the
            </summary>
        </member>
        <member name="M:java.util.Collections.rotate(java.util.List,System.Int32)">
            <summary>
            Rotates the elements in the specified list by the specified distance.
            </summary>
        </member>
        <member name="M:java.util.Collections.shuffle(java.util.List)">
            <summary>
            Randomly permutes the specified list using a default source of randomness.
            </summary>
        </member>
        <member name="M:java.util.Collections.shuffle(java.util.List,java.util.Random)">
            <summary>
            Randomly permute the specified list using the specified source of randomness.
            </summary>
        </member>
        <member name="M:java.util.Collections.singleton(System.Object)">
            <summary>
            Returns an immutable set containing only the specified object.
            </summary>
        </member>
        <member name="M:java.util.Collections.singletonList(System.Object)">
            <summary>
            Returns an immutable list containing only the specified object.
            </summary>
        </member>
        <member name="M:java.util.Collections.singletonMap(System.Object,System.Object)">
            <summary>
            Returns an immutable map, mapping only the specified key to the specified value.
            </summary>
        </member>
        <member name="M:java.util.Collections.sort(java.util.List)">
            <summary>
            Sorts the specified list into ascending order, according to the
            </summary>
        </member>
        <member name="M:java.util.Collections.sort(java.util.List,java.util.Comparator)">
            <summary>
            Sorts the specified list according to the order induced by the specified comparator.
            </summary>
        </member>
        <member name="M:java.util.Collections.swap(java.util.List,System.Int32,System.Int32)">
            <summary>
            Swaps the elements at the specified positions in the specified list.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedCollection(java.util.Collection)">
            <summary>
            Returns a synchronized (thread-safe) collection backed by the specified collection.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedList(java.util.List)">
            <summary>
            Returns a synchronized (thread-safe) list backed by the specified list.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedMap(java.util.Map)">
            <summary>
            Returns a synchronized (thread-safe) map backed by the specified map.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedSet(java.util.Set)">
            <summary>
            Returns a synchronized (thread-safe) set backed by the specified set.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedSortedMap(java.util.SortedMap)">
            <summary>
            Returns a synchronized (thread-safe) sorted map backed by the specified sorted map.
            </summary>
        </member>
        <member name="M:java.util.Collections.synchronizedSortedSet(java.util.SortedSet)">
            <summary>
            Returns a synchronized (thread-safe) sorted set backed by the specified sorted set.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableCollection(java.util.Collection)">
            <summary>
            Returns an unmodifiable view of the specified collection.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableList(java.util.List)">
            <summary>
            Returns an unmodifiable view of the specified list.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableMap(java.util.Map)">
            <summary>
            Returns an unmodifiable view of the specified map.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableSet(java.util.Set)">
            <summary>
            Returns an unmodifiable view of the specified set.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableSortedMap(java.util.SortedMap)">
            <summary>
            Returns an unmodifiable view of the specified sorted map.
            </summary>
        </member>
        <member name="M:java.util.Collections.unmodifiableSortedSet(java.util.SortedSet)">
            <summary>
            Returns an unmodifiable view of the specified sorted set.
            </summary>
        </member>
        <member name="M:java.util.AbstractSet.#ctor">
            <summary>
            Sole constructor.
            </summary>
        </member>
        <member name="M:java.util.AbstractSet.Equals(System.Object)">
            <summary>
            Compares the specified object with this set for equality.
            </summary>
        </member>
        <member name="M:java.util.AbstractSet.GetHashCode">
            <summary>
            Returns the hash code value for this set.
            </summary>
        </member>
        <member name="M:java.util.AbstractSet.removeAll(java.util.Collection)">
            <summary>
            Removes from this set all of its elements that are contained in
            the specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present
            (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.addAll(java.util.Collection)">
            <summary>
            Adds all of the elements in the specified collection to this set if
            they're not already present (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.clear">
            <summary>
            Removes all of the elements from this set (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this set contains the specified element.
            </summary>
        </member>
        <member name="M:java.util.Set.containsAll(java.util.Collection)">
            <summary>
            Returns <tt>true</tt> if this set contains all of the elements of the
            specified collection.
            </summary>
        </member>
        <member name="M:java.util.Set.Equals(System.Object)">
            <summary>
            Compares the specified object with this set for equality.
            </summary>
        </member>
        <member name="M:java.util.Set.GetHashCode">
            <summary>
            Returns the hash code value for this set.
            </summary>
        </member>
        <member name="M:java.util.Set.isEmpty">
            <summary>
            Returns <tt>true</tt> if this set contains no elements.
            </summary>
        </member>
        <member name="M:java.util.Set.iterator">
            <summary>
            Returns an iterator over the elements in this set.
            </summary>
        </member>
        <member name="M:java.util.Set.remove(System.Object)">
            <summary>
            Removes the specified element from this set if it is present (optional
            operation).
            </summary>
        </member>
        <member name="M:java.util.Set.removeAll(java.util.Collection)">
            <summary>
            Removes from this set all of its elements that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.retainAll(java.util.Collection)">
            <summary>
            Retains only the elements in this set that are contained in the
            specified collection (optional operation).
            </summary>
        </member>
        <member name="M:java.util.Set.size">
            <summary>
            Returns the number of elements in this set (its cardinality).
            </summary>
        </member>
        <member name="M:java.util.Set.toArray">
            <summary>
            Returns an array containing all of the elements in this set.
            </summary>
        </member>
        <member name="M:java.util.Set.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this set; the
            runtime type of the returned array is that of the specified array.
            </summary>
        </member>
        <member name="M:java.util.HashSet.#ctor">
            <summary>
            Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
            default initial capacity (16) and load factor (0.75).
            </summary>
        </member>
        <member name="M:java.util.HashSet.#ctor(java.util.Collection)">
            <summary>
            Constructs a new set containing the elements in the specified
            collection.
            </summary>
        </member>
        <member name="M:java.util.HashSet.#ctor(System.Int32)">
            <summary>
            Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
            the specified initial capacity and default load factor, which is
            <tt>0.75</tt>.
            </summary>
        </member>
        <member name="M:java.util.HashSet.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs a new, empty set; the backing <tt>HashMap</tt> instance has
            the specified initial capacity and the specified load factor.
            </summary>
        </member>
        <member name="M:java.util.HashSet.add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already
            present.
            </summary>
        </member>
        <member name="M:java.util.HashSet.clear">
            <summary>
            Removes all of the elements from this set.
            </summary>
        </member>
        <member name="M:java.util.HashSet.clone">
            <summary>
            Returns a shallow copy of this <tt>HashSet</tt> instance: the elements
            themselves are not cloned.
            </summary>
        </member>
        <member name="M:java.util.HashSet.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this set contains the specified element.
            </summary>
        </member>
        <member name="M:java.util.HashSet.isEmpty">
            <summary>
            Returns <tt>true</tt> if this set contains no elements.
            </summary>
        </member>
        <member name="M:java.util.HashSet.iterator">
            <summary>
            Returns an iterator over the elements in this set.
            </summary>
        </member>
        <member name="M:java.util.HashSet.remove(System.Object)">
            <summary>
            Removes the specified element from this set if it is present.
            </summary>
        </member>
        <member name="M:java.util.HashSet.size">
            <summary>
            Returns the number of elements in this set (its cardinality).
            </summary>
        </member>
        <member name="M:java.util.Iterator.hasNext">
            <summary>
            Returns <tt>true</tt> if the iteration has more elements.
            </summary>
        </member>
        <member name="M:java.util.Iterator.next">
            <summary>
            Returns the next element in the iteration.
            </summary>
        </member>
        <member name="M:java.util.Iterator.remove">
            <summary>
            Removes from the underlying collection the last element returned by the
            iterator (optional operation).
            </summary>
        </member>
        <member name="M:java.util.LinkedList.#ctor">
            <summary>
            Constructs an empty list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.#ctor(java.util.Collection)">
            <summary>
            Constructs a list containing the elements of the specified
            collection, in the order they are returned by the collection's
            iterator.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.add(System.Object)">
            <summary>
            Appends the specified element to the end of this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.addAll(java.util.Collection)">
            <summary>
            Appends all of the elements in the specified collection to the end of
            this list, in the order that they are returned by the specified
            collection's iterator.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in the specified collection into this
            list, starting at the specified position.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.addFirst(System.Object)">
            <summary>
            Inserts the given element at the beginning of this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.addLast(System.Object)">
            <summary>
            Appends the given element to the end of this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.clear">
            <summary>
            Removes all of the elements from this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.clone">
            <summary>
            Returns a shallow copy of this <tt>LinkedList</tt>.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.contains(System.Object)">
            <summary>
            Returns <tt>true</tt> if this list contains the specified element.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.getFirst">
            <summary>
            Returns the first element in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.getLast">
            <summary>
            Returns the last element in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.indexOf(System.Object)">
            <summary>
            Returns the index in this list of the first occurrence of the
            specified element, or -1 if the List does not contain this
            element.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.lastIndexOf(System.Object)">
            <summary>
            Returns the index in this list of the last occurrence of the
            specified element, or -1 if the list does not contain this
            element.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.listIterator(System.Int32)">
            <summary>
            Returns a list-iterator of the elements in this list (in proper
            sequence), starting at the specified position in the list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified element in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.removeFirst">
            <summary>
            Removes and returns the first element from this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.removeLast">
            <summary>
            Removes and returns the last element from this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the
            specified element.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.size">
            <summary>
            Returns the number of elements in this list.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.toArray">
            <summary>
            Returns an array containing all of the elements in this list
            in the correct order.
            </summary>
        </member>
        <member name="M:java.util.LinkedList.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this list in
            the correct order; the runtime type of the returned array is that of
            the specified array.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.add(System.Object)">
            <summary>
            Inserts the specified element into the list (optional operation).
            </summary>
        </member>
        <member name="M:java.util.ListIterator.hasNext">
            <summary>
            Returns <tt>true</tt> if this list iterator has more elements when
            traversing the list in the forward direction.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.hasPrevious">
            <summary>
            Returns <tt>true</tt> if this list iterator has more elements when
            traversing the list in the reverse direction.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.next">
            <summary>
            Returns the next element in the list.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.nextIndex">
            <summary>
            Returns the index of the element that would be returned by a subsequent
            call to <tt>next</tt>.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.previous">
            <summary>
            Returns the previous element in the list.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.previousIndex">
            <summary>
            Returns the index of the element that would be returned by a subsequent
            call to <tt>previous</tt>.
            </summary>
        </member>
        <member name="M:java.util.ListIterator.remove">
            <summary>
            Removes from the list the last element that was returned by
            <tt>next</tt> or <tt>previous</tt> (optional operation).
            </summary>
        </member>
        <member name="M:java.util.ListIterator.set(System.Object)">
            <summary>
            Replaces the last element returned by <tt>next</tt> or
            <tt>previous</tt> with the specified element (optional operation).
            </summary>
        </member>
        <member name="T:java.util.Random">
            <summary>
            
            </summary>
        </member>
        <member name="M:java.util.Random.#ctor">
            <summary>
            Creates a new random number generator.
            </summary>
        </member>
        <member name="M:java.util.Random.#ctor(System.Int64)">
            <summary>
            Creates a new random number generator using a single
            </summary>
        </member>
        <member name="M:java.util.Random.next(System.Int32)">
            <summary>
            Generates the next pseudorandom number.
            </summary>
        </member>
        <member name="M:java.util.Random.nextBoolean">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextBytes(System.SByte[])">
            <summary>
            Generates random bytes and places them into a user-supplied sbyte array.
            </summary>
        </member>
        <member name="M:java.util.Random.nextDouble">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextFloat">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextGaussian">
            <summary>
            Returns the next pseudorandom, Gaussian ("normally") distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextInt">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextInt(System.Int32)">
            <summary>
            Returns a pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.nextLong">
            <summary>
            Returns the next pseudorandom, uniformly distributed
            </summary>
        </member>
        <member name="M:java.util.Random.setSeed(System.Int64)">
            <summary>
            Sets the seed of this random number generator using a single
            </summary>
        </member>
        <member name="T:java.util.regex.Matcher">
            <summary>
            An engine that performs match operations on a character sequence by interpreting a Pattern. 
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.appendReplacement(java.lang.StringBuffer,System.String)">
            <summary>
            Implements a non-terminal append-and-replace step.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.appendTail(java.lang.StringBuffer)">
            <summary>
            Implements a terminal append-and-replace step.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.end">
            <summary>
            Returns the index of the last character matched, plus one.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.end(System.Int32)">
            <summary>
            Returns the index of the last character, plus one, of the subsequence captured by the given group during the previous match operation.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.find">
            <summary>
            Attempts to find the next subsequence of the input sequence that matches the pattern.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.find(System.Int32)">
            <summary>
            Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.group">
            <summary>
            Returns the input subsequence matched by the previous match.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.group(System.Int32)">
            <summary>
            Returns the input subsequence captured by the given group during the previous match operation.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.groupCount">
            <summary>
            Returns the number of capturing groups in this matcher's pattern.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.lookingAt">
            <summary>
            Attempts to match the input sequence, starting at the beginning, against the pattern.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.matches">
            <summary>
            Attempts to match the entire input sequence against the pattern.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.pattern">
            <summary>
            Returns the pattern that is interpreted by this matcher.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.replaceAll(System.String)">
            <summary>
            Replaces every subsequence of the input sequence that matches the pattern with the given replacement string.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.replaceFirst(System.String)">
            <summary>
            Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.reset">
            <summary>
            Resets this matcher.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.reset(java.lang.CharSequence)">
            <summary>
            Resets this matcher with a new input sequence.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.start">
            <summary>
            Returns the start index of the previous match.
            </summary>
        </member>
        <member name="M:java.util.regex.Matcher.start(System.Int32)">
            <summary>
            Returns the start index of the subsequence captured by the given group during the previous match operation.
            </summary>
        </member>
        <member name="T:java.util.SortedSet">
            <summary>
            public interface SortedSet
            </summary>
        </member>
        <member name="M:java.util.SortedSet.comparator">
            <summary>
            Returns the comparator associated with this sorted set, or
            </summary>
        </member>
        <member name="M:java.util.SortedSet.first">
            <summary>
            Returns the first (lowest) element currently in this sorted set.
            </summary>
        </member>
        <member name="M:java.util.SortedSet.headSet(System.Object)">
            <summary>
            Returns a view of the portion of this sorted set whose elements are strictly less than
            </summary>
        </member>
        <member name="M:java.util.SortedSet.last">
            <summary>
            Returns the last (highest) element currently in this sorted set.
            </summary>
        </member>
        <member name="M:java.util.SortedSet.subSet(System.Object,System.Object)">
            <summary>
            Returns a view of the portion of this sorted set whose elements range from
            </summary>
        </member>
        <member name="M:java.util.SortedSet.tailSet(System.Object)">
            <summary>
            Returns a view of the portion of this sorted set whose elements are greater than or equal to
            </summary>
        </member>
        <member name="T:java.util.SortedMap">
            <summary>
            public interface SortedMap
            </summary>
        </member>
        <member name="M:java.util.SortedMap.comparator">
            <summary>
            Returns the comparator associated with this sorted map, or
            </summary>
        </member>
        <member name="M:java.util.SortedMap.firstKey">
            <summary>
            Returns the first (lowest) key currently in this sorted map.
            </summary>
        </member>
        <member name="M:java.util.SortedMap.headMap(System.Object)">
            <summary>
            Returns a view of the portion of this sorted map whose keys are strictly less than toKey.
            </summary>
        </member>
        <member name="M:java.util.SortedMap.lastKey">
            <summary>
            Returns the last (highest) key currently in this sorted map.
            </summary>
        </member>
        <member name="M:java.util.SortedMap.subMap(System.Object,System.Object)">
            <summary>
            Returns a view of the portion of this sorted map whose keys range from
            </summary>
        </member>
        <member name="M:java.util.SortedMap.tailMap(System.Object)">
            <summary>
            Returns a view of the portion of this sorted map whose keys are greater than or equal to
            </summary>
        </member>
        <member name="T:java.util.Stack">
            <summary>
            public class Stack extends Vector
            </summary>
        </member>
        <member name="M:java.util.Vector.#ctor">
            <summary>
            Constructs an empty vector so that its internal data array has size
            </summary>
        </member>
        <member name="M:java.util.Vector.#ctor(java.util.Collection)">
            <summary>
            Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator.
            </summary>
        </member>
        <member name="M:java.util.Vector.#ctor(System.Int32)">
            <summary>
            Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero.
            </summary>
        </member>
        <member name="M:java.util.Vector.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an empty vector with the specified initial capacity and capacity increment.
            </summary>
        </member>
        <member name="M:java.util.Vector.add(System.Int32,System.Object)">
            <summary>
            Inserts the specified element at the specified position in this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.add(System.Object)">
            <summary>
            Appends the specified element to the end of this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.addAll(java.util.Collection)">
            <summary>
            Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator.
            </summary>
        </member>
        <member name="M:java.util.Vector.addAll(System.Int32,java.util.Collection)">
            <summary>
            Inserts all of the elements in in the specified Collection into this Vector at the specified position.
            </summary>
        </member>
        <member name="M:java.util.Vector.addElement(System.Object)">
            <summary>
            Adds the specified component to the end of this vector, increasing its size by one.
            </summary>
        </member>
        <member name="M:java.util.Vector.capacity">
            <summary>
            Returns the current capacity of this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.clear">
            <summary>
            Removes all of the elements from this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.clone">
            <summary>
            Returns a clone of this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.contains(System.Object)">
            <summary>
            Tests if the specified object is a component in this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.containsAll(java.util.Collection)">
            <summary>
            Returns true if this Vector contains all of the elements in the specified Collection.
            </summary>
        </member>
        <member name="M:java.util.Vector.copyInto(System.Object[])">
            <summary>
            Copies the components of this vector into the specified array.
            </summary>
        </member>
        <member name="M:java.util.Vector.elementAt(System.Int32)">
            <summary>
            Returns the component at the specified index.
            </summary>
        </member>
        <member name="M:java.util.Vector.elements">
            <summary>
            Returns an enumeration of the components of this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.ensureCapacity(System.Int32)">
            <summary>
            Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.
            </summary>
        </member>
        <member name="M:java.util.Vector.equals(System.Object)">
            <summary>
            Compares the specified Object with this Vector for equality.
            </summary>
        </member>
        <member name="M:java.util.Vector.firstElement">
            <summary>
            Returns the first component (the item at index
            </summary>
        </member>
        <member name="M:java.util.Vector.get(System.Int32)">
            <summary>
            Returns the element at the specified position in this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.hashCode">
            <summary>
            Returns the hash code value for this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.indexOf(System.Object)">
            <summary>
            Searches for the first occurence of the given argument, testing for equality using the
            </summary>
        </member>
        <member name="M:java.util.Vector.indexOf(System.Object,System.Int32)">
            <summary>
            Searches for the first occurence of the given argument, beginning the search at
            </summary>
        </member>
        <member name="M:java.util.Vector.insertElementAt(System.Object,System.Int32)">
            <summary>
            Inserts the specified object as a component in this vector at the specified
            </summary>
        </member>
        <member name="M:java.util.Vector.isEmpty">
            <summary>
            Tests if this vector has no components.
            </summary>
        </member>
        <member name="M:java.util.Vector.lastElement">
            <summary>
            Returns the last component of the vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.lastIndexOf(System.Object)">
            <summary>
            Returns the index of the last occurrence of the specified object in this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.lastIndexOf(System.Object,System.Int32)">
            <summary>
            Searches backwards for the specified object, starting from the specified index, and returns an index to it.
            </summary>
        </member>
        <member name="M:java.util.Vector.remove(System.Int32)">
            <summary>
            Removes the element at the specified position in this Vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.remove(System.Object)">
            <summary>
            Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged.
            </summary>
        </member>
        <member name="M:java.util.Vector.removeAll(java.util.Collection)">
            <summary>
            Removes from this Vector all of its elements that are contained in the specified Collection.
            </summary>
        </member>
        <member name="M:java.util.Vector.removeAllElements">
            <summary>
            Removes all components from this vector and sets its size to zero.
            </summary>
        </member>
        <member name="M:java.util.Vector.removeElement(System.Object)">
            <summary>
            Removes the first (lowest-indexed) occurrence of the argument from this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.removeElementAt(System.Int32)">
            <summary>
            Deletes the component at the specified index.
            </summary>
        </member>
        <member name="M:java.util.Vector.removeRange(System.Int32,System.Int32)">
            <summary>
            Removes from this List all of the elements whose index is between fromIndex, inclusive and toIndex, exclusive.
            </summary>
        </member>
        <member name="M:java.util.Vector.retainAll(java.util.Collection)">
            <summary>
            Retains only the elements in this Vector that are contained in the specified Collection.
            </summary>
        </member>
        <member name="M:java.util.Vector.set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this Vector with the specified element.
            </summary>
        </member>
        <member name="M:java.util.Vector.setElementAt(System.Object,System.Int32)">
            <summary>
            Sets the component at the specified
            </summary>
        </member>
        <member name="M:java.util.Vector.setSize(System.Int32)">
            <summary>
            Sets the size of this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.size">
            <summary>
            Returns the number of components in this vector.
            </summary>
        </member>
        <member name="M:java.util.Vector.subList(System.Int32,System.Int32)">
            <summary>
            Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.
            </summary>
        </member>
        <member name="M:java.util.Vector.toArray">
            <summary>
            Returns an array containing all of the elements in this Vector in the correct order.
            </summary>
        </member>
        <member name="M:java.util.Vector.toArray(System.Object[])">
            <summary>
            Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array.
            </summary>
        </member>
        <member name="M:java.util.Vector.toString">
            <summary>
            Returns a string representation of this Vector, containing the String representation of each element.
            </summary>
        </member>
        <member name="M:java.util.Vector.trimToSize">
            <summary>
            Trims the capacity of this vector to be the vector's current size.
            </summary>
        </member>
        <member name="M:java.util.Stack.#ctor">
            <summary>
            Creates an empty Stack.
            </summary>
        </member>
        <member name="M:java.util.Stack.empty">
            <summary>
            Tests if this stack is empty.
            </summary>
        </member>
        <member name="M:java.util.Stack.peek">
            <summary>
            Looks at the object at the top of this stack without removing it from the stack.
            </summary>
        </member>
        <member name="M:java.util.Stack.pop">
            <summary>
            Removes the object at the top of this stack and returns that object as the value of this function.
            </summary>
        </member>
        <member name="M:java.util.Stack.push(System.Object)">
            <summary>
            Pushes an item onto the top of this stack.
            </summary>
        </member>
        <member name="M:java.util.Stack.search(System.Object)">
            <summary>
            Returns the 1-based position where an object is on this stack.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.clone">
            <summary>
            Creates a copy of this <code>TimeZone</code>.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getAvailableIDs">
            <summary>
            Gets all the available IDs supported.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getAvailableIDs(System.Int32)">
            <summary>
            Gets the available IDs according to the given time zone offset.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDefault">
            <summary>
            Gets the default <code>TimeZone</code> for this host.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDisplayName">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the default locale.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDisplayName(System.Boolean,System.Int32)">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the default locale.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDisplayName(System.Boolean,System.Int32,java.util.Locale)">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the specified locale.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDisplayName(java.util.Locale)">
            <summary>
            Returns a name of this time zone suitable for presentation to the user in the specified locale.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getDSTSavings">
            <summary>
            Returns the amount of time to be added to local standard time to get local wall clock time.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getID">
            <summary>
            Gets the ID of this time zone.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the time zone offset, for current date, modified in case of daylight savings.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getOffset(System.Int64)">
            <summary>
            Returns the offset of this time zone from UTC at the specified date.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getRawOffset">
            <summary>
            Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.getTimeZone(System.String)">
            <summary>
            Gets the <code>TimeZone</code> for the given ID.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.hasSameRules(java.util.TimeZone)">
            <summary>
            Returns true if this zone has the same rule and offset as another zone.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.inDaylightTime(java.util.Date)">
            <summary>
            Queries if the given date is in daylight savings time in this time zone.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.setDefault(java.util.TimeZone)">
            <summary>
            Sets the <code>TimeZone</code> that is returned by the <code>getDefault</code> method.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.setID(System.String)">
            <summary>
            Sets the time zone ID.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.setRawOffset(System.Int32)">
            <summary>
            Sets the base time zone offset to GMT.
            </summary>
        </member>
        <member name="M:java.util.TimeZone.useDaylightTime">
            <summary>
            Queries if this time zone uses daylight savings time.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.add(System.Int32,System.Int32)">
            <summary>
            Adds the specified (signed) amount of time to the given time field, based on the calendar's rules.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.computeFields">
            <summary>
            Converts UTC as milliseconds to time field values.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.computeTime">
            <summary>
            Overrides Calendar Converts time field values to UTC as milliseconds.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.getGreatestMinimum(System.Int32)">
            <summary>
            Returns highest minimum value for the given field if varies.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.getGregorianChange">
            <summary>
            Gets the Gregorian Calendar change date.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.getLeastMaximum(System.Int32)">
            <summary>
            Returns lowest maximum value for the given field if varies.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.getMaximum(System.Int32)">
            <summary>
            Returns maximum value for the given field.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.getMinimum(System.Int32)">
            <summary>
            Returns minimum value for the given field.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.isLeapYear(System.Int32)">
            <summary>
            Determines if the given year is a leap year.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.roll(System.Int32,System.Boolean)">
            <summary>
            Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.
            </summary>
        </member>
        <member name="M:java.util.GregorianCalendar.setGregorianChange(java.util.Date)">
            <summary>
            Sets the GregorianCalendar change date.
            </summary>
        </member>
        <member name="M:java.util.Date.#ctor">
            <summary>
            Allocates a Date object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond.
            </summary>
        </member>
        <member name="M:java.util.Date.after(java.util.Date)">
            <summary>
            Tests if this date is after the specified date.
            </summary>
        </member>
        <member name="M:java.util.Date.before(java.util.Date)">
            <summary>
            Tests if this date is before the specified date.
            </summary>
        </member>
        <member name="M:java.util.Date.clone">
            <summary>
            Return a copy of this object.
            </summary>
        </member>
        <member name="M:java.util.Date.compareTo(java.util.Date)">
            <summary>
            Compares two Dates for ordering.
            </summary>
        </member>
        <member name="M:java.util.Date.compareTo(System.Object)">
            <summary>
            Compares this Date to another Object.
            </summary>
        </member>
        <member name="M:java.util.Date.getDate">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.DAY_OF_MONTH)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getDay">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.DAY_OF_WEEK)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getHours">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.HOUR_OF_DAY)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getMinutes">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.MINUTE)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getMonth">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.MONTH)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getSeconds">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.SECOND)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getTime">
            <summary>
            Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this <tt>Date</tt> object.
            </summary>
        </member>
        <member name="M:java.util.Date.getTimezoneOffset">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>-(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.getYear">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.get(Calendar.YEAR) - 1900</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.parse(System.String)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>DateFormat.parse(String s)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setDate(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.DAY_OF_MONTH, int date)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setHours(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.HOUR_OF_DAY, int hours)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setMinutes(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.MINUTE, int minutes)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setMonth(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.MONTH, int month)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setSeconds(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.SECOND, int seconds)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.setTime(System.Int64)">
            <summary>
            Sets this <tt>Date</tt> object to represent a point in time that is  <tt>time</tt> milliseconds after January 1, 1970 00:00:00 GMT.
            </summary>
        </member>
        <member name="M:java.util.Date.setYear(System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(Calendar.YEAR, year + 1900)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.toGMTString">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>DateFormat.format(Date date)</code>, using a GMT <code>TimeZone</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.toLocaleString">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>DateFormat.format(Date date)</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Date.UTC(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <B>Deprecated.</B> <I>As of JDK version 1.1, replaced by <code>Calendar.set(year + 1900, month, date, hrs, min, sec)</code> or <code>GregorianCalendar(year + 1900, month, date, hrs, min, sec)</code>, using a UTC <code>TimeZone</code>, followed by <code>Calendar.getTime().getTime()</code>.</I>
            </summary>
        </member>
        <member name="M:java.util.Enumeration.hasMoreElements">
            <summary>
            Tests if this enumeration contains more elements.
            </summary>
        </member>
        <member name="M:java.util.Enumeration.nextElement">
            <summary>
            Returns the next element of this enumeration if this enumeration
            object has at least one more element to provide.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.addHandler(java.util.logging.Handler)">
            <summary>
            Add a log Handler to receive logging messages.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.config(System.String)">
            <summary>
            Log a CONFIG message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.entering(System.String,System.String)">
            <summary>
            Log a method entry.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.entering(System.String,System.String,System.Object)">
            <summary>
            Log a method entry, with one parameter.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.entering(System.String,System.String,System.Object[])">
            <summary>
            Log a method entry, with an array of parameters.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.exiting(System.String,System.String)">
            <summary>
            Log a method return.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.exiting(System.String,System.String,System.Object)">
            <summary>
            Log a method return, with result object.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.fine(System.String)">
            <summary>
            Log a FINE message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.finer(System.String)">
            <summary>
            Log a FINER message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.finest(System.String)">
            <summary>
            Log a FINEST message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getAnonymousLogger">
            <summary>
            Create an anonymous Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getAnonymousLogger(System.String)">
            <summary>
            Create an anonymous Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getFilter">
            <summary>
            Get the current filter for this Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getHandlers">
            <summary>
            Get the Handlers associated with this logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getLevel">
            <summary>
            Get the log Level that has been specified for this Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getLogger(System.String)">
            <summary>
            Find or create a logger for a named subsystem.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getLogger(System.String,System.String)">
            <summary>
            Find or create a logger for a named subsystem.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getName">
            <summary>
            Get the name for this logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getParent">
            <summary>
            Return the parent for this Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getResourceBundle">
            <summary>
            Retrieve the localization resource bundle for this logger for the current default locale.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getResourceBundleName">
            <summary>
            Retrieve the localization resource bundle name for this logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.getUseParentHandlers">
            <summary>
            Discover whether or not this logger is sending its output to its parent logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.info(System.String)">
            <summary>
            Log an INFO message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.isLoggable(java.util.logging.Level)">
            <summary>
            Check if a message of the given level would actually be logged by this logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.log(java.util.logging.Level,System.String)">
            <summary>
            Log a message, with no arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.log(java.util.logging.Level,System.String,System.Object)">
            <summary>
            Log a message, with one object parameter.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.log(java.util.logging.Level,System.String,System.Object[])">
            <summary>
            Log a message, with an array of object arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.log(java.util.logging.Level,System.String,java.lang.Throwable)">
            <summary>
            Log a message, with associated Throwable information.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.log(java.util.logging.LogRecord)">
            <summary>
            Log a LogRecord.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logp(java.util.logging.Level,System.String,System.String,System.String)">
            <summary>
            Log a message, specifying source class and method, with no arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logp(java.util.logging.Level,System.String,System.String,System.String,System.Object)">
            <summary>
            Log a message, specifying source class and method, with a single object parameter to the log message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logp(java.util.logging.Level,System.String,System.String,System.String,System.Object[])">
            <summary>
            Log a message, specifying source class and method, with an array of object arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logp(java.util.logging.Level,System.String,System.String,System.String,java.lang.Throwable)">
            <summary>
            Log a message, specifying source class and method, with associated Throwable information.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logrb(java.util.logging.Level,System.String,System.String,System.String,System.String)">
            <summary>
            Log a message, specifying source class, method, and resource bundle name with no arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logrb(java.util.logging.Level,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Log a message, specifying source class, method, and resource bundle name, with a single object parameter to the log message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logrb(java.util.logging.Level,System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Log a message, specifying source class, method, and resource bundle name, with an array of object arguments.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.logrb(java.util.logging.Level,System.String,System.String,System.String,System.String,java.lang.Throwable)">
            <summary>
            Log a message, specifying source class, method, and resource bundle name, with associated Throwable information.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.removeHandler(java.util.logging.Handler)">
            <summary>
            Remove a log Handler.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.setFilter(java.util.logging.Filter)">
            <summary>
            Set a filter to control output on this Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.setLevel(java.util.logging.Level)">
            <summary>
            Set the log level specifying which message levels will be logged by this logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.setParent(java.util.logging.Logger)">
            <summary>
            Set the parent for this Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.setUseParentHandlers(System.Boolean)">
            <summary>
            Specify whether or not this logger should send its output to it's parent Logger.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.severe(System.String)">
            <summary>
            Log a SEVERE message.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.throwing(System.String,System.String,java.lang.Throwable)">
            <summary>
            Log throwing an exception.
            </summary>
        </member>
        <member name="M:java.util.logging.Logger.warning(System.String)">
            <summary>
            Log a WARNING message.
            </summary>
        </member>
        <member name="M:java.util.HashMap.#ctor">
            <summary>
            Constructs an empty <tt>HashMap</tt> with the default initial capacity
            (16) and the default load factor (0.75).
            </summary>
        </member>
        <member name="M:java.util.HashMap.#ctor(System.Int32)">
            <summary>
            Constructs an empty <tt>HashMap</tt> with the specified initial
            capacity and the default load factor (0.75).
            </summary>
        </member>
        <member name="M:java.util.HashMap.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs an empty <tt>HashMap</tt> with the specified initial
            capacity and load factor.
            </summary>
        </member>
        <member name="M:java.util.HashMap.#ctor(java.util.Map)">
            <summary>
            Constructs a new <tt>HashMap</tt> with the same mappings as the
            specified <tt>Map</tt>.
            </summary>
        </member>
        <member name="M:java.util.HashMap.clear">
            <summary>
            Removes all mappings from this map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.clone">
            <summary>
            Returns a shallow copy of this <tt>HashMap</tt> instance: the keys and
            values themselves are not cloned.
            </summary>
        </member>
        <member name="M:java.util.HashMap.containsKey(System.Object)">
            <summary>
            Returns <tt>true</tt> if this map contains a mapping for the
            specified key.
            </summary>
        </member>
        <member name="M:java.util.HashMap.containsValue(System.Object)">
            <summary>
            Returns <tt>true</tt> if this map maps one or more keys to the
            specified value.
            </summary>
        </member>
        <member name="M:java.util.HashMap.entrySet">
            <summary>
            Returns a collection view of the mappings contained in this map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.get(System.Object)">
            <summary>
            Returns the value to which the specified key is mapped in this identity
            hash map, or <tt>null</tt> if the map contains no mapping for this key.
            </summary>
        </member>
        <member name="M:java.util.HashMap.isEmpty">
            <summary>
            Returns <tt>true</tt> if this map contains no key-value mappings.
            </summary>
        </member>
        <member name="M:java.util.HashMap.keySet">
            <summary>
            Returns a set view of the keys contained in this map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.put(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.putAll(java.util.Map)">
            <summary>
            Copies all of the mappings from the specified map to this map
            These mappings will replace any mappings that
            this map had for any of the keys currently in the specified map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.remove(System.Object)">
            <summary>
            Removes the mapping for this key from this map if present.
            </summary>
        </member>
        <member name="M:java.util.HashMap.size">
            <summary>
            Returns the number of key-value mappings in this map.
            </summary>
        </member>
        <member name="M:java.util.HashMap.values">
            <summary>
            Returns a collection view of the values contained in this map.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.appendChild(org.w3c.dom.Node)">
            <summary>
            Adds the node <code>newChild</code> to the end of the list of children
            of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.cloneNode(System.Boolean)">
            <summary>
            Returns a duplicate of this node, i.e., serves as a generic copy
            constructor for nodes.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getAttributes">
            <summary>
            A <code>NamedNodeMap</code> containing the attributes of this node (if
            it is an <code>Element</code>) or <code>null</code> otherwise.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getChildNodes">
            <summary>
            A <code>NodeList</code> that contains all children of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getFirstChild">
            <summary>
            The first child of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getLastChild">
            <summary>
            The last child of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getLocalName">
            <summary>
            Returns the local part of the qualified name of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getNamespaceURI">
            <summary>
            The namespace URI of this node, or <code>null</code> if it is
            unspecified.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getNextSibling">
            <summary>
            The node immediately following this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getNodeName">
            <summary>
            The name of this node, depending on its type; see the table above.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getNodeType">
            <summary>
            A code representing the type of the underlying object, as defined above.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getNodeValue">
            <summary>
            The value of this node, depending on its type; see the table above.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getOwnerDocument">
            <summary>
            The <code>Document</code> object associated with this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getParentNode">
            <summary>
            The parent of this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getPrefix">
            <summary>
            The namespace prefix of this node, or <code>null</code> if it is
            unspecified.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.getPreviousSibling">
            <summary>
            The node immediately preceding this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.hasAttributes">
            <summary>
            Returns whether this node (if it is an element) has any attributes.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.hasChildNodes">
            <summary>
            Returns whether this node has any children.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)">
            <summary>
            Inserts the node <code>newChild</code> before the existing child node
            <code>refChild</code>.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.isSupported(System.String,System.String)">
            <summary>
            Tests whether the DOM implementation implements a specific feature and
            that feature is supported by this node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.normalize">
            <summary>
            Puts all <code>Text</code> nodes in the full depth of the sub-tree
            underneath this <code>Node</code>, including attribute nodes, into a
            "normal" form where only structure (e.g., elements, comments,
            processing instructions, CDATA sections, and entity references)
            separates <code>Text</code> nodes, i.e., there are neither adjacent
            <code>Text</code> nodes nor empty <code>Text</code> nodes.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.removeChild(org.w3c.dom.Node)">
            <summary>
            Removes the child node indicated by <code>oldChild</code> from the list
            of children, and returns it.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)">
            <summary>
            Replaces the child node <code>oldChild</code> with <code>newChild</code>
            in the list of children, and returns the <code>oldChild</code> node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.setNodeValue(System.String)">
            <summary>
            The value of this node, depending on its type; see the table above.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Node.setPrefix(System.String)">
            <summary>
            The namespace prefix of this node, or <code>null</code> if it is
            unspecified.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Attr.getName">
            <summary>
            Returns the name of this attribute.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Attr.getOwnerElement">
            <summary>
            The <code>Element</code> node this attribute is attached to or
            <code>null</code> if this attribute is not in use.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Attr.getSpecified">
            <summary>
            If this attribute was explicitly given a value in the original
            document, this is <code>true</code>; otherwise, it is
            <code>false</code>.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Attr.getValue">
            <summary>
            On retrieval, the value of the attribute is returned as a string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Attr.setValue(System.String)">
            <summary>
            On retrieval, the value of the attribute is returned as a string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.appendData(System.String)">
            <summary>
            Append the string to the end of the character data of the node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.deleteData(System.Int32,System.Int32)">
            <summary>
            Remove a range of 16-bit units from the node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.getData">
            <summary>
            The character data of the node that implements this interface.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.getLength">
            <summary>
            The number of 16-bit units that are available through <code>data</code>
            and the <code>substringData</code> method below.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.insertData(System.Int32,System.String)">
            <summary>
            Insert a string at the specified 16-bit unit offset.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.replaceData(System.Int32,System.Int32,System.String)">
            <summary>
            Replace the characters starting at the specified 16-bit unit offset
            with the specified string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.setData(System.String)">
            <summary>
            The character data of the node that implements this interface.
            </summary>
        </member>
        <member name="M:org.w3c.dom.CharacterData.substringData(System.Int32,System.Int32)">
            <summary>
            Extracts a range of data from the node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Text.splitText(System.Int32)">
            <summary>
            Breaks this node into two nodes at the specified <code>offset</code>,
            keeping both in the tree as siblings.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getAttribute(System.String)">
            <summary>
            Retrieves an attribute value by name.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getAttributeNode(System.String)">
            <summary>
            Retrieves an attribute node by name.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getAttributeNodeNS(System.String,System.String)">
            <summary>
            Retrieves an <code>Attr</code> node by local name and namespace URI.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getAttributeNS(System.String,System.String)">
            <summary>
            Retrieves an attribute value by local name and namespace URI.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getElementsByTagName(System.String)">
            <summary>
            Returns a <code>NodeList</code> of all descendant <code>Elements</code>
            with a given tag name, in the order in which they are encountered in
            a preorder traversal of this <code>Element</code> tree.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the descendant
            <code>Elements</code> with a given local name and namespace URI in
            the order in which they are encountered in a preorder traversal of
            this <code>Element</code> tree.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.getTagName">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.hasAttribute(System.String)">
            <summary>
            Returns <code>true</code> when an attribute with a given name is
            specified on this element or has a default value, <code>false</code>
            otherwise.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.hasAttributeNS(System.String,System.String)">
            <summary>
            Returns <code>true</code> when an attribute with a given local name and
            namespace URI is specified on this element or has a default value,
            <code>false</code> otherwise.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.removeAttribute(System.String)">
            <summary>
            Removes an attribute by name.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.removeAttributeNode(org.w3c.dom.Attr)">
            <summary>
            Removes the specified attribute node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.removeAttributeNS(System.String,System.String)">
            <summary>
            Removes an attribute by local name and namespace URI.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.setAttribute(System.String,System.String)">
            <summary>
            Adds a new attribute.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.setAttributeNode(org.w3c.dom.Attr)">
            <summary>
            Adds a new attribute node.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.setAttributeNodeNS(org.w3c.dom.Attr)">
            <summary>
            Adds a new attribute.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Element.setAttributeNS(System.String,System.String,System.String)">
            <summary>
            Adds a new attribute.
            </summary>
        </member>
        <member name="M:org.w3c.dom.NamedNodeMap.getNamedItem(System.String)">
            <summary>
            Retrieves a node specified by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:org.w3c.dom.Document.createAttribute(System.String)">
            <summary>
            Creates an <code>Attr</code> of the given name.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createAttributeNS(System.String,System.String)">
            <summary>
            Creates an attribute of the given qualified name and namespace URI.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createCDATASection(System.String)">
            <summary>
            Creates a <code>CDATASection</code> node whose value is the specified
            string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createComment(System.String)">
            <summary>
            Creates a <code>Comment</code> node given the specified string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createDocumentFragment">
            <summary>
            Creates an empty <code>DocumentFragment</code> object.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createElement(System.String)">
            <summary>
            Creates an element of the type specified.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createElementNS(System.String,System.String)">
            <summary>
            Creates an element of the given qualified name and namespace URI.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createEntityReference(System.String)">
            <summary>
            Creates an <code>EntityReference</code> object.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createProcessingInstruction(System.String,System.String)">
            <summary>
            Creates a <code>ProcessingInstruction</code> node given the specified
            name and data strings.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.createTextNode(System.String)">
            <summary>
            Creates a <code>Text</code> node given the specified string.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getDoctype">
            <summary>
            The Document Type Declaration (see <code>DocumentType</code>)
            associated with this document.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getDocumentElement">
            <summary>
            This is a convenience attribute that allows direct access to the child
            node that is the root element of the document.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getElementById(System.String)">
            <summary>
            Returns the <code>Element</code> whose <code>ID</code> is given by
            <code>elementId</code>.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getElementsByTagName(System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the <code>Elements</code> with a
            given tag name in the order in which they are encountered in a
            preorder traversal of the <code>Document</code> tree.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns a <code>NodeList</code> of all the <code>Elements</code> with a
            given local name and namespace URI in the order in which they are
            encountered in a preorder traversal of the <code>Document</code> tree.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.getImplementation">
            <summary>
            The <code>DOMImplementation</code> object that handles this document.
            </summary>
        </member>
        <member name="M:org.w3c.dom.Document.importNode(org.w3c.dom.Node,System.Boolean)">
            <summary>
            Imports a node from another document to this document.
            </summary>
        </member>
        <member name="M:org.w3c.dom.NodeList.getLength">
            <summary>
            The number of nodes in the list.
            </summary>
        </member>
        <member name="M:org.w3c.dom.NodeList.item(System.Int32)">
            <summary>
            Returns the <code>index</code>th item in the collection.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.characters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive notification of character data.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.endDocument">
            <summary>
            Receive notification of the end of a document.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.endElement(System.String,System.String,System.String)">
            <summary>
            Receive notification of the end of an element.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.endPrefixMapping(System.String)">
            <summary>
            End the scope of a prefix-URI mapping.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive notification of ignorable whitespace in element content.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.processingInstruction(System.String,System.String)">
            <summary>
            Receive notification of a processing instruction.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.setDocumentLocator(org.xml.sax.Locator)">
            <summary>
            Receive an object for locating the origin of SAX document events.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.skippedEntity(System.String)">
            <summary>
            Receive notification of a skipped entity.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.startDocument">
            <summary>
            Receive notification of the beginning of a document.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
            <summary>
            Receive notification of the beginning of an element.
            </summary>
        </member>
        <member name="M:org.xml.sax.ContentHandler.startPrefixMapping(System.String,System.String)">
            <summary>
            Begin the scope of a prefix-URI Namespace mapping.
            </summary>
        </member>
        <member name="T:org.xml.sax.Attributes">
            <summary>
            Interface for a list of XML attributes. 
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getIndex(System.String)">
            <summary>
            Look up the index of an attribute by XML 1.0 qualified name.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getIndex(System.String,System.String)">
            <summary>
            Look up the index of an attribute by Namespace name.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getLength">
            <summary>
            Return the number of attributes in the list.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getLocalName(System.Int32)">
            <summary>
            Look up an attribute's local name by index.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getQName(System.Int32)">
            <summary>
            Look up an attribute's XML 1.0 qualified name by index.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getType(System.Int32)">
            <summary>
            Look up an attribute's type by index.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getType(System.String)">
            <summary>
            Look up an attribute's type by XML 1.0 qualified name.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getType(System.String,System.String)">
            <summary>
            Look up an attribute's type by Namespace name.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getURI(System.Int32)">
            <summary>
            Look up an attribute's Namespace URI by index.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getValue(System.Int32)">
            <summary>
            Look up an attribute's value by index.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getValue(System.String)">
            <summary>
            Look up an attribute's value by XML 1.0 qualified name.
            </summary>
        </member>
        <member name="M:org.xml.sax.Attributes.getValue(System.String,System.String)">
            <summary>
            Look up an attribute's value by Namespace name.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.getByteStream">
            <summary>
            Get the sbyte stream for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.getCharacterStream">
            <summary>
            Get the character stream for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.getEncoding">
            <summary>
            Get the character encoding for a sbyte stream or URI.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.getPublicId">
            <summary>
            Get the public identifier for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.getSystemId">
            <summary>
            Get the system identifier for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.setByteStream(java.io.InputStream)">
            <summary>
            Set the sbyte stream for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.setCharacterStream(java.io.Reader)">
            <summary>
            Set the character stream for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.setEncoding(System.String)">
            <summary>
            Set the character encoding, if known.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.setPublicId(System.String)">
            <summary>
            Set the public identifier for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.InputSource.setSystemId(System.String)">
            <summary>
            Set the system identifier for this input source.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.XMLReaderFactory.createXMLReader">
            <summary>
            Attempt to create an XMLReader from system defaults.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.XMLReaderFactory.createXMLReader(System.String)">
            <summary>
            Attempt to create an XML reader from a class name.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getContentHandler">
            <summary>
            Return the current content handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getDTDHandler">
            <summary>
            Return the current DTD handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getEntityResolver">
            <summary>
            Return the current entity resolver.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getErrorHandler">
            <summary>
            Return the current error handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getFeature(System.String)">
            <summary>
            Look up the value of a feature flag.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.getProperty(System.String)">
            <summary>
            Look up the value of a property.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.parse(org.xml.sax.InputSource)">
            <summary>
            Parse an XML document.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.parse(System.String)">
            <summary>
            Parse an XML document from a system identifier (URI).
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setContentHandler(org.xml.sax.ContentHandler)">
            <summary>
            Allow an application to register a content event handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setDTDHandler(org.xml.sax.DTDHandler)">
            <summary>
            Allow an application to register a DTD event handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setEntityResolver(org.xml.sax.EntityResolver)">
            <summary>
            Allow an application to register an entity resolver.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setErrorHandler(org.xml.sax.ErrorHandler)">
            <summary>
            Allow an application to register an error event handler.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setFeature(System.String,System.Boolean)">
            <summary>
            Set the value of a feature flag.
            </summary>
        </member>
        <member name="M:org.xml.sax.XMLReader.setProperty(System.String,System.Object)">
            <summary>
            Set the value of a property.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.characters(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive notification of character data inside an element.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endDocument">
            <summary>
            Receive notification of the end of the document.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endElement(System.String,System.String,System.String)">
            <summary>
            Receive notification of the end of an element.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.endPrefixMapping(System.String)">
            <summary>
            Receive notification of the end of a Namespace mapping.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.error(org.xml.sax.helpers.SAXParseException)">
            <summary>
            Receive notification of a recoverable parser error.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.fatalError(org.xml.sax.helpers.SAXParseException)">
            <summary>
            Report a fatal XML parsing error.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(System.Char[],System.Int32,System.Int32)">
            <summary>
            Receive notification of ignorable whitespace in element content.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.notationDecl(System.String,System.String,System.String)">
            <summary>
            Receive notification of a notation declaration.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.processingInstruction(System.String,System.String)">
            <summary>
            Receive notification of a processing instruction.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.resolveEntity(System.String,System.String)">
            <summary>
            Resolve an external entity.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.setDocumentLocator(org.xml.sax.Locator)">
            <summary>
            Receive a Locator object for document events.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.skippedEntity(System.String)">
            <summary>
            Receive notification of a skipped entity.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startDocument">
            <summary>
            Receive notification of the beginning of the document.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startElement(System.String,System.String,System.String,org.xml.sax.Attributes)">
            <summary>
            Receive notification of the start of an element.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.startPrefixMapping(System.String,System.String)">
            <summary>
            Receive notification of the start of a Namespace mapping.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(System.String,System.String,System.String,System.String)">
            <summary>
            Receive notification of an unparsed entity declaration.
            </summary>
        </member>
        <member name="M:org.xml.sax.helpers.DefaultHandler.warning(org.xml.sax.helpers.SAXParseException)">
            <summary>
            Receive notification of a parser warning.
            </summary>
        </member>
        <member name="M:javax.common.runtime.Console.WriteBytes(System.SByte[],System.String,System.Boolean)">
            <summary>
            writes bytes to file
            </summary>
            <param name="cdata"></param>
            <param name="p"></param>
        </member>
        <member name="M:javax.common.runtime.Convert.ToHexString(System.Int32)">
            <summary>
            converts int to a hexstring, and adds padding zeros if uneven number
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:javax.common.runtime.Convert.ToInt32(System.SByte[],System.Int32)">
            <summary>
            converts 1 to 4 bytes from an array to an int32
            </summary>
            <param name="b"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:javax.common.runtime.Convert.ToInt32Array(java.util.ArrayList)">
            <summary>
            converts object list to int array
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
    </members>
</doc>

// replace any with dynamic?

[Constructor(double x, double ratio, double a, double fov)]
interface THREE.PerspectiveCamera 
{ 
	attribute double aspect; 
	void updateProjectionMatrix();

};

[Constructor()]
interface THREE.Scene 
{ 
	attribute THREE.Fog         fog;

	void add(any value);
};

[Constructor(long color, long y, long z)]
interface THREE.Fog 
{ 
	attribute long        color;
	
};

[Constructor(long x)]
interface THREE.AmbientLight 
{ 
};

[Constructor(long x)]
interface THREE.SpotLight 
{ 
	attribute THREE.Vector3  position;
	attribute THREE.Object3D target;

	attribute boolean        castShadow;
	attribute long        shadowCameraNear;
	attribute long        shadowCameraFar;
	attribute long        shadowCameraFov;
	attribute double        shadowMapBias;
	attribute double        shadowMapDarkness;
	attribute long        shadowMapWidth;
	attribute long        shadowMapHeight;
};

[Constructor(long x, long y, long z, long q)]
interface THREE.PlaneGeometry 
{ 
	void applyMatrix(any value);
};

[Constructor()]
interface THREE.Matrix4 
{ 
	any makeRotationX(double value);
};

[Constructor(any x)]
interface THREE.MeshLambertMaterial 
{ 
};

[Constructor()]
interface THREE.Object3D
{ 
	attribute THREE.Vector3  position;
};


[Constructor(any geometry, any material)]
interface THREE.Mesh 
{ 
	attribute THREE.Vector3  position;
	attribute any quaternion;

	attribute boolean        castShadow;
	attribute boolean        receiveShadow;
	attribute boolean        useQuaternion;


};

[Constructor()]
interface THREE.WebGLRenderer 
{ 
	attribute boolean        shadowMapEnabled;
	attribute boolean        shadowMapSoft;

	attribute Element domElement;

	void setClearColor(long color, long h);
	void setSize(long w, long h);
	void render(any scene, any camera);
};

[Constructor(double radius)]
interface THREE.SphereGeometry 
{ 

};

[Constructor()]
interface THREE.Vector3 
{ 
	attribute double x; 
	attribute double y;
	attribute double z;

	void set(double x, double y, double z);
};

[Constructor()]
interface THREE.Projector 
{ 
};


[Constructor(double x, double y, double z)]
interface THREE.CubeGeometry 
{ 
};

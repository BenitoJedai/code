// we will need TargetConstructor with a dot
// should enable nesting instead
// interface Cannon

[Constructor()]
interface Cannon.NaiveBroadphase 
{ 
};

[Constructor()]
interface Cannon.Plane 
{ 
};

[Constructor(DOMString e)]
interface Cannon.Material 
{ 
};

[Constructor(any m1, any m2, double friction, double restitution)]
interface Cannon.ContactMaterial 
{ 
};

[Constructor(double radius)]
interface Cannon.Sphere 
{ 
};

[Constructor(double mass, any sphereShape, any physicsMaterial),
 Constructor(double mass, any sphereShape)]
interface Cannon.RigidBody 
{ 
     attribute double        linearDamping;
     attribute double        angularDamping;

     attribute boolean        useQuaternion;
     attribute boolean        castShadow;
     attribute boolean        receiveShadow;

};

[Constructor()]
interface Cannon.World 
{ 
     attribute long        quatNormalizeSkip;
     attribute boolean        quatNormalizeFast;

     attribute /* NaiveBroadphase */ any        broadphase;

	 void addContactMaterial(any value);
	 void add(any value);

	 void addConstraint(any value);
};

[Constructor(double x, double y, double z)]
interface Cannon.Vec3 
{ 
	attribute double x; 
	attribute double y;
	attribute double z;
};

[Constructor(any x)]
interface Cannon.Box 
{ 
};

[Constructor(double x, double y, double z)]
interface Cannon.CubeGeometry 
{ 
};

[Constructor(any body1, any xyz1, any body2, any xyz2)]
interface Cannon.PointToPointConstraint 
{ 
};
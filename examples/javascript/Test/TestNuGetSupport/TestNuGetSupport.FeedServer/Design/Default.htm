<html>
	<head>
		<link rel='stylesheet' href='Default.css'/>
		<title>DefaultPage</title>
	</head>
	<body>
		<p>
            Welcome to JSC NuGet</p>

                <p>Future versions of JSC will auto reconfigure:</p>

        <p>
            For manual setup:</p>
        <!-- 
            
            based on http://blog.cincura.net/233131-using-per-solutionproject-nuget-package-sources-in-visual-studio/#comment-15886 
            
            jsc rewrite will cause:
            
            1) Cannot create an instance of type 
            'NuGet.Commands.HelpCommand' because a constructor could not be selected for construction. Ensure that the type either has a default constructor, or a single constructor marked with the 
            'System.ComponentModel.Composition.ImportingConstructorAttribute'.

            Whoa. JSC did not rewrite that attribute. why?

            -->

        <img src="enable_nuget_package_restore.png" />
        <p>
            open and modify your nuget.config</p>
        <textarea style="height: 383px; width: 636px"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<configuration>

    <packageSources>
  <add key="FooBar package source" value="http://127.0.0.1:9573/nuget" />
</packageSources>
<activePackageSource>
  <add key="FooBar package source" value="http://127.0.0.1:9573/nuget" />
</activePackageSource>

  <solution>
    <add key="disableSourceControlIntegration" value="true" />
    


  </solution>
</configuration>
            ]]>
            
            &nbsp;</textarea>

        <p>Then close visual studio, and reopen.</p>

        <img src="manage_nuget_packages.png" />

        <pre>
            User-Agent: NuGet/
        </pre>

        <p>Then insert your credentials, and install your package.</p>
        <p>Then use your new component.</p>
        <p>Then test it at runtime!</p>


        <h1>To create a new component:</h1>
        <p>Crate new Web Application</p>>
	</body>
</html>
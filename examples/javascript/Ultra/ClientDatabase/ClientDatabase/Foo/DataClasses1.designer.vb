'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30128.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ClientPrivate")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertClientFoo(instance As ClientFoo)
    End Sub
  Partial Private Sub UpdateClientFoo(instance As ClientFoo)
    End Sub
  Partial Private Sub DeleteClientFoo(instance As ClientFoo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ClientDatabase.My.MySettings.Default.ClientPrivateConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ClientFoos() As System.Data.Linq.Table(Of ClientFoo)
		Get
			Return Me.GetTable(Of ClientFoo)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ClientFoo")>  _
Partial Public Class ClientFoo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Key As Integer
	
	Private _Text As String
	
	Private _Foo As String
	
	Private _Bar As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnKeyChanging(value As Integer)
    End Sub
    Partial Private Sub OnKeyChanged()
    End Sub
    Partial Private Sub OnTextChanging(value As String)
    End Sub
    Partial Private Sub OnTextChanged()
    End Sub
    Partial Private Sub OnFooChanging(value As String)
    End Sub
    Partial Private Sub OnFooChanged()
    End Sub
    Partial Private Sub OnBarChanging(value As String)
    End Sub
    Partial Private Sub OnBarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Key]", Storage:="_Key", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Key() As Integer
		Get
			Return Me._Key
		End Get
		Set
			If ((Me._Key = value)  _
						= false) Then
				Me.OnKeyChanging(value)
				Me.SendPropertyChanging
				Me._Key = value
				Me.SendPropertyChanged("Key")
				Me.OnKeyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Text", DbType:="VarChar(1024)")>  _
	Public Property Text() As String
		Get
			Return Me._Text
		End Get
		Set
			If (String.Equals(Me._Text, value) = false) Then
				Me.OnTextChanging(value)
				Me.SendPropertyChanging
				Me._Text = value
				Me.SendPropertyChanged("Text")
				Me.OnTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Foo", DbType:="VarChar(1024)")>  _
	Public Property Foo() As String
		Get
			Return Me._Foo
		End Get
		Set
			If (String.Equals(Me._Foo, value) = false) Then
				Me.OnFooChanging(value)
				Me.SendPropertyChanging
				Me._Foo = value
				Me.SendPropertyChanged("Foo")
				Me.OnFooChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bar", DbType:="VarChar(1024)")>  _
	Public Property Bar() As String
		Get
			Return Me._Bar
		End Get
		Set
			If (String.Equals(Me._Bar, value) = false) Then
				Me.OnBarChanging(value)
				Me.SendPropertyChanging
				Me._Bar = value
				Me.SendPropertyChanged("Bar")
				Me.OnBarChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

using java.applet;
using java.awt.@event;
using System;

namespace jDOSBoxAppletExperiment
{
    public sealed class ApplicationApplet : jdos.gui.MainApplet
    {
        public const int DefaultWidth = 640;
        public const int DefaultHeight = 480;

        // http://www.winimage.com/download.htm
        // http://www.deathshadow.com/jDOSBoxHowTo
        // http://www.dedoimedo.com/games/reviving/dosbox_multiplayer.html


        public void __MainApplet_keyPressed(string keyCode, Action<string> yield)
        {
            //            KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar) 
            //source - the Component that originated the event
            //id - an integer identifying the type of event
            //when - a long integer that specifies the time the event occurred
            //modifiers - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
            //keyCode - the integer code for an actual key, or VK_UNDEFINED (for a key-typed event)
            //keyChar - the Unicode character generated by this event, or CHAR_UNDEFINED (for key-pressed and key-released events which do not map to a valid Unicode character)
            try
            {
                this.keyPressed(
                    new java.awt.@event.KeyEvent(
                        this,
                        KeyEvent.KEY_PRESSED,
                        0,
                        int.Parse(keyCode),
                        KeyEvent.CHAR_UNDEFINED
                    )
                );
            }
            catch (Exception ex)
            {
                yield(new { ex.Message }.ToString());
            }
        }

        public void __MainApplet_keyReleased(string keyCode, Action<string> yield)
        {
            try
            {
                this.keyReleased(
                    new java.awt.@event.KeyEvent(
                        this,
                        KeyEvent.KEY_RELEASED,
                        0,
                       int.Parse(keyCode),
                        KeyEvent.CHAR_UNDEFINED
                    )
                );
            }
            catch (Exception ex)
            {
                yield(new { ex.Message }.ToString());
            }

        }
    }
}

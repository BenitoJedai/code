using java.applet;
using java.awt.@event;
using jdos.gui;
using System;

namespace jDOSBoxAppletExperiment
{
    public class ApplicationAppletTrace : jdos.gui.MainApplet
    {
        // http://vogons.zetafleet.com/viewtopic.php?t=27467&postdays=0&postorder=asc&start=100&sid=4d173d2f75b81d4721448da0e89e3210

        public override void keyPressed(KeyEvent value)
        {
            var KeyChar = (int)value.getKeyChar();

            Console.WriteLine("keyPressed " + new { KeyCode = value.getKeyCode(), KeyChar });
            base.keyPressed(value);
        }

        public override void keyReleased(KeyEvent value)
        {
            var KeyChar = (int)value.getKeyChar();
            Console.WriteLine("keyReleased " + new { KeyCode = value.getKeyCode(), KeyChar });
            base.keyReleased(value);
        }



        public override void mouseMoved(MouseEvent e)
        {
            Console.WriteLine("mouseMoved " + new { x = e.getX(), y = e.getY() });
            base.mouseMoved(e);
        }
    }

    public sealed class ApplicationApplet : ApplicationAppletTrace
    {
        public const int DefaultWidth = 640;
        public const int DefaultHeight = 480;

        // http://www.winimage.com/download.htm
        // http://www.deathshadow.com/jDOSBoxHowTo
        // http://www.dedoimedo.com/games/reviving/dosbox_multiplayer.html


        int x;
        int y;

        public void __MainApplet_mousemove(string dx, string dy)
        {
            x += int.Parse(dx);
            y += int.Parse(dy);

            Console.WriteLine("__MainApplet_mousemove " + new { x, y });

            var e = new MouseEvent(
                this,
                MouseEvent.MOUSE_MOVED,
                0,
                0,
                x,
                y,
                0,
                false
            );

            mouseMoved(e);
        }

        public void __MainApplet_keyPressed(string _key, string _char, Action<string> yield)
        {
            //            KeyEvent(Component source, int id, long when, int modifiers, int keyCode, char keyChar) 
            //source - the Component that originated the event
            //id - an integer identifying the type of event
            //when - a long integer that specifies the time the event occurred
            //modifiers - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
            //keyCode - the integer code for an actual key, or VK_UNDEFINED (for a key-typed event)
            //keyChar - the Unicode character generated by this event, or CHAR_UNDEFINED (for key-pressed and key-released events which do not map to a valid Unicode character)
            try
            {
                var __keyCode = int.Parse(_key);
                var __keyChar = int.Parse(_char);

                //if (__keyChar == 0)
                //    __keyChar = KeyEvent.CHAR_UNDEFINED;


                Console.WriteLine("__MainApplet_keyPressed " + new { __keyCode, __keyChar });

                base.keyPressed(
                    new java.awt.@event.KeyEvent(
                        this,
                        KeyEvent.KEY_PRESSED,
                        0,
                        __keyCode,
                        __keyChar
                    )
                );
            }
            catch (Exception ex)
            {
                yield(new { ex.Message }.ToString());
            }
        }

        public void __MainApplet_keyReleased(string _key, string _char, Action<string> yield)
        {
            try
            {
                var __keyCode = int.Parse(_key);
                var __keyChar = int.Parse(_char);

                //if (__keyChar == 0)
                //    __keyChar = KeyEvent.CHAR_UNDEFINED;


                Console.WriteLine("__MainApplet_keyReleased " + new { __keyCode, __keyChar });

                base.keyReleased(
                    new java.awt.@event.KeyEvent(
                        this,
                        KeyEvent.KEY_RELEASED,
                        0,
                       __keyCode,
                       __keyChar
                    )
                );
            }
            catch (Exception ex)
            {
                yield(new { ex.Message }.ToString());
            }

        }
    }
}

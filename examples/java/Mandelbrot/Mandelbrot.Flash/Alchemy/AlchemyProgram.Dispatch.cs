// Generated by ScriptCoreLib.Alchemy.ExportGenerator
// Clear this file to force code generation.
namespace cmodule.Mandelbrot
{
	using ScriptCoreLib;
	using ScriptCoreLib.ActionScript.flash.utils;
	using ScriptCoreLib.ActionScript.flash.display;
	[global::System.Runtime.CompilerServices.CompilerGenerated]
	[Script(IsNative = true)]
	public class CLibInit
	{
		public void supplyFile(string path, ByteArray data)
		{
		}
		public void putEnv(string key, string value)
		{
		}
		public void setSprite(Sprite sprite)
		{
		}
		public object init()
		{
			return default(object);
		}
	}
}
namespace Mandelbrot.Flash.Alchemy
{
	using ScriptCoreLib;
	using ScriptCoreLib.Alchemy.Headers;
	partial class AlchemyProgram
	{
		[global::System.Runtime.CompilerServices.CompilerGenerated]
		static AS3_h._AS3_Val InitializeMandelbrotProvider(object self, AS3_h._AS3_Val args)
		{
			var __value = Mandelbrot.MandelbrotProvider.InitializeMandelbrotProvider();
			return AS3_h.AS3_Ptr(__value);
		}
		[global::System.Runtime.CompilerServices.CompilerGenerated]
		static AS3_h._AS3_Val DrawMandelbrotSet(object self, AS3_h._AS3_Val args)
		{
			int shift;
			AS3_h.AS3_ArrayValue(args, "IntType", __arglist(out shift));
			var __value = Mandelbrot.MandelbrotProvider.DrawMandelbrotSet(shift);
			shift = default(int);
			return AS3_h.AS3_Ptr(__value);
		}
		[global::System.Runtime.CompilerServices.CompilerGenerated]
		[Script(NoDecoration = true)]
		static int main()
		{
			var __InitializeMandelbrotProvider = AS3_h.AS3_Function(null, InitializeMandelbrotProvider);
			var __DrawMandelbrotSet = AS3_h.AS3_Function(null, DrawMandelbrotSet);
			var __result = AS3_h.AS3_Object("InitializeMandelbrotProvider: AS3ValType,DrawMandelbrotSet: AS3ValType", __arglist(__InitializeMandelbrotProvider,__DrawMandelbrotSet));
			AS3_h.AS3_Release(__InitializeMandelbrotProvider);
			AS3_h.AS3_Release(__DrawMandelbrotSet);
			AS3_h.AS3_LibInit(__result);
			return 0;
		}
	}
}
namespace Mandelbrot.Flash.ActionScript
{
	using System;
	using ScriptCoreLib;
	using ScriptCoreLib.ActionScript;
	using ScriptCoreLib.ActionScript.Extensions;
	using ScriptCoreLib.ActionScript.flash.utils;
	[global::System.Runtime.CompilerServices.CompilerGenerated]
	[Script]
	public static class MandelbrotProxy
	{
		public static ByteArray Memory;
		[Script(OptimizedCode = @"return (ns::gstate).ds")]
		public static ByteArray get_ds(Namespace ns)
		{
			return default(ByteArray);
		}
		public static readonly Func<int> InitializeMandelbrotProvider;
		public static readonly Func<int, uint> DrawMandelbrotSet;
		static MandelbrotProxy()
		{
			var __loader = new cmodule.Mandelbrot.CLibInit();
			var __lib = new DynamicDelegatesContainer { Subject = __loader.init() };
			MandelbrotProxy.Memory = get_ds(new Namespace("cmodule.Mandelbrot"));
			MandelbrotProxy.InitializeMandelbrotProvider = __lib.ToFunc<int>("InitializeMandelbrotProvider");
			MandelbrotProxy.DrawMandelbrotSet = __lib.ToFunc<int, uint>("DrawMandelbrotSet");
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConvertASToCS.Any.Test.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Google Maps API for Flash Documentation, Version 1.4\tAll Packages | All Classes |" +
            " Index | FramesNo Frames\tAdobe Logo\r\nClass Color\tProperties | Methods | Constant" +
            "s\r\n \r\nPackage\tcom.google.maps\r\nClass\tpublic final class Color\r\n\r\nColor stores a " +
            "color and provides methods for conversion between different textual and numeric " +
            "representations of color.\r\n\r\n\r\nPublic Properties\r\n \tProperty\tDefined by\r\n \t \tb :" +
            " Number\r\nBlue component, in the range [0,255].\r\n\tColor\r\n \t \tg : Number\r\nGreen co" +
            "mponent, in the range [0,255].\r\n\tColor\r\n \t \tr : Number\r\nRed component, in the ra" +
            "nge [0,255].\r\n\tColor\r\n \t \trgb : Number\r\n[read-only] Color as a Number, for examp" +
            "le 0x804020.\r\n\tColor\r\nPublic Methods\r\n \tMethod\tDefined by\r\n \t \t\r\nColor(clr:Numbe" +
            "r)\r\nConstructs a Color from a Number.\r\n\tColor\r\n \t \t\r\nincRGB(deltaR:Number, delta" +
            "G:Number, deltaB:Number):void\r\nIncrements this color\'s R, G and B components by " +
            "individual delta values.\r\n\tColor\r\n \t \t\r\nsetRGB(compR:Number, compG:Number, compB" +
            ":Number):void\r\nSets this color from R, G and B components, all in the range [0,2" +
            "55].\r\n\tColor\r\n \t \t\r\ntoHtml(color:Number):String\r\n[static] Returns a color in HTM" +
            "L format, for example \'#321fba\'.\r\n\tColor\r\n \t \t\r\ntoString():String\r\nReturns a str" +
            "ing representation of this color, for example \'R:64/G:32/B:255\'.\r\n\tColor\r\nPublic" +
            " Constants\r\n \tConstant\tDefined by\r\n \t \tBLACK : Number = 0x000000\r\n[static]\r\n\tCol" +
            "or\r\n \t \tBLUE : Number = 0x0000ff\r\n[static]\r\n\tColor\r\n \t \tCYAN : Number = 0x00ffff" +
            "\r\n[static]\r\n\tColor\r\n \t \tDEFAULTLINK : Number = 0x7777cc\r\n[static] Color used for" +
            " the \'Terms of Use\' link.\r\n\tColor\r\n \t \tGRAY1 : Number = 0x101010\r\n[static]\r\n\tCol" +
            "or\r\n \t \tGRAY10 : Number = 0xa0a0a0\r\n[static]\r\n\tColor\r\n \t \tGRAY11 : Number = 0xb0" +
            "b0b0\r\n[static]\r\n\tColor\r\n \t \tGRAY12 : Number = 0xc0c0c0\r\n[static]\r\n\tColor\r\n \t \tGR" +
            "AY13 : Number = 0xd0d0d0\r\n[static]\r\n\tColor\r\n \t \tGRAY14 : Number = 0xe0e0e0\r\n[sta" +
            "tic]\r\n\tColor\r\n \t \tGRAY15 : Number = 0xf0f0f0\r\n[static]\r\n\tColor\r\n \t \tGRAY2 : Numb" +
            "er = 0x202020\r\n[static]\r\n\tColor\r\n \t \tGRAY3 : Number = 0x303030\r\n[static]\r\n\tColor" +
            "\r\n \t \tGRAY4 : Number = 0x404040\r\n[static]\r\n\tColor\r\n \t \tGRAY5 : Number = 0x505050" +
            "\r\n[static]\r\n\tColor\r\n \t \tGRAY6 : Number = 0x606060\r\n[static]\r\n\tColor\r\n \t \tGRAY7 :" +
            " Number = 0x707070\r\n[static]\r\n\tColor\r\n \t \tGRAY8 : Number = 0x808080\r\n[static]\r\n\t" +
            "Color\r\n \t \tGRAY9 : Number = 0x909090\r\n[static]\r\n\tColor\r\n \t \tGREEN : Number = 0x0" +
            "0ff00\r\n[static]\r\n\tColor\r\n \t \tMAGENTA : Number = 0xff00ff\r\n[static]\r\n\tColor\r\n \t \t" +
            "RED : Number = 0xff0000\r\n[static]\r\n\tColor\r\n \t \tWHITE : Number = 0xffffff\r\n[stati" +
            "c]\r\n\tColor\r\n \t \tYELLOW : Number = 0xffff00\r\n[static]\r\n\tColor\r\nProperty detail\r\nb" +
            "\tproperty\r\nb:Number  [read-write]\r\n\r\nBlue component, in the range [0,255].\r\nImpl" +
            "ementation\r\n    public function get b():Number\r\n    public function set b(value:" +
            "Number):void\r\ng\tproperty\t \r\ng:Number  [read-write]\r\n\r\nGreen component, in the ra" +
            "nge [0,255].\r\nImplementation\r\n    public function get g():Number\r\n    public fun" +
            "ction set g(value:Number):void\r\nr\tproperty\t \r\nr:Number  [read-write]\r\n\r\nRed comp" +
            "onent, in the range [0,255].\r\nImplementation\r\n    public function get r():Number" +
            "\r\n    public function set r(value:Number):void\r\nrgb\tproperty\t \r\nrgb:Number  [rea" +
            "d-only]\r\n\r\nColor as a Number, for example 0x804020.\r\nImplementation\r\n    public " +
            "function get rgb():Number\r\nConstructor detail\r\nColor\t()\tconstructor\r\npublic func" +
            "tion Color(clr:Number)\r\n\r\nConstructs a Color from a Number.\r\nParameters\r\n\tclr:Nu" +
            "mber\r\n\r\nExample\r\n\r\n   var col:Color = new Color(0x0000ff);  // blue\r\n\r\nMethod de" +
            "tail\r\nincRGB\t()\tmethod\r\npublic function incRGB(deltaR:Number, deltaG:Number, del" +
            "taB:Number):void\r\n\r\nIncrements this color\'s R, G and B components by individual " +
            "delta values. Each color component is clamped to the valid range [0,255].\r\nParam" +
            "eters\r\n\tdeltaR:Number — R component delta.\r\n \r\n\tdeltaG:Number — G component delt" +
            "a.\r\n \r\n\tdeltaB:Number — B component delta.\r\n\r\nExample\r\n\r\n   var col:Color = new " +
            "Color(0xff0000);  // color is red\r\n   col.incRGB(0, 255, 0);  // color is now ye" +
            "llow\r\n\r\nsetRGB\t()\tmethod\t \r\npublic function setRGB(compR:Number, compG:Number, c" +
            "ompB:Number):void\r\n\r\nSets this color from R, G and B components, all in the rang" +
            "e [0,255].\r\nParameters\r\n\tcompR:Number — New R component.\r\n \r\n\tcompG:Number — New" +
            " G component.\r\n \r\n\tcompB:Number — New B component.\r\n\r\nExample\r\n\r\n   var col:Colo" +
            "r = new Color(0);\r\n   col.setRGB(128, 64, 255);  // lilac\r\n\r\ntoHtml\t()\tmethod\t \r" +
            "\npublic static function toHtml(color:Number):String\r\n\r\nReturns a color in HTML f" +
            "ormat, for example \'#321fba\'. Clamps the number to the range [0x000000,0xffffff]" +
            ". Returns the encoding for black if the input value is not a valid number.\r\nPara" +
            "meters\r\n\tcolor:Number — Color to represent in HTML format.\r\n\r\nReturns\r\n\tString —" +
            " color as a HTML String.\r\n\r\nExample\r\n\r\n   var col:Color = new Color(0xff8020);\r\n" +
            "   trace(col.toHtml());  // outputs \"#ff8020\"\r\n\r\ntoString\t()\tmethod\t \r\npublic fu" +
            "nction toString():String\r\n\r\nReturns a string representation of this color, for e" +
            "xample \'R:64/G:32/B:255\'.\r\n\r\nReturns\r\n\tString — This color as a String.\r\n\r\nExamp" +
            "le\r\n\r\n   var col:Color = new Color(0xff8020);\r\n   trace(col.toString());  // out" +
            "puts \"R:255/G:128/B:32\"\r\n\r\nConstant detail\r\nBLACK\tconstant\r\npublic static const " +
            "BLACK:Number = 0x000000\r\nBLUE\tconstant\t \r\npublic static const BLUE:Number = 0x00" +
            "00ff\r\nCYAN\tconstant\t \r\npublic static const CYAN:Number = 0x00ffff\r\nDEFAULTLINK\tc" +
            "onstant\t \r\npublic static const DEFAULTLINK:Number = 0x7777cc\r\n\r\nColor used for t" +
            "he \'Terms of Use\' link.\r\nGRAY1\tconstant\t \r\npublic static const GRAY1:Number = 0x" +
            "101010\r\nGRAY10\tconstant\t \r\npublic static const GRAY10:Number = 0xa0a0a0\r\nGRAY11\t" +
            "constant\t \r\npublic static const GRAY11:Number = 0xb0b0b0\r\nGRAY12\tconstant\t \r\npub" +
            "lic static const GRAY12:Number = 0xc0c0c0\r\nGRAY13\tconstant\t \r\npublic static cons" +
            "t GRAY13:Number = 0xd0d0d0\r\nGRAY14\tconstant\t \r\npublic static const GRAY14:Number" +
            " = 0xe0e0e0\r\nGRAY15\tconstant\t \r\npublic static const GRAY15:Number = 0xf0f0f0\r\nGR" +
            "AY2\tconstant\t \r\npublic static const GRAY2:Number = 0x202020\r\nGRAY3\tconstant\t \r\np" +
            "ublic static const GRAY3:Number = 0x303030\r\nGRAY4\tconstant\t \r\npublic static cons" +
            "t GRAY4:Number = 0x404040\r\nGRAY5\tconstant\t \r\npublic static const GRAY5:Number = " +
            "0x505050\r\nGRAY6\tconstant\t \r\npublic static const GRAY6:Number = 0x606060\r\nGRAY7\tc" +
            "onstant\t \r\npublic static const GRAY7:Number = 0x707070\r\nGRAY8\tconstant\t \r\npublic" +
            " static const GRAY8:Number = 0x808080\r\nGRAY9\tconstant\t \r\npublic static const GRA" +
            "Y9:Number = 0x909090\r\nGREEN\tconstant\t \r\npublic static const GREEN:Number = 0x00f" +
            "f00\r\nMAGENTA\tconstant\t \r\npublic static const MAGENTA:Number = 0xff00ff\r\nRED\tcons" +
            "tant\t \r\npublic static const RED:Number = 0xff0000\r\nWHITE\tconstant\t \r\npublic stat" +
            "ic const WHITE:Number = 0xffffff\r\nYELLOW\tconstant\t \r\npublic static const YELLOW:" +
            "Number = 0xffff00\r\n\r\n\r\n")]
        public string TestInput {
            get {
                return ((string)(this["TestInput"]));
            }
            set {
                this["TestInput"] = value;
            }
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;

namespace ScriptCoreLibJavaCard.APDUProxyGenerator
{
	class Program
	{


		static void Main(string[] args)
		{

			var TargetAssembly = Assembly.LoadFile(Path.GetFullPath(args[0]));
			var TargetType = TargetAssembly.GetType(args[1], true);
			var TargetFile = args[2];

			using (var s = new StreamWriter(File.OpenWrite(TargetFile)))
			using (var w = new CodeWriter(s))
			{
				s.BaseStream.SetLength(0);

				w.Statement("// Generated by ScriptCoreLibJavaCard.APDUProxyGenerator at " + DateTime.Now);

				var source = from k in TargetType.GetMethods()
							 let CLA = k.GetCustomAttributes(typeof(APDUClassAttribute), false).Cast<APDUClassAttribute>().FirstOrDefault()
							 where CLA != null
							 let INS = k.GetCustomAttributes(typeof(APDUInstructionAttribute), false).Cast<APDUInstructionAttribute>().FirstOrDefault()
							 where INS != null
							 group new { k, CLA, INS } by CLA;


				if (TargetFile.EndsWith(".Dispatch.cs"))
				{
					Console.WriteLine("will create dispatcher... " + TargetType.Name);

					#region .Dispatch.cs
					w.Statement("using ScriptCoreLibJavaCard.javacard.framework;");

					w.PartialTypeBlock(TargetType, null,
						delegate
						{
							w.Statement("[System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
							w.Block("internal bool Dispatch(APDU e)",
								delegate
								{
									w.Statement("var buffer = e.getBuffer();");
									w.Statement("var CLA = (byte)buffer[ISO7816Constants.OFFSET_CLA];");
									w.Statement("var INS = (byte)buffer[ISO7816Constants.OFFSET_INS];");



									foreach (var k in source)
									{
										w.Block("if (CLA == " + k.Key.CLA + ")",
											delegate
											{
												foreach (var i in k)
												{
													w.Block("if (INS == " + i.INS.INS + ")",
														delegate
														{
															// default calling convention...
															// could be extended
															w.Statement("this." + i.k.Name + "(e);");
															w.Statement("return true;");
														}
													);
												}
											}
										);
									}

									w.Statement("return false;");
								}
							);
						}
					);
					#endregion
				}
				else
				{
					Console.WriteLine("will create proxy... " + TargetType.Name);

					w.Statement("using ScriptCoreLib;");

					w.PartialTypeBlock(TargetType,
						delegate
						{
							w.Statement("[System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
							w.Statement("[Script]");
						},
						delegate
						{
							w.Statement("[Script]");
							w.Block("public interface ITransmitter",
								delegate
								{
									w.Statement("byte[] Transmit(params byte[] e);");
								}
							);

							w.Statement("public ITransmitter Transmitter;");

							//w.Statement("public const long ApplicationAID = " + TargetAssembly.GetCustomAttributes(typeof(AIDAttribute), false).Cast<AIDAttribute>().First().Value + "L;");
							//w.Statement("public const long DefaultInstallationSuffix = " + TargetType.GetCustomAttributes(typeof(AIDAttribute), false).Cast<AIDAttribute>().First().Value + "L;");

							Action<byte[]> Transmit =
								c =>
								{
									w.Statement("return this.Transmitter.Transmit(" + c.Aggregate("",
										(seed, value) =>
										{
											if (string.IsNullOrEmpty(seed))
												return "0x" + value.ToString("x2");

											return seed + ", 0x" + value.ToString("x2");
										}
									) + ");");
								};

							w.Block("public byte[] SelectApplet()",
								delegate
								{
									var c = new byte[] { 0x00, 0xA4, 0x04, 0x00, 0x08 }
										.Concat(new AIDAttribute.Info(TargetType).ToArray()).ToArray();

									Transmit(c);
								}
							);

							foreach (var i in source.SelectMany(k => k))
							{
								w.Block("public byte[] " + i.k.Name + "()",
									delegate
									{
										Transmit(new byte[] { i.CLA.CLA, i.INS.INS, 0, 0, 0 });
									}
								);
							}
						}
					);
				}
			}

		}
	}
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;

namespace ScriptCoreLibJavaCard.APDUProxyGenerator
{
	class Program
	{


		static void Main(string[] args)
		{

			var TargetAssembly = Assembly.LoadFile(Path.GetFullPath(args[0]));
			var TargetType = TargetAssembly.GetType(args[1], true);
			var TargetFile = args[2];

			using (var s = new StreamWriter(File.OpenWrite(TargetFile)))
			using (var w = new CodeWriter(s))
			{
				s.BaseStream.SetLength(0);

				w.Statement("// Generated by ScriptCoreLibJavaCard.APDUProxyGenerator at " + DateTime.Now);

				var source = from k in TargetType.GetMethods()
							 let CLA = k.GetCustomAttributes(typeof(APDUClassAttribute), false).Cast<APDUClassAttribute>().FirstOrDefault()
							 where CLA != null
							 let INS = k.GetCustomAttributes(typeof(APDUInstructionAttribute), false).Cast<APDUInstructionAttribute>().FirstOrDefault()
							 where INS != null
							 group new { k, CLA, INS } by CLA;


				if (TargetFile.EndsWith(".Dispatch.cs"))
				{
					Console.WriteLine("will create dispatcher... " + TargetType.Name);

					#region .Dispatch.cs
					w.Statement("using ScriptCoreLibJavaCard.javacard.framework;");

					w.PartialTypeBlock(TargetType, null,
						delegate
						{
							w.Statement("[System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
							w.Block("internal bool Dispatch(APDU e)",
								delegate
								{
									w.Statement("var buffer = e.getBuffer();");
									w.Statement("var CLA = (byte)buffer[ISO7816Constants.OFFSET_CLA];");
									w.Statement("var INS = (byte)buffer[ISO7816Constants.OFFSET_INS];");

									w.Statement("var P1 = buffer[ISO7816Constants.OFFSET_P1];");
									w.Statement("var P2 = buffer[ISO7816Constants.OFFSET_P2];");
									w.Statement("var Pi8 = (short)(((P1 & 0xff) << 8) + (P2 & 0xff));");

									foreach (var k in source)
									{
										w.Block("if (CLA == " + k.Key.CLA + ")",
											delegate
											{
												foreach (var i in k.Select((q, i) => new { q.k, q.CLA, INS = q.CLA.AutoAssignInstructions ? (byte)i : q.INS.INS }))
												{
													Console.WriteLine(i.k.Name);

													w.Block("if (INS == " + i.INS + ")",
														delegate
														{
															// default calling convention...
															// could be extended

															DispatcherInvoke(w, i.k);

															w.Statement("return true;");
														}
													);
												}
											}
										);
									}

									w.Statement("return false;");
								}
							);
						}
					);
					#endregion
				}
				else
				{
					Console.WriteLine("will create proxy... " + TargetType.Name);

					w.Statement("using ScriptCoreLib;");

					w.Block("namespace " + TargetType.Namespace,
						delegate
						{
							w.Statement("[System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
							w.Statement("[Script]");

							w.Block("public partial class " + TargetType.Name + "Proxy",
								delegate
								{

									w.Statement("[Script]");
									w.Block("public interface ITransmitter",
										delegate
										{
											w.Statement("byte[] Transmit(params byte[] e);");
										}
									);

									w.Statement("public ITransmitter Transmitter;");

									//w.Statement("public const long ApplicationAID = " + TargetAssembly.GetCustomAttributes(typeof(AIDAttribute), false).Cast<AIDAttribute>().First().Value + "L;");
									//w.Statement("public const long DefaultInstallationSuffix = " + TargetType.GetCustomAttributes(typeof(AIDAttribute), false).Cast<AIDAttribute>().First().Value + "L;");

									Action<object[]> Transmit =
										c =>
										{
											w.Statement("return this.Transmitter.Transmit(" + c.Aggregate("",
												(seed, value) =>
												{
													var x = value is byte ? "0x" + ((byte)value).ToString("x2") :
														value is int ? "0x" + (((int)value) & 0xFF).ToString("x2") :
														value.ToString();

													if (string.IsNullOrEmpty(seed))
														return x;

													return seed + ", " + x;
												}
											) + ");");
										};

									w.Block("public byte[] SelectApplet()",
										delegate
										{
											var c = new byte[] { 0x00, 0xA4, 0x04, 0x00, 0x08 }
												.Concat(new AIDAttribute.Info(TargetType).ToArray()).Select(k => (object)k).ToArray();

											Transmit(c);
										}
									);

									foreach (var i in source.SelectMany(k => k).Select((q, i) => new { q.k, q.CLA, INS = q.CLA.AutoAssignInstructions ? (byte)i : q.INS.INS }))
									{
										var ik = i.k;
										var CLA = i.CLA.CLA;

										ProxyInvoke(w, Transmit, ik, CLA, i.INS);
									}
								}
							);
						}
					);

				
				}
			}

		}

		private static void ProxyInvoke(CodeWriter w, Action<object[]> Transmit, MethodInfo ik, byte CLA, byte INS)
		{
			var p = ik.GetParameters();

			if (p.Length == 1)
			{
				w.Statement("[System.Diagnostics.DebuggerNonUserCode]");
				w.Block("public byte[] " + ik.Name + "(params byte[] data)",
					delegate
					{
						w.Statement("var c = new System.IO.MemoryStream();");
						w.Statement("c.WriteByte(" + CLA + ");");
						w.Statement("c.WriteByte(" + INS + ");");
						w.Statement("c.WriteByte(" + 0 + ");");
						w.Statement("c.WriteByte(" + 0 + ");");
						w.Statement("c.WriteByte((byte)data.Length);");
						w.Statement("c.Write(data, 0, data.Length);");

						w.Statement("return this.Transmitter.Transmit(c.ToArray());");
					}
				);
				return;
			}

			if (p.Length == 2 && p[1].ParameterType == typeof(short))
			{
				var Pi8 = p[1];

				w.Statement("[System.Diagnostics.DebuggerNonUserCode]");
				w.Block("public byte[] " + ik.Name + "(short " + Pi8.Name + ", params byte[] data)",
					delegate
					{
						w.Statement("var c = new System.IO.MemoryStream();");
						w.Statement("c.WriteByte(" + CLA + ");");
						w.Statement("c.WriteByte(" + INS + ");");
						w.Statement("c.WriteByte(" + "(byte)((" + Pi8.Name + " >> 8) & 0xff)" + ");");
						w.Statement("c.WriteByte(" + "(byte)(" + Pi8.Name + " & 0xff)" + ");");
						w.Statement("c.WriteByte((byte)data.Length);");
						w.Statement("c.Write(data, 0, data.Length);");

						w.Statement("return this.Transmitter.Transmit(c.ToArray());");

					}
				);
				return;
			}
		}

		private static void DispatcherInvoke(CodeWriter w, MethodInfo ik)
		{
			var p = ik.GetParameters();

			if (p.Length == 1)
			{
				w.Statement("this." + ik.Name + "(e);");
				return;
			}

			if (p.Length == 2 && p[1].ParameterType == typeof(short))
			{
				w.Statement("this." + ik.Name + "(e, Pi8);");
				return;
			}

		}
	}
}

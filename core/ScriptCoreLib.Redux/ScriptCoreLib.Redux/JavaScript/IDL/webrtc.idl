// http://www.w3.org/TR/webrtc/
// http://dev.w3.org/2011/webrtc/editor/webrtc.html

// http://www.webrtc.org/reference/native-apis
// http://www.webrtc.org/reference/getting-started/
// http://www.easyrtc.com/
// http://www.webrtc.org/

// https://bugzilla.mozilla.org/buglist.cgi?product=Core&component=WebRTC%3A%20Networking&resolution=---

interface RTCError {
	readonly    attribute DOMString  name;
	readonly    attribute DOMString? message;
};

interface RTCSdpError : RTCError {
	readonly    attribute long sdpLineNumber;
};

//[Constructor (optional RTCSessionDescriptionInit descriptionInitDict)]
[Constructor (optional any descriptionInitDict)]
interface RTCSessionDescription {
	//attribute RTCSdpType? type;
	attribute DOMString?  sdp;
	//serializer = {attribute};
};

//[Constructor (optional RTCIceCandidateInit candidateInitDict)]
[Constructor (optional any candidateInitDict)]
interface RTCIceCandidate {
	attribute DOMString?      candidate;
	attribute DOMString?      sdpMid;
	attribute unsigned short? sdpMLineIndex;
	//serializer = {attribute};
};

//[Constructor(DOMString type, RTCPeerConnectionIceEventInit eventInitDict)]
[Constructor(DOMString type, any eventInitDict)]
interface RTCPeerConnectionIceEvent : Event {
	readonly    attribute RTCIceCandidate candidate;
};




// http://mxr.mozilla.org/mozilla-central/source/dom/webidl/RTCPeerConnection.webidl

//partial 
// X:\jsc.svn\examples\javascript\test\TestPeerConnection\TestPeerConnection\Application.cs
//[ Constructor (RTCConfiguration configuration, optional MediaConstraints constraints)]
[ Constructor (any configuration, optional any constraints)]
interface RTCPeerConnection {

	// http://mxr.mozilla.org/mozilla-central/source/dom/media/PeerConnection.js

	//void                  createOffer (RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, optional RTCOfferOptions options);
	//void                  createOffer (RTCSessionDescriptionCallback successCallback);
	//void                  createOffer (function<RTCSessionDescription sdp> successCallback);

	void                  createOffer (function<RTCSessionDescription> successCallback);
	//void                  createAnswer (RTCSessionDescriptionCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, optional RTCOfferAnswerOptions options);

	void                  createAnswer (function<RTCSessionDescription> successCallback);


	 //void                  setLocalDescription (RTCSessionDescription description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
	 void                  setLocalDescription (RTCSessionDescription description, function successCallback);

	 //     void                  setRemoteDescription (RTCSessionDescription description, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
	 void                  setRemoteDescription (RTCSessionDescription description, function successCallback);



	 // RTCPeerConnection Interface Extensions
	//RTCDataChannel createDataChannel (DOMString label, optional RTCDataChannelInit dataChannelDict);
	RTCDataChannel createDataChannel (DOMString label, optional any dataChannelDict);
	attribute EventHandler ondatachannel;
	//attribute function<RTCDataChannelEvent> ondatachannel;

	//void getStats (MediaStreamTrack? selector, RTCStatsCallback successCallback, RTCPeerConnectionErrorCallback failureCallback);



	//void setIdentityProvider (DOMString provider, optional DOMString protocol, optional DOMString username);
	//void getIdentityAssertion ();
	////readonly    attribute RTCIdentityAssertion? peerIdentity;
	//attribute EventHandler          onidentityresult;

	// https://bugzilla.mozilla.org/show_bug.cgi?id=1014304

	        attribute EventHandler           onnegotiationneeded;

			// X:\jsc.svn\examples\javascript\p2p\RTCPeerIPAddress\RTCPeerIPAddress\Application.cs
                attribute EventHandler           onicecandidate;
	//void                  addIceCandidate (RTCIceCandidate candidate, VoidFunction successCallback, RTCPeerConnectionErrorCallback failureCallback);
	void                  addIceCandidate (RTCIceCandidate candidate, function successCallback);

                attribute EventHandler           onsignalingstatechange;
                attribute EventHandler           onaddstream;
                attribute EventHandler           onremovestream;
                attribute EventHandler           oniceconnectionstatechange;

};

interface RTCDataChannel : EventTarget {
	readonly    attribute DOMString           label;
	readonly    attribute boolean             ordered;
	readonly    attribute unsigned short?     maxRetransmitTime;
	readonly    attribute unsigned short?     maxRetransmits;
	readonly    attribute DOMString           protocol;
	readonly    attribute boolean             negotiated;
	readonly    attribute unsigned short?     id;

	//readonly    attribute RTCDataChannelState readyState;
	// can CLR do string enums yet?
	readonly    attribute string readyState;

	readonly    attribute unsigned long       bufferedAmount;
	attribute EventHandler        onopen;
	attribute EventHandler        onerror;
	attribute EventHandler        onclose;
	void close ();
	attribute EventHandler        onmessage;
	attribute DOMString           binaryType;
	void send (DOMString data);
	void send (Blob data);
	void send (ArrayBuffer data);
	void send (ArrayBufferView data);
};

//[Constructor(DOMString type, RTCDataChannelEventInit eventInitDict)]
[Constructor(DOMString type, any eventInitDict)]
interface RTCDataChannelEvent : Event {
	readonly    attribute RTCDataChannel channel;
};

//[NoInterfaceObject]
interface RTCDTMFSender {
	readonly    attribute boolean          canInsertDTMF;
	void insertDTMF (DOMString tones, optional long duration, optional long interToneGap);
	//readonly    attribute MediaStreamTrack track;
	attribute EventHandler     ontonechange;
	readonly    attribute DOMString        toneBuffer;
	readonly    attribute long             duration;
	readonly    attribute long             interToneGap;
};

//[Constructor(DOMString type, RTCDTMFToneChangeEventInit eventInitDict)]
[Constructor(DOMString type, any eventInitDict)]
interface RTCDTMFToneChangeEvent : Event {
	readonly    attribute DOMString tone;
};

interface RTCStatsReport {
	//getter RTCStats (DOMString id);
};

//[Constructor(DOMString type, MediaStreamEventInit eventInitDict)]
[Constructor(DOMString type, any eventInitDict)]
interface MediaStreamEvent : Event {
	//readonly    attribute MediaStream? stream;
};
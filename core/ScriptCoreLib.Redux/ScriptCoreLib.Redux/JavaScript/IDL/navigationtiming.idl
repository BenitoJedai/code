// http://www.w3.org/TR/navigation-timing/

interface PerformanceTiming {
  readonly attribute unsigned long long navigationStart;
  readonly attribute unsigned long long unloadEventStart;
  readonly attribute unsigned long long unloadEventEnd;
  readonly attribute unsigned long long redirectStart;
  readonly attribute unsigned long long redirectEnd;
  readonly attribute unsigned long long fetchStart;
  readonly attribute unsigned long long domainLookupStart;
  readonly attribute unsigned long long domainLookupEnd;
  readonly attribute unsigned long long connectStart;
  readonly attribute unsigned long long connectEnd;
  readonly attribute unsigned long long secureConnectionStart;
  readonly attribute unsigned long long requestStart;
  readonly attribute unsigned long long responseStart;
  readonly attribute unsigned long long responseEnd;
  readonly attribute unsigned long long domLoading;
  readonly attribute unsigned long long domInteractive;
  readonly attribute unsigned long long domContentLoadedEventStart;
  readonly attribute unsigned long long domContentLoadedEventEnd;
  readonly attribute unsigned long long domComplete;
  readonly attribute unsigned long long loadEventStart;
  readonly attribute unsigned long long loadEventEnd;
};

interface PerformanceNavigation {
	// does jsc support enums yet?

  const unsigned short TYPE_NAVIGATE = 0;
  const unsigned short TYPE_RELOAD = 1;
  const unsigned short TYPE_BACK_FORWARD = 2;
  const unsigned short TYPE_RESERVED = 255;
  readonly attribute unsigned short type;
  readonly attribute unsigned short redirectCount;
};

//typedef sequence<PerformanceEntry> PerformanceEntryList;

// http://www.w3.org/TR/performance-timeline/#performanceentry
interface PerformanceEntry {
  readonly attribute DOMString name;
  readonly attribute DOMString entryType;
  readonly attribute DOMHighResTimeStamp startTime;
  readonly attribute DOMHighResTimeStamp duration;
};

typedef double DOMHighResTimeStamp;

interface Performance {
  readonly attribute PerformanceTiming timing;
  readonly attribute PerformanceNavigation navigation;

  // http://msdn.microsoft.com/en-us/library/ie/hh973355(v=vs.85).aspx
  // https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HighResolutionTime/Overview.html
  // http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now
  DOMHighResTimeStamp now();


  // http://www.w3.org/TR/resource-timing/#performanceresourcetiming
   void clearResourceTimings();
  void setResourceTimingBufferSize(unsigned long maxSize);

  attribute Function onresourcetimingbufferfull;


  // http://www.w3.org/TR/performance-timeline/#performanceentry
  sequence<PerformanceResourceTiming> getEntries();
  sequence<PerformanceResourceTiming> getEntriesByType(DOMString entryType);
  sequence<PerformanceResourceTiming> getEntriesByName(DOMString name, optional DOMString entryType);
};


interface PerformanceResourceTiming : PerformanceEntry {
  readonly attribute DOMString initiatorType; 
  // "css", "embed", "img", "link", "object", "script", "subdocument", "svg", "xmlhttprequest", "other"
  
  readonly attribute DOMHighResTimeStamp redirectStart;
  readonly attribute DOMHighResTimeStamp redirectEnd;
  readonly attribute DOMHighResTimeStamp fetchStart;
  readonly attribute DOMHighResTimeStamp domainLookupStart;
  readonly attribute DOMHighResTimeStamp domainLookupEnd;
  readonly attribute DOMHighResTimeStamp connectStart;
  readonly attribute DOMHighResTimeStamp connectEnd;
  readonly attribute DOMHighResTimeStamp secureConnectionStart;
  readonly attribute DOMHighResTimeStamp requestStart;
  readonly attribute DOMHighResTimeStamp responseStart;
  readonly attribute DOMHighResTimeStamp responseEnd;
};
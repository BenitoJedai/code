using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using ScriptCoreLib.Library;
using ScriptCoreLib.CSharp.Extensions;
using System.IO;

namespace ScriptCoreLib.Alchemy.ExportGenerator
{
	class Program
	{
		static void Main(string[] args)
		{


			var TargetAssembly = Assembly.LoadFile(Path.GetFullPath(args[0]));
			var TargetType = TargetAssembly.GetType(args[1], true);
			var TargetFile = args[2];
			var ProxyFullname = args[3];
			var ProxyNamespace = ProxyFullname.Substring(0, ProxyFullname.LastIndexOf("."));
			var ProxyName = ProxyFullname.Substring(ProxyFullname.LastIndexOf(".") + 1);

			AppDomain.CurrentDomain.AssemblyResolve += delegate(object sender, ResolveEventArgs args_)
			{

				string name = new AssemblyName(args_.Name).Name;


				string file_dll = new FileInfo(TargetAssembly.Location).Directory.FullName + @"\" + name + ".dll";
				string file_exe = new FileInfo(TargetAssembly.Location).Directory.FullName + @"\" + name + ".exe";


				var x = File.Exists(file_dll) ? Assembly.LoadFile(file_dll) :
								(File.Exists(file_exe) ? Assembly.LoadFile(file_exe) : null);

				return x;
			};

			var ExportedMethods =
							from SomeType in TargetType.GetCustomAttributes(typeof(AlchemyAttribute), false).Cast<AlchemyAttribute>()
							from m in SomeType.TargetType.GetMethods(BindingFlags.Static | BindingFlags.Public)
							let Parameters = m.GetParameters()
							select new { m, Parameters };

			var CModuleNamespace = "cmodule." + Path.GetFileNameWithoutExtension(TargetAssembly.Location);

			using (var p = new ProtectiveFileStream(new FileInfo(TargetFile)))
			using (var s = new StreamWriter(p))
			using (var w = new CodeWriter(s))
			{
				p.NotModified +=
					delegate
					{
						Console.WriteLine("Not modified. " + TargetFile);
					};

				s.BaseStream.SetLength(0);

				w.Statement("// Generated by ScriptCoreLib.Alchemy.ExportGenerator");
				w.Statement("// Clear this file to force code generation.");

				#region cmodule
				w.Namespace(CModuleNamespace,
					delegate
					{
						w.Using("ScriptCoreLib");
						w.Using("ScriptCoreLib.ActionScript.flash.utils");
						w.Using("ScriptCoreLib.ActionScript.flash.display");

						w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
						w.Statement("[Script(IsNative = true)]");
						w.Block("public class CLibInit",
							delegate
							{
								w.Block("public void supplyFile(string path, ByteArray data)", null);
								w.Block("public void putEnv(string key, string value)", null);
								w.Block("public void setSprite(Sprite sprite)", null);
								w.Block("public object init()",
									delegate
									{
										w.Statement("return default(object);");
									}
								);
							}
						);

					}
				);
				#endregion

				#region exported methods and main
				w.Namespace(TargetType.Namespace,
					delegate
					{
						w.Using("ScriptCoreLib");
						w.Using("ScriptCoreLib.Alchemy.Headers");
						w.Block("partial class " + TargetType.Name,
							delegate
							{


								#region exposed methods
								foreach (var k in ExportedMethods)
								{

									w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
									w.Block("static AS3_h._AS3_Val " + k.m.Name + "(object self, AS3_h._AS3_Val args)",
										delegate
										{
											foreach (var Parameter in k.Parameters)
											{
												if (typeof(int) == Parameter.ParameterType)
													w.Statement("int " + Parameter.Name + ";");
												else
													throw new NotSupportedException();
											}

											if (k.Parameters.Length > 0)
												w.Statement("AS3_h.AS3_ArrayValue(args, \"" +
													string.Join(", ",
														k.Parameters.Select(
															Parameter =>
															{
																return "IntType";
															}
														).ToArray()
													)
													+ "\", __arglist(" +
													string.Join(", ",
														k.Parameters.Select(
															Parameter =>
															{
																return "out " + Parameter.Name;
															}
														).ToArray()
													)
													+ "));");

											w.Statement("var __value = " + k.m.DeclaringType.FullName + "." + k.m.Name + "(" +
												string.Join(", ",
													k.Parameters.Select(
														Parameter =>
														{
															return Parameter.Name;
														}
													).ToArray()
												)
												+ ");"
											);

											foreach (var Parameter in k.Parameters)
											{
												if (typeof(int) == Parameter.ParameterType)
													w.Statement(Parameter.Name + " = default(int);");
												else
													throw new NotSupportedException();
											}

											if (k.m.ReflectedType.IsClass)
											{
												w.Statement("return AS3_h.AS3_Ptr(__value);");
											}
											else if (k.m.ReflectedType == typeof(string))
											{
												w.Statement("return AS3_h.AS3_String(__value);");

											}
											else
											{
												throw new NotSupportedException();
											}
										}
									);
								}
								#endregion

								w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
								w.Statement("[Script(NoDecoration = true)]");
								w.Block("static int main()",
									delegate
									{
										foreach (var k in ExportedMethods)
										{
											w.Statement("var __" + k.m.Name + " = AS3_h.AS3_Function(null, " + k.m.Name + ");");
										}

										w.Statement("var __result = AS3_h.AS3_Object(\"" +
											string.Join(",",
												ExportedMethods.Select(
													m =>
													{
														return m.m.Name + ": AS3ValType";
													}
												).ToArray()
											)
											+ "\", __arglist(" +
											string.Join(",",
												ExportedMethods.Select(
													m =>
													{
														return "__" + m.m.Name;
													}
												).ToArray()
											)
											+ "));");


										foreach (var k in ExportedMethods)
										{
											w.Statement("AS3_h.AS3_Release(__" + k.m.Name + ");");
										}

										w.Statement("AS3_h.AS3_LibInit(__result);");
										w.Statement("return 0;");

									}
								);
							}
						);
					}
				);
				#endregion

				w.Namespace(ProxyNamespace,
					delegate
					{
						w.Using("System");
						w.Using("ScriptCoreLib");
						w.Using("ScriptCoreLib.ActionScript");
						w.Using("ScriptCoreLib.ActionScript.Extensions");
						w.Using("ScriptCoreLib.ActionScript.flash.utils");

						w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
						w.Statement("[Script]");
						w.Block("public static class " + ProxyName,
							delegate
							{
								w.Statement("public static ByteArray Memory;");

								w.Statement("[Script(OptimizedCode = @\"return (ns::gstate).ds\")]");
								w.Block("public static ByteArray get_ds(Namespace ns)",
									delegate
									{
										w.Statement("return default(ByteArray);");
									}
								);

								Func<MethodInfo, string> GetGenericTypes =
									m =>
									{
										var ReturnType = "";

										// a pointer
										if (m.ReturnType.IsArray)
											ReturnType = "uint";
										else if (m.ReturnType == typeof(string))
											ReturnType = "string";
										else if (m.ReturnType == typeof(int))
											ReturnType = "int";
										else throw new NotSupportedException();

										return string.Join(", ",
											m.GetParameters().Select(
												Parameter =>
												{
													if (Parameter.ParameterType == typeof(int))
														return "int";

													if (Parameter.ParameterType == typeof(string))
														return "string";

													throw new NotSupportedException();
												}
											).ToArray()
										)
										+ (m.GetParameters().Any() ? ", " : "")
										+ ReturnType;
									};


								foreach (var k in ExportedMethods)
								{
									w.Statement("public static readonly Func<" + GetGenericTypes(k.m) + "> " + k.m.Name + ";");
								}

								w.Block("static " + ProxyName + "()",
									delegate
									{
										w.Statement("var __loader = new " + CModuleNamespace + ".CLibInit();");
										w.Statement("var __lib = new DynamicDelegatesContainer { Subject = __loader.init() };");
										w.Statement(ProxyName + ".Memory = get_ds(new Namespace(\"" + CModuleNamespace + "\"));");

										foreach (var k in ExportedMethods)
										{
											w.Statement(ProxyName + "." + k.m.Name + " = __lib.ToFunc<" + GetGenericTypes(k.m) + ">(\"" + k.m.Name + "\");");
										}
									}
								);
							}
						);
					}
				);
			}
		}
	}
}

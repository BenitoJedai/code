using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using ScriptCoreLib.Library;
using ScriptCoreLib.CSharp.Extensions;
using System.IO;

namespace ScriptCoreLib.Alchemy.ExportGenerator
{
	class Program
	{
		static void Main(string[] args)
		{
			var TargetAssembly = Assembly.LoadFile(Path.GetFullPath(args[0]));
			var TargetType = TargetAssembly.GetType(args[1], true);
			var TargetFile = args[2];

			using (var p = new ProtectiveFileStream(new FileInfo(TargetFile)))
			using (var s = new StreamWriter(p))
			using (var w = new CodeWriter(s))
			{
				p.NotModified +=
					delegate
					{
						Console.WriteLine("Not modified. " + TargetFile);
					};

				s.BaseStream.SetLength(0);

				w.Statement("// Generated by ScriptCoreLib.Alchemy.ExportGenerator");
				w.Statement("// Clear this file to force code generation.");

				#region cmodule
				w.Namespace("cmodule." + Path.GetFileNameWithoutExtension(TargetAssembly.Location),
					delegate
					{
						w.Using("ScriptCoreLib");
						w.Using("ScriptCoreLib.ActionScript.flash.utils");
						w.Using("ScriptCoreLib.ActionScript.flash.display");

						w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
						w.Statement("[Script(IsNative = true)]");
						w.Block("public class CLibInit",
							delegate
							{
								w.Block("public void supplyFile(string path, ByteArray data)", null);
								w.Block("public void putEnv(string key, string value)", null);
								w.Block("public void setSprite(Sprite sprite)", null);
								w.Block("public object init()",
									delegate
									{
										w.Statement("return default(object);");
									}
								);
							}
						);

					}
				);
				#endregion

				w.Namespace(TargetType.Namespace,
					delegate
					{
						w.Using("ScriptCoreLib");
						w.Using("ScriptCoreLib.Alchemy.Headers");
						w.Block("partial class " + TargetType.Name,
							delegate
							{
								var source =
									from m in TargetType.GetMethods(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public)
									let ms = m.GetCustomAttributes(typeof(AlchemyAttribute), false).Cast<AlchemyAttribute>().FirstOrDefault()
									where ms != null
									let Parameters = m.GetParameters()
									select new { m, ms, Parameters };

								#region exposed methods
								foreach (var k in source)
								{

									w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
									w.Block("static AS3_h._AS3_Val " + k.m.Name + "(object self, AS3_h._AS3_Val args)",
										delegate
										{
											foreach (var Parameter in k.Parameters)
											{
												if (typeof(int) == Parameter.ParameterType)
													w.Statement("int " + Parameter.Name + ";");
												else
													throw new NotSupportedException();
											}

											if (k.Parameters.Length > 0)
												w.Statement("AS3_h.AS3_ArrayValue(args, \"" +
													string.Join(", ",
														k.Parameters.Select(
															Parameter =>
															{
																return "IntType";
															}
														).ToArray()
													)
													+ "\", __arglist(" +
													string.Join(", ",
														k.Parameters.Select(
															Parameter =>
															{
																return "out " + Parameter.Name;
															}
														).ToArray()
													)
													+ "));");

											w.Statement("var __value = " + k.m.Name + "(" +
												string.Join(", ",
													k.Parameters.Select(
														Parameter =>
														{
															return Parameter.Name;
														}
													).ToArray()
												)
												+ ");"
											);

											foreach (var Parameter in k.Parameters)
											{
												if (typeof(int) == Parameter.ParameterType)
													w.Statement(Parameter.Name + " = default(int);");
												else
													throw new NotSupportedException();
											}

											if (k.m.ReflectedType.IsClass)
											{
												w.Statement("return AS3_h.AS3_Ptr(__value);");
											}
											else if (k.m.ReflectedType == typeof(string))
											{
												w.Statement("return AS3_h.AS3_String(__value);");

											}
											else
											{
												throw new NotSupportedException();
											}
										}
									);
								}
								#endregion

								w.Statement("[global::System.Runtime.CompilerServices.CompilerGenerated]");
								w.Statement("[Script(NoDecoration = true)]");
								w.Block("static int main()",
									delegate
									{
										foreach (var k in source)
										{
											w.Statement("var __" + k.m.Name + " = AS3_h.AS3_Function(null, " + k.m.Name + ");");
										}

										w.Statement("var __result = AS3_h.AS3_Object(\"" +
											string.Join(",",
												source.Select(
													m =>
													{
														return m.m.Name + ": AS3ValType";
													}
												).ToArray()
											) 
											+ "\", __arglist(" + 
											string.Join(",",
												source.Select(
													m =>
													{
														return "__" + m.m.Name ;
													}
												).ToArray()
											) 
											+ "));");


										foreach (var k in source)
										{
											w.Statement("AS3_h.AS3_Release(__" + k.m.Name + ");");
										}

										w.Statement("AS3_h.AS3_LibInit(__result);");
										w.Statement("return 0;");

									}
								);
							}
						);
					}
				);
			}
		}
	}
}

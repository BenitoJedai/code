using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Xml.XPath;
using System.Xml;
using System.IO;
using System.Reflection;

namespace jsc.meta.Library
{

    public class MSVSProjectFile
    {
        // Microsoft Visual Studio Project File

        public string[] HintPaths;

        public string DefaultNamespace;

        public ProjectFileInfo[] NoneFiles;
        public ProjectFileInfo[] ContentFiles;

        public Func<FileInfo, bool> HasReference;

        public Action<FileInfo, AssemblyName> AddReference;

        public Action Save;

        public class ProjectFileInfo
        {
            public FileInfo File;

            public static implicit operator FileInfo(ProjectFileInfo f)
            {
                return f.File;
            }

            public string NamespaceDirectory;
        }

        public static MSVSProjectFile FromFile(string filepath)
        {
            var ProjectFileName = new FileInfo(filepath);

            var csproj = XDocument.Load(filepath);

            #region ns
            XNamespace ns = "http://schemas.microsoft.com/developer/msbuild/2003";
            var nsItemGroup = ns + "ItemGroup";
            var nsRootNamespace = ns + "RootNamespace";
            var nsPropertyGroup = ns + "PropertyGroup";
            var nsNone = ns + "None";
            var nsContent = ns + "Content";
            var nsCompile = ns + "Compile";
            var nsDependentUpon = ns + "DependentUpon";
            var nsReference = ns + "Reference";
            var nsHintPath = ns + "HintPath";
            var nsAssemblyName = ns + "AssemblyName";
            var nsLink = ns + "Link";

            #endregion


            var HintPaths = csproj.Root.Elements(nsItemGroup).Elements(nsReference).Elements(nsHintPath).Select(k => k.Value).ToArray();

            var DefaultNamespace = Enumerable.First(
                 from PropertyGroup in csproj.Root.Elements(nsPropertyGroup)
                 //from RootNamespace in PropertyGroup.Elements(nsRootNamespace)
                 //select RootNamespace.Value

                 from __AssemblyName in PropertyGroup.Elements(nsAssemblyName)
                 select __AssemblyName.Value
            );

            Func<XName, IEnumerable<ProjectFileInfo>> GetFilesByType =
                FileType =>
                      from ItemGroup in csproj.Root.Elements(nsItemGroup)

                      from None in ItemGroup.Elements(FileType)

                      let Link = None.Element(nsLink)

                      let Include = None.Attribute("Include").Value

                      // Directory In Project
                      let Directory = Path.GetDirectoryName(Link != null ? Link.Value : Include).Replace("\\", "/")

                      let File = new FileInfo(Link != null ? Include : Path.Combine(ProjectFileName.Directory.FullName, Include))

                      select new ProjectFileInfo { File = File, NamespaceDirectory = Directory };




            Func<FileInfo, bool> HasReference =
              AssemblyFile =>
              {
                  var TargetHintPath = AssemblyFile.FullName.Substring(ProjectFileName.Directory.FullName.Length + 1);

                  return Enumerable.Any(
                       from ItemGroup in csproj.Root.Elements(nsItemGroup)
                       from Reference in ItemGroup.Elements(nsReference)
                       from HintPath in Reference.Elements(nsHintPath)
                       where TargetHintPath == HintPath.Value
                       select new { HintPath, Reference, ItemGroup }
                  );
              };


            #region AddReference
            Action<FileInfo, AssemblyName> AddReference =
                (AssemblyFile, Name) =>
                {

                    /* add reference
<Reference Include="AutoGeneratedReferences.Components.JohDoe.TextComponent, Version=0.0.0.0, Culture=neutral, processorArchitecture=MSIL">
  <SpecificVersion>False</SpecificVersion>
  <HintPath>bin\staging\AutoGeneratedReferences.Components.JohDoe.TextComponent.dll</HintPath>
</Reference>
                    */

                    var TargetHintPath = AssemblyFile.FullName.Substring(ProjectFileName.Directory.FullName.Length + 1);

                    // sanity check
                    if (!HasReference(AssemblyFile))
                    {
                        var TargetItemGroup = Enumerable.First(
                            from ItemGroup in csproj.Root.Elements(nsItemGroup)
                            from Reference in ItemGroup.Elements(nsReference)
                            select ItemGroup
                        );

                        TargetItemGroup.Add(
                            new XElement(nsReference,
                                new XAttribute("Include", Name.ToString()),
                                new XElement(nsHintPath, TargetHintPath)
                            )
                        );


                    }
                };
            #endregion

            Action Save = delegate
            {
                csproj.Save(filepath);
            };

            return new MSVSProjectFile
            {
                HintPaths = HintPaths,
                DefaultNamespace = DefaultNamespace,
                NoneFiles = GetFilesByType(nsNone).ToArray(),
                ContentFiles = GetFilesByType(nsContent).ToArray(),
                HasReference = HasReference,
                AddReference = AddReference,
                Save = Save
            };
        }

        public static implicit operator MSVSProjectFile(FileInfo f)
        {
            return MSVSProjectFile.FromFile(f.FullName);
        }
    }
}

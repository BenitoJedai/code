// we will need TargetConstructor with a dot
// should enable nesting instead

interface CANNON
{ 

};

[Constructor()]
interface CANNON.NaiveBroadphase 
{ 
};

[Constructor()]
interface CANNON.Plane 
{ 
};

[Constructor,
Constructor(DOMString e)]
interface CANNON.Material 
{ 
};

[Constructor(any m1, any m2, double friction, double restitution)]
interface CANNON.ContactMaterial 
{ 
};

[Constructor(double radius)]
interface CANNON.Sphere 
{ 
	attribute double        radius;

};

[Constructor()]
interface CANNON.Quaternion 
{ 
	void setFromAxisAngle(CANNON.Vec3 xyz, double q);
	void copy(any xyz);

};


[Constructor(double mass, any sphereShape, any physicsMaterial),
	Constructor(double mass, any sphereShape)]
interface CANNON.RigidBody 
{ 
	attribute CANNON.Quaternion        quaternion;
	attribute CANNON.Vec3        position;
	attribute CANNON.Vec3        velocity;

	attribute double        linearDamping;
	attribute double        angularDamping;

	attribute boolean        useQuaternion;
	attribute boolean        castShadow;
	attribute boolean        receiveShadow;

};


[Constructor()]
interface CANNON.Solver 
{ 
	attribute long        tolerance;
	attribute long        iterations;
	void setSpookParams(long x, long y);
};

[Constructor()]
interface CANNON.World 
{  

	attribute CANNON.Solver        solver;
	attribute CANNON.Vec3        gravity;

	attribute long        quatNormalizeSkip;
	attribute boolean        quatNormalizeFast;

	attribute /* NaiveBroadphase */ any        broadphase;

	void addContactMaterial(any value);
	void add(any value);

	void addConstraint(any value);
	void step(double value);
};

[Constructor(double x, double y, double z)]
interface CANNON.Vec3 
{ 
	attribute double x; 
	attribute double y;
	attribute double z;

	void set(double x, double y, double z);
	void copy(any xyz);
};

[Constructor(any x)]
interface CANNON.Box 
{ 
};


[Constructor(any body1, any xyz1, any body2, any xyz2)]
interface CANNON.PointToPointConstraint 
{ 
};


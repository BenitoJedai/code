// replace any with dynamic?
// https://github.com/mrdoob/three.js/commit/fc70bb9ba7439148c10c9cb498793988d5cba899
// https://github.com/mrdoob/three.js/blob/fc70bb9ba7439148c10c9cb498793988d5cba899/build/three.js
// 67
// X:\jsc.svn\examples\javascript\WebGL\WebGLMTLExperiment\WebGLMTLExperiment\Application.cs
// "X:\opensource\github\three.js\build\three.js"


interface THREE
{ 
	static attribute THREE.ColorUtilsType ColorUtils; 
	static attribute THREE.ImageUtilsType ImageUtils; 
	static attribute THREE.AnimationHandlerType AnimationHandler; 
	static attribute THREE.GeometryUtilsType GeometryUtils; 
	static attribute THREE.MathType Math; 

	static attribute long DoubleSide; 


	// blending modes

	// enum Blending {} ?

	const long NoBlending = 0;
	const long NormalBlending = 1;
	const long AdditiveBlending = 2;
	const long SubtractiveBlending = 3;
	const long MultiplyBlending = 4;
	const long CustomBlending = 5;


	// enum colors?
	const long VertexColors = 2;
	const long FaceColors = 1;


	const long RepeatWrapping = 0;
	const long LinearMipMapLinearFilter = 8;

	const long BackSide = 1;
};

// this is an anonymous type actually
interface THREE.MathType
{ 
	double degToRad(double e);

};

// this is an anonymous type actually
interface THREE.GeometryUtilsType
{ 
	void merge(any x, any y);

};

// this is an anonymous type actually
interface THREE.ImageUtilsType
{ 
	// are we not better of with async/await functions?

	THREE.Texture loadTexture(any src);

	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLEarthByBjorn\WebGLEarthByBjorn\Application.cs
	THREE.Texture loadTexture(string src);
	THREE.Texture loadTexture(string src, any mapping, Function onLoad, Function onError);

	// loadTexture: function ( url, mapping, onLoad, onError ) {

};

[Constructor(),
	Constructor(html::HTMLImageElement c),
	Constructor(html::HTMLCanvasElement c)]
interface THREE.Texture
{ 

	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLEarthByBjorn\WebGLEarthByBjorn\Application.cs
	attribute html::HTMLImageElement image;
	attribute boolean needsUpdate;

	attribute THREE.Vector2 repeat;

	attribute long wrapS;
	attribute long wrapT;
	attribute long magFilter;
	attribute long minFilter;


	attribute int anisotropy;


};



// this is an anonymous type actually
interface THREE.ColorUtilsType
{ 
	// no longer available [Obsolete]
	void adjustHSV(long color, long x, long y, double z);

};

interface THREE.AnimationHandlerType
{ 
	void add(any data);
	void update(double delta);

};

interface THREE.Camera : THREE.Object3D
{
	attribute THREE.Matrix4  projectionMatrix;

	void lookAt(THREE.Vector3 target);
	void lookAt(any target);

};

[Constructor(double  left, double right, double top, double bottom, double near, double far)]
interface THREE.OrthographicCamera :  THREE.Camera 
{

};


// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLMD2MorphtargetExample\WebGLMD2MorphtargetExample\Application.cs
[Constructor(double fov, double aspect, double near, double far)]
interface THREE.PerspectiveCamera :  THREE.Camera 
{ 
	attribute double aspect; 

	void updateProjectionMatrix();

	void add(any e);

	attribute double  fov;
	attribute double  far;


	attribute THREE.Vector3  position;
	attribute THREE.Vector3  up;




};

[Constructor()]
interface THREE.Scene  : THREE.Object3D
{ 
	attribute any         fog;
	//attribute THREE.Fog         fog;

	//attribute THREE.Vector3  position;




	void add(any value);
	void remove(any value);
};



[Constructor(any parameters)]
interface THREE.ShaderMaterial 
{
	attribute any         uniforms;
};

[Constructor(long color)]
interface THREE.Color 
{ 
	THREE.Color  setRGB(double r,double g,double b);
	THREE.Color  clone();
	THREE.Color  multiply( THREE.Color c);

};


[Constructor(long x, long y)]
interface THREE.Plane 
{ 
};


// use dictionary instead? obsolete?
interface THREE.Raycaster_intersectObject
{
	attribute THREE.Vector3 point;
	attribute THREE.Mesh object;
};

[Constructor,
	Constructor(THREE.Vector3 position, THREE.Vector3 target)
]
interface THREE.Raycaster 
{ 
	//THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {
	
	void set(any position, any vec);
	sequence<THREE.Raycaster_intersectObject> intersectObject(THREE.Mesh position);

	// X:\jsc.svn\examples\javascript\WebGL\WebGLInteractiveCubes\WebGLInteractiveCubes\Application.cs
	sequence<THREE.Raycaster_intersectObject> intersectObjects(sequence<any> objects);

	sequence<THREE.Raycaster_intersectObject> intersectObjects(sequence<any> objects, boolean recursive);
};


[Constructor(long color, double a)]
interface THREE.FogExp2
{
};

[Constructor(long color, long y, long z)]
interface THREE.Fog 
{ 
	// tested by X:\jsc.svn\examples\javascript\WebGLClouds\WebGLClouds\Application.cs

	attribute long        near;
	attribute long        far;


	attribute long        color;

};




[Constructor(long x), Constructor(long x, double y)]
interface THREE.DirectionalLight 
{ 
	attribute boolean        castShadow;


	attribute THREE.Vector3  position;
};

[Constructor(long x),
	Constructor(long x, double y, long z)]
interface THREE.PointLight 
{ 
	attribute THREE.Vector3  position;
};

[Constructor(long x, double y, double z)]
interface THREE.HemisphereLight 
{ 
	attribute THREE.Vector3  position;
};


[Constructor(long x)]
interface THREE.AmbientLight 
{ 
};

[Constructor(long x)]
interface THREE.SpotLight 
{ 
	attribute THREE.Vector3  position;
	attribute THREE.Object3D target;

	attribute boolean        castShadow;

	attribute double        shadowCameraNear;
	attribute double        shadowCameraFar;
	attribute double        shadowCameraFov;

	attribute double        shadowMapBias;
	attribute double        shadowMapDarkness;

	attribute long        shadowMapWidth;
	attribute long        shadowMapHeight;
};

[Constructor(long x, long y), 
	Constructor(long x, long y, long z, long q)]
interface THREE.PlaneGeometry 
{ 
	attribute sequence<THREE.Vector3>        vertices;

	void applyMatrix(any value);
};


[Constructor(), Constructor(double x, double y)]
interface THREE.Vector2
{ 
	attribute double x; 
	attribute double y;

	THREE.Vector2  set(double x, double y);
};


[Constructor(), Constructor(double x, double y, double z)]
interface THREE.Euler 
{ 
};

[Constructor(), Constructor(double x, double y, double z)]
interface THREE.Vector3 
{ 
	attribute double x; 
	attribute double y;
	attribute double z;

	THREE.Vector3  fromArray ( sequence<double> array );

	THREE.Vector3  set(double x, double y, double z);

	void copy( THREE.Vector3  p);
	void copy( any  p);
	THREE.Vector3  sub( THREE.Vector3   p);

	THREE.Vector3 subSelf(any xyz);
	THREE.Vector3 normalize();

	THREE.Vector3 getPositionFromMatrix(any m);
	THREE.Vector3 multiplyScalar(double m);

	double length();
	double distanceTo(THREE.Vector3 v);

	THREE.Vector3 add(THREE.Vector3 v);
	THREE.Vector3 divideScalar(any s);

	THREE.Vector3 clone();
};

[Constructor(), Constructor(double x, double y, double z, double q)]
interface THREE.Vector4 
{ 
	attribute double x; 
	attribute double y;
	attribute double z;

	THREE.Vector4 applyMatrix4( THREE.Matrix4 m);
};

[Constructor()]
interface THREE.Matrix4 
{ 
	any makePerspective(double fov, double xy, long a, long b);
	any makeRotationX(double value);

	// https://github.com/chandlerprall/Physijs/issues/91
	// stop breaking your library guys!
	// tested by X:\jsc.svn\examples\javascript\synergy\webgl\WebGLBossHarvesterByOutsideOfSociety\WebGLBossHarvesterByOutsideOfSociety\Application.cs
	// yay. hit again. 2013-09-22
	any setRotationFromEuler(THREE.Euler vec3);
	any makeRotationFromEuler(THREE.Euler vec3);
	any lookAt(THREE.Vector3 x, THREE.Vector3 y, THREE.Vector3 z);
	any multiply(THREE.Matrix4 m);
	

	THREE.Matrix4 makeTranslation(double x, double y, double z);

	any setPosition(any vec3);
};

[Constructor(any x)]
interface THREE.MeshLambertMaterial 
{ 
	attribute long        color;
	attribute THREE.Texture map;
};

[Constructor()]
interface THREE.Object3D
{ 
	attribute boolean castShadow;
	attribute boolean receiveShadow;
	attribute boolean visible;


	attribute THREE.Object3D  parent;

	attribute long        id;


	attribute THREE.Matrix4  matrix;
	attribute THREE.Matrix4  matrixWorld;



	attribute THREE.Vector3  scale;
	attribute THREE.Vector3  position;
	attribute THREE.Vector3  rotation;
	attribute THREE.Quaternion  quaternion;

	void add(any mesh);
	void traverse(function<any> mesh);

	void updateMatrix();
};



[Constructor(any geometry, any material)]
interface THREE.Animation 
{ 
	attribute long        currentTime;

	void play();
};


[Constructor()]
interface THREE.Bone
{ 
	attribute THREE.Matrix4 skinMatrix;

	// object3D
	attribute sequence<THREE.Object3D>        children;
};



[Constructor(any mesh, any name)]
interface THREE.SkinnedMesh 
{ 
	attribute THREE.Vector3  rotation;
	attribute THREE.Vector3  position;


	attribute sequence<THREE.Bone>        bones;

};

[Constructor()]
interface THREE.Quaternion
{
	void copy( any  p);

};

[Constructor(any geometry), 
	Constructor(any geometry, any material)]
interface THREE.Mesh 
{ 
	// ? X:\jsc.svn\examples\javascript\WebGL\WebGLOBJExperiment\WebGLOBJExperiment\Application.cs
	attribute THREE.MeshBasicMaterial  material;

	attribute THREE.Vector3  rotation;
	attribute THREE.Vector3  position;
	attribute THREE.Vector3  scale;

	attribute THREE.Geometry geometry;
	attribute THREE.Quaternion quaternion;
	attribute boolean visible;

	attribute boolean        castShadow;
	attribute boolean        receiveShadow;
	attribute boolean        useQuaternion;

	void lookAt(THREE.Vector3 target);
};

[Constructor(any geometry, any material)]
interface THREE.MorphAnimMesh 
{
	attribute THREE.Vector3  position;
	attribute THREE.Vector3  rotation;
	attribute THREE.Vector3  scale;
	attribute long duration;
	attribute long time;
	attribute long currentKeyframe;

	attribute boolean castShadow;
	attribute boolean receiveShadow;

	void updateAnimation(double delta);
	void setFrameRange(long animMin, long animMax);

};

[Constructor(), Constructor(any args)]
interface THREE.WebGLRenderer 
{ 
	attribute boolean        shadowMapEnabled;
	attribute boolean        shadowMapSoft;
	attribute boolean        autoClear;

	attribute Element domElement;


	void setClearColorHex(long color);
	void setClearColor(long color, long h);
	void setClearColor(THREE.Color color);
	void setSize(long w, long h);
	void render(any scene, any camera);

	void clear();

	int getMaxAnisotropy();

};

[Constructor(), Constructor(any args)]
interface THREE.CanvasRenderer 
{ 
	attribute boolean        shadowMapEnabled;
	attribute boolean        shadowMapSoft;
	attribute boolean        autoClear;

	attribute Element domElement;


	void setClearColorHex(long color);
	void setClearColor(long color, long h);
	void setClearColor(THREE.Color color);
	void setSize(long w, long h);
	void render(any scene, any camera);

	void clear();

	int getMaxAnisotropy();

};

[Constructor(THREE.WebGLRenderer r)]
interface THREE.EffectComposer 
{ 
    // defined where?

	void addPass(any e);
	void render(double e);

};

[Constructor]
interface THREE.Geometry 
{ 
	attribute sequence<THREE.Vector3>        vertices;

	attribute sequence<THREE.Geometry>        faces;
	attribute sequence<THREE.Color>        vertexColors;

	// http://stackoverflow.com/questions/22348843/three-js-what-does-computecentroids-do
	// um. collada thingy wants to use computeCentroids.
};

[Constructor]
interface THREE.Face4 
{ 
	attribute THREE.Color        color;


};



[Constructor(double radius),
	Constructor(double size, double arg1, double arg2),
	Constructor(double size, double arg1, double arg2, double arg3, double arg4, double arg5),
	Constructor(double size, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)]
interface THREE.SphereGeometry 
{ 
	attribute sequence<THREE.Face4>        faces;

};

[Constructor(double size, double arg1, double arg2, double arg3)]
interface THREE.CylinderGeometry 
{ 
	void applyMatrix(any value);

};

//radius, segments, thetaStart, thetaLength

[Constructor(double radius, double segments)]
interface THREE.CircleGeometry 
{ 
	void applyMatrix(any value);

};


[Constructor()]
interface THREE.Projector 
{ 
	//this.pickingRay = function ( vector, camera ) {
	THREE.Raycaster pickingRay (any vector,any camera);
	void unprojectVector(any vector, any camera);
};




// X:\jsc.svn\examples\javascript\WebGL\WebGLInteractiveCubes\WebGLInteractiveCubes\Application.cs
[Constructor(double x, double y, double z)]
interface THREE.BoxGeometry : THREE.Geometry
{ 
};


// obsolete
[Constructor(double x, double y, double z),
	Constructor(double x, double y, double z, double cx, double cy, double cz)]
interface THREE.CubeGeometry 
{ 
	// array?
	attribute sequence<THREE.Face4>        faces;
	attribute sequence<sequence<sequence<THREE.Vector2>>>        faceVertexUvs;

	void applyMatrix(THREE.Matrix4 m);
};

[Constructor(any position, any n)]
interface THREE.Ray 
{ 
	attribute THREE.Vector3  direction;
};

[Constructor(any geometry, any material)]
interface THREE.ParticleSystem : THREE.Object3D
{ 
	attribute THREE.Vector3  position;

};

[Constructor(any a)]
interface THREE.Sprite 
{ 
	attribute THREE.Vector3  position;
	attribute double  rotation;

};

[Constructor()]
interface THREE.JSONLoader 
{ 
	//void load(any src, any handler);
	void load(any src, function<any> handler);


};




[Constructor()]
interface THREE.Material
{

};

[Constructor(any e)]
interface THREE.ParticleSystemMaterial : THREE.Material
{
	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLDNAByOutsideOfSociety\WebGLDNAByOutsideOfSociety\Application.cs
};


[Constructor()]
interface THREE.MeshFaceMaterial : THREE.Material
{ 


};

[Constructor(any e)]
interface THREE.MeshBasicMaterial : THREE.Material
{ 
	// X:\jsc.svn\examples\javascript\WebGL\WebGLOBJExperiment\WebGLOBJExperiment\Application.cs
	attribute THREE.Texture map;
	attribute THREE.Color color;
};


[Constructor(any e)]
interface THREE.MeshPhongMaterial : THREE.Material
{ 
	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLMD2MorphtargetExample\WebGLMD2MorphtargetExample\Application.cs
	attribute THREE.Texture map;
};
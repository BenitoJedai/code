// replace any with dynamic?
// https://github.com/mrdoob/three.js/commit/fc70bb9ba7439148c10c9cb498793988d5cba899
// https://github.com/mrdoob/three.js/blob/fc70bb9ba7439148c10c9cb498793988d5cba899/build/three.js
// 67
// 70
// X:\jsc.svn\examples\javascript\WebGL\WebGLMTLExperiment\WebGLMTLExperiment\Application.cs
// X:\jsc.svn\examples\javascript\WebGL\WebGLYomotsuMD2Model\WebGLYomotsuMD2Model\Application.cs
// "X:\opensource\github\three.js\build\three.js"
// https://sites.google.com/a/jsc-solutions.net/backlog/knowledge-base/2015/201501/20150127


// will the IDL compiler work as chrome app too?

static interface THREE
{
	static attribute string REVISION;


	// SHADOWING TYPES
	const long BasicShadowMap = 0;
	const long PCFShadowMap = 1;
	const long PCFSoftShadowMap = 2;


	const long FlatShading = 1;

	const long LineStrip = 0;
	const long LinePieces = 1;

	static attribute THREE.ColorUtilsType ColorUtils;
	static attribute THREE.ImageUtilsType ImageUtils;
	static attribute THREE.AnimationHandlerType AnimationHandler;
	static attribute THREE.GeometryUtilsType GeometryUtils;
	static attribute THREE.MathType Math;


	// File:src/renderers/shaders/ShaderLib.js
	static attribute THREE.ShaderLibType ShaderLib;

	// X:\jsc.svn\market\synergy\THREE\THREE\opensource\gihtub\three.js\build\THREE.ShaderGodRays.idl
	// JSON or dynamic instead?
	static attribute THREE.ShaderGodRaysType ShaderGodRays;

	// X:\jsc.svn\market\synergy\THREE\THREE\opensource\gihtub\three.js\build\shaders\THREE.HorizontalTiltShiftShader.idl
	static attribute THREE.HorizontalTiltShiftShaderType HorizontalTiltShiftShader;

	// X:\jsc.svn\market\synergy\THREE\THREE\opensource\gihtub\three.js\build\shaders\THREE.VerticalTiltShiftShader.idl
	static attribute THREE.VerticalTiltShiftShaderType VerticalTiltShiftShader;



	// X:\jsc.svn\market\synergy\THREE\THREE\opensource\gihtub\three.js\build\shaders\THREE.CopyShader.idl
	static attribute THREE.CopyShaderType CopyShader;

	// X:\jsc.svn\market\synergy\THREE\THREE\opensource\gihtub\three.js\build\shaders\THREE.BokehShader.idl
	// JSON or dynamic instead?
	static attribute THREE.BokehShaderType BokehShader;
	static attribute THREE.FilmShaderType FilmShader;



	// // File:src/renderers/shaders/UniformsUtils.js
	// would jsc allow to define the type inline here?
	static attribute THREE.UniformsUtilsType UniformsUtils;

	static attribute long DoubleSide;

	static attribute long LinearFilter;
	static attribute long RGBFormat;

	// X:\jsc.svn\examples\javascript\WebGL\WebGLTiltShift\WebGLTiltShift\Application.cs
	static attribute long RGBAFormat;


	// blending modes

	// enum Blending {} ?

	const long NoBlending = 0;
	const long NormalBlending = 1;
	const long AdditiveBlending = 2;
	const long SubtractiveBlending = 3;
	const long MultiplyBlending = 4;
	const long CustomBlending = 5;


	// enum colors?
	const long VertexColors = 2;
	const long FaceColors = 1;


	const long RepeatWrapping = 0;
	const long LinearMipMapLinearFilter = 8;

	const long BackSide = 1;
};

interface THREE.UniformsUtilsType
{
	any clone(any uniforms_src);
};

// x:\jsc.svn\examples\webgl\WebGLSpeedBlendCharacter\WebGLSpeedBlendCharacter\Application.cs
// dynamic anonymous type
// how can we do intellisense?
interface THREE.ShaderLibType
{
	getter any get(string index);
	//getter dynamic get(string index);

};

// this is an anonymous type actually
interface THREE.MathType
{
	double degToRad(double e);

};

// this is an anonymous type actually
interface THREE.GeometryUtilsType
{
	void merge(any x, any y);

};

// this is an anonymous type actually
interface THREE.ImageUtilsType
{
	// are we not better of with async/await functions?

	THREE.Texture loadTexture(any src);

	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLEarthByBjorn\WebGLEarthByBjorn\Application.cs
	THREE.Texture loadTexture(string src);
	THREE.Texture loadTexture(string src, any mapping, Function onLoad, Function onError);

	// loadTexture: function ( url, mapping, onLoad, onError ) {


	// x:\jsc.svn\examples\webgl\WebGLSpeedBlendCharacter\WebGLSpeedBlendCharacter\Application.cs
	// jsc could allow untyped params to be any?
	THREE.Texture loadTextureCube(string[] array, any mapping, Function onLoad, Function onError);
	THREE.Texture loadTextureCube(string[] array);
};



// File:src/textures/Texture.js
[Constructor(),
Constructor(html::HTMLImageElement c),
Constructor(html::HTMLCanvasElement c)]
interface THREE.Texture
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLSVGSprite\WebGLSVGSprite\Application.cs

	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLEarthByBjorn\WebGLEarthByBjorn\Application.cs
	attribute html::HTMLImageElement image;
	attribute boolean needsUpdate;

	attribute THREE.Vector2 repeat;

	attribute long wrapS;
	attribute long wrapT;
	attribute long magFilter;
	attribute long minFilter;


	attribute int anisotropy;


};



// this is an anonymous type actually
interface THREE.ColorUtilsType
{
	// no longer available [Obsolete]
	void adjustHSV(long color, long x, long y, double z);

};


// X:\jsc.svn\examples\javascript\webgl\WebGLBokehWithGeometry\WebGLBokehWithGeometry\Application.cs
// http://threejs.org/docs/#Reference/Extras.Animation/AnimationHandler
// // File:src/extras/animation/AnimationHandler.js
interface THREE.AnimationHandlerType
{
	void add(any data);
	void update(double delta);

};

// File:src/extras/animation/Animation.js
// http://threejs.org/docs/#Reference/Extras.Animation/Animation
[Constructor(any geometry, any material)]
interface THREE.Animation
{
	attribute long        currentTime;

	void play();
	void update(double delta);
};



interface THREE.Camera : THREE.Object3D
{
	attribute THREE.Matrix4  projectionMatrix;

	void lookAt(THREE.Vector3 target);
	void lookAt(any target);

};


// File:src/cameras/OrthographicCamera.js
// X:\jsc.svn\examples\javascript\WebGL\HeatZeekerRTSOrto\HeatZeekerRTSOrto\Application.cs
[Constructor(double  left, double right, double top, double bottom),
Constructor(double  left, double right, double top, double bottom, double near, double far)]
interface THREE.OrthographicCamera :  THREE.Camera
{
	attribute double  left;
	attribute double  right;
	attribute double  top;
	attribute double  bottom;

	void updateProjectionMatrix();
	attribute THREE.Vector3  up;
};




// File:src/cameras/PerspectiveCamera.js
// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLMD2MorphtargetExample\WebGLMD2MorphtargetExample\Application.cs
// http://threejs.org/docs/#Reference/Cameras/PerspectiveCamera
// "Camera with perspective projection."
// X:\jsc.svn\examples\javascript\WebGL\collada\WebGLRah66Comanche\WebGLRah66Comanche\Library\ZeProperties.cs
//[Constructor(attribute double fov, double aspect, double near, double far)]
[Constructor(double fov, double aspect, double near, double far)]
interface THREE.PerspectiveCamera :  THREE.Camera
{
	attribute double fov;
	attribute double aspect;
	attribute double near;
	attribute double far;

	void updateProjectionMatrix();

	//void add(any e);



	//attribute THREE.Vector3  position;
	//attribute THREE.Vector3  up;




};



// // File:src/scenes/Scene.js
[Constructor()]
interface THREE.Scene  : THREE.Object3D
{
	attribute any         fog;


	// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
	attribute THREE.Material         overrideMaterial;

	//attribute THREE.Fog         fog;

	//attribute THREE.Vector3  position;



	void add(any value);
	void remove(any value);
};



// X:\jsc.svn\examples\javascript\WebGL\WebGLOrthographicCamera\WebGLOrthographicCamera\Application.cs
[Constructor(any parameters)]
interface THREE.LineBasicMaterial
{
};





// File:src/objects/Line.js
[Constructor(any geometry, any material),
Constructor(any geometry, any material, any mode)]
//[Constructor(any geometry, any material)]
//[Constructor(any geometry, any material, any mode)]
interface THREE.Line  : THREE.Object3D
{
	// X:\jsc.svn\examples\javascript\WebGL\HeatZeekerRTSOrto\HeatZeekerRTSOrto\Application.cs

	//attribute long type;
	
	attribute THREE.Geometry geometry;
	attribute THREE.Material material;

	attribute int mode;
};



// File:src/materials/ShaderMaterial.js
[Constructor(any parameters)]
interface THREE.ShaderMaterial : THREE.Material
{
	attribute any         uniforms;
};



// File:src/math/Color.js
[Constructor(long color)]
interface THREE.Color
{
	attribute double r;
	attribute double g;
	attribute double b;

	THREE.Color  setRGB(double r,double g,double b);
	THREE.Color  clone();
	THREE.Color  multiply(THREE.Color c);

};


[Constructor(long x, long y)]
interface THREE.Plane
{
};


// use dictionary instead? obsolete?
interface THREE.Raycaster_intersectObject
{
	attribute THREE.Vector3 point;
	attribute THREE.Mesh object;
};

[Constructor,
Constructor(THREE.Vector3 position, THREE.Vector3 target)
]
interface THREE.Raycaster
{
	//THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {

	void set(any position, any vec);
	sequence<THREE.Raycaster_intersectObject> intersectObject(THREE.Mesh position);

	// X:\jsc.svn\examples\javascript\WebGL\WebGLInteractiveCubes\WebGLInteractiveCubes\Application.cs
	sequence<THREE.Raycaster_intersectObject> intersectObjects(sequence<any> objects);

	sequence<THREE.Raycaster_intersectObject> intersectObjects(sequence<any> objects, boolean recursive);
};


// File:src/scenes/FogExp2.js
[Constructor(long color, double a)]
interface THREE.FogExp2
{
};


// File:src/scenes/Fog.js
[Constructor(long color, long y, long z)]
interface THREE.Fog
{
	// tested by X:\jsc.svn\examples\javascript\WebGLClouds\WebGLClouds\Application.cs

	attribute long        near;
	attribute long        far;

	// X:\jsc.svn\examples\javascript\WebGL\WebGLDashedLines\WebGLDashedLines\Application.cs
	attribute THREE.Color        color;

};




// File:src/lights/Light.js
//[Constructor(), Constructor(attribute long color)]
[Constructor(), Constructor(long color)]
interface THREE.Light : THREE.Object3D
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLCelShader\WebGLCelShader\Application.cs
	attribute THREE.Color        color;
};


// File:src/lights/DirectionalLight.js
[Constructor(long x), Constructor(long x, double y)]
interface THREE.DirectionalLight : THREE.Light
{
	attribute boolean        castShadow;


	attribute THREE.Vector3  position;
};




// File:src/lights/PointLight.js
[Constructor(long x),
Constructor(long  color, double intensity),
Constructor(long  color, double intensity, long distance)]
interface THREE.PointLight : THREE.Light
{
	attribute THREE.Vector3  position;
};


// File:src/lights/HemisphereLight.js
[Constructor(long x, double y, double z)]
interface THREE.HemisphereLight : THREE.Light
{
	attribute THREE.Vector3  position;
};


// File:src/lights/AmbientLight.js
[Constructor(long x)]
interface THREE.AmbientLight : THREE.Light
{
};



// File:src/lights/SpotLight.js
[Constructor(long color), Constructor(long color, double intensity)]
interface THREE.SpotLight : THREE.Light
{
	attribute THREE.Vector3  position;
	attribute THREE.Object3D target;

	attribute boolean        castShadow;

	attribute double        shadowCameraNear;
	attribute double        shadowCameraFar;
	attribute double        shadowCameraFov;

	attribute double        shadowMapBias;
	attribute double        shadowMapDarkness;

	attribute long        shadowMapWidth;
	attribute long        shadowMapHeight;
};

[Constructor(long x, long y),
Constructor(long x, long y, long z, long q)]
interface THREE.PlaneGeometry
{
	attribute sequence<THREE.Vector3>        vertices;

	void applyMatrix(any value);
};



[Constructor(), Constructor(double x, double y)]
interface THREE.Vector2
{
	attribute double x;
	attribute double y;

	THREE.Vector2  set(double x, double y);
};


[Constructor(), Constructor(double x, double y, double z)]
interface THREE.Euler
{
};



// // File:src/math/Vector3.js
[Constructor(), Constructor(double x, double y, double z)]
interface THREE.Vector3
{
	attribute double x;
	attribute double y;
	attribute double z;

	THREE.Vector3  fromArray(sequence<double> array);

	THREE.Vector3  set(double x, double y, double z);

	// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
	THREE.Vector3 copy(THREE.Vector3  p);

	void copy(any  p);
	THREE.Vector3  sub(THREE.Vector3   p);

	THREE.Vector3 subSelf(any xyz);
	THREE.Vector3 normalize();

	THREE.Vector3 getPositionFromMatrix(any m);
	THREE.Vector3 multiplyScalar(double m);

	double length();
	double distanceTo(THREE.Vector3 v);

	THREE.Vector3 add(THREE.Vector3 v);
	THREE.Vector3 divideScalar(any s);

	THREE.Vector3 sub(any l, any r);
	THREE.Vector3 cross(THREE.Vector3 v);


	// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
	THREE.Vector3 project(THREE.PerspectiveCamera camera);

	THREE.Vector3 clone();
};

[Constructor(), Constructor(double x, double y, double z, double q)]
interface THREE.Vector4
{
	attribute double x;
	attribute double y;
	attribute double z;

	THREE.Vector4 applyMatrix4(THREE.Matrix4 m);
};



// File:src/math/Matrix4.js
[Constructor()]
interface THREE.Matrix4
{
	attribute sequence<double>        elements;
	

	any makePerspective(double fov, double xy, long a, long b);
	any makeRotationX(double value);

	// https://github.com/chandlerprall/Physijs/issues/91
	// stop breaking your library guys!
	// tested by X:\jsc.svn\examples\javascript\synergy\webgl\WebGLBossHarvesterByOutsideOfSociety\WebGLBossHarvesterByOutsideOfSociety\Application.cs
	// yay. hit again. 2013-09-22
	any setRotationFromEuler(THREE.Euler vec3);
	any makeRotationFromEuler(THREE.Euler vec3);
	any lookAt(THREE.Vector3 x, THREE.Vector3 y, THREE.Vector3 z);
	any multiply(THREE.Matrix4 m);


	THREE.Matrix4 makeTranslation(double x, double y, double z);
	THREE.Matrix4 makeTranslation(THREE.Vector3 y);

	THREE.Matrix4 multiplyVector3(THREE.Vector3 y);
	THREE.Matrix4 multiplyVector4(THREE.Vector4 y);

	THREE.Matrix4 identity();

	any setPosition(any vec3);
};






// http://threejs.org/docs/#Reference/Core/Object3D
// http://sharpkit.net/help/SharpKit.Three/THREE/Object3D/
// File:src/core/Object3D.js
[Constructor()]
interface THREE.Object3D
{
	attribute string name;
	attribute string type;

	attribute boolean castShadow;
	attribute boolean receiveShadow;
	attribute boolean visible;

	// X:\jsc.svn\examples\javascript\WebGL\HeatZeekerRTSOrto\HeatZeekerRTSOrto\Application.cs
	// indexer
	attribute sequence<THREE.Object3D> children;

	// operator +
	void add(any mesh);
	void remove(any mesh);

	attribute THREE.Object3D  parent;

	attribute long        id;


	attribute THREE.Matrix4  matrix;
	attribute THREE.Matrix4  matrixWorld;



	attribute THREE.Vector3  scale;
	attribute THREE.Vector3  position;
	attribute THREE.Vector3  rotation;
	attribute THREE.Quaternion  quaternion;

	// When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property
	attribute boolean        matrixAutoUpdate;
	attribute boolean        useQuaternion;


	attribute any        userData;



	// tested by?
	void traverse(function<any> mesh);

	void updateMatrix();
	void translateX(any delta);
	void translateY(any delta);
	void translateZ(any delta);


	string toJSON();
};

[Constructor()]
interface THREE.Group : THREE.Object3D
{
};


[Constructor()]
interface THREE.Bone : THREE.Object3D
{
	attribute THREE.Matrix4 skinMatrix;

};



[Constructor()]
interface THREE.Quaternion
{
	void copy(any  p);

};





//        Create Partial Type: THREE+SkinnedMesh
//0dc8:01:01 RewriteToAssembly error: System.NotSupportedException: Parent does not have a default constructor.The default constructor must be explicitly defined.

// File:src/objects/Mesh.js
// X:\jsc.svn\examples\javascript\WebGL\WebGLYomotsuTPS\WebGLYomotsuTPS\Application.cs
// http://threejs.org/docs/#Reference/Objects/Mesh
[Constructor(), Constructor(any geometry),
Constructor(any geometry, any material)]
interface THREE.Mesh : THREE.Object3D
{
	// ? X:\jsc.svn\examples\javascript\WebGL\WebGLOBJExperiment\WebGLOBJExperiment\Application.cs
	attribute THREE.MeshBasicMaterial  material;
	attribute THREE.Geometry geometry;



	void rotateOnAxis(THREE.Vector3 vect, double angle);
	void lookAt(THREE.Vector3 target);
};



// // File:src/objects/SkinnedMesh.js
[Constructor(), Constructor(any mesh, any name)]
interface THREE.SkinnedMesh :  THREE.Mesh
{


	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLBossHarvesterByOutsideOfSociety\WebGLBossHarvesterByOutsideOfSociety\Application.cs
	//attribute sequence<THREE.Bone>        bones;

};



// X:\jsc.svn\examples\javascript\WebGL\WebGLYomotsuMD2Model\WebGLYomotsuMD2Model\Application.cs
// File:src/objects/MorphAnimMesh.js
[Constructor(any geometry, any material)]
interface THREE.MorphAnimMesh  :  THREE.Mesh
{
	//attribute THREE.Vector3  position;
	//attribute THREE.Vector3  rotation;
	//attribute THREE.Vector3  scale;
	attribute long duration;
	attribute long time;
	attribute long currentKeyframe;

	//attribute boolean castShadow;
	//attribute boolean receiveShadow;

	void updateAnimation(double delta);
	void setFrameRange(long animMin, long animMax);

};

[Constructor(THREE.Object3D object, long color)]
interface THREE.BoundingBoxHelper :  THREE.Mesh
{
	void update();
};


// File:src/renderers/WebGLRenderer.js
// http://threejs.org/docs/#Reference/Renderers/WebGLRenderer
[Constructor(), Constructor(any args)]
interface THREE.WebGLRenderer
{
	// INodeConvertible?
	attribute Element domElement;

	attribute long shadowMapType;

	attribute boolean        shadowMapEnabled;
	attribute boolean        shadowMapSoft;
	attribute boolean        autoClear;
	attribute boolean        sortObjects;



	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLBossHarvesterByOutsideOfSociety\WebGLBossHarvesterByOutsideOfSociety\Application.cs
	// how do we communicate a method
	// was removed? make it a nop?
	// void setClearColorHex(long color);


	// X:\jsc.svn\examples\javascript\WebGL\WebGLOrthographicCamera\WebGLOrthographicCamera\Application.cs
	void setClearColor(long color);
	void setClearColor(long color, long h);

	void setClearColor(THREE.Color color);
	void setSize(long w, long h);

	void render(any scene, any camera);
	void render(any scene, any camera, THREE.WebGLRenderTarget target);

	// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
	void render(any scene, any camera, THREE.WebGLRenderTarget target, boolean forceClear);

	void setViewport(any a, any b, any c, any d);

	void clear();
	void clearTarget(THREE.WebGLRenderTarget renderTarget, boolean color, boolean depth, boolean stencil);

	int getMaxAnisotropy();


	void setScissor(double x, double y, double width, double height);
		void enableScissorTest(boolean enable);

};

// File:src/renderers/WebGLRenderTarget.js
[Constructor(long width, long height, any options)]
interface THREE.WebGLRenderTarget
{
	// since jsc can parse IDL, we could
	// start inserting ref comments here?
	// referenced by:
	// X:\jsc.svn\examples\javascript\WebGL\WebGLTiltShift\WebGLTiltShift\Application.cs
	void setSize(long width, long height);
};

[Constructor(), Constructor(any args)]
interface THREE.CanvasRenderer
{
	attribute boolean        shadowMapEnabled;
	attribute boolean        shadowMapSoft;
	attribute boolean        autoClear;

	attribute Element domElement;


	void setClearColorHex(long color);

	// X:\jsc.svn\examples\javascript\WebGL\WebGLOrthographicCamera\WebGLOrthographicCamera\Application.cs
	void setClearColor(long color);
	void setClearColor(long color, long h);

	void setClearColor(THREE.Color color);
	void setSize(long w, long h);
	void render(any scene, any camera);

	void clear();

	int getMaxAnisotropy();

};





[Constructor]
interface THREE.Sphere
{
	attribute double  radius;

};




// http://threejs.org/docs/#Reference/Core/Geometry
// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLCity\WebGLCity\Application.cs
// // File:src/core/Geometry.js
[Constructor]
interface THREE.Geometry
{
	attribute string type;

	attribute boolean dynamic;
	attribute boolean verticesNeedUpdate;

	attribute THREE.Sphere boundingSphere;

	// X:\jsc.svn\examples\javascript\WebGL\WebGLDashedLines\WebGLDashedLines\Application.cs
	attribute sequence<THREE.Vector3>        vertices;

	attribute sequence<THREE.Geometry>        faces;
	attribute sequence<THREE.Color>        vertexColors;
	attribute sequence<any>        morphTargets;
	
	// http://stackoverflow.com/questions/22348843/three-js-what-does-computecentroids-do
	// um. collada thingy wants to use computeCentroids.

	//merge: function(geometry, matrix, materialIndexOffset) {
	//void merge(any geometry, matrix, materialIndexOffset) {
	void merge(any geometry);

	void computeLineDistances();
};





// // File:src/core/BufferGeometry.js
[Constructor()]
interface THREE.BufferGeometry
{
	attribute any attributes;
	attribute sequence<any> drawcalls;
	any computeBoundingSphere();
};

[Constructor]
interface THREE.Face4
{
	attribute THREE.Color        color;


};

// File:src/extras/geometries/PlaneBufferGeometry.js
// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
[Constructor(long width, long height)]
interface THREE.PlaneBufferGeometry : THREE.BufferGeometry
{

};


[Constructor(double radius),
Constructor(double size, double arg1, double arg2),
Constructor(double size, double arg1, double arg2, double arg3, double arg4, double arg5),
Constructor(double size, double arg1, double arg2, double arg3, double arg4, double arg5, double arg6)]
interface THREE.SphereGeometry
{
	attribute sequence<THREE.Face4>        faces;

};

[Constructor(double size, double arg1, double arg2, double arg3)]
interface THREE.CylinderGeometry
{
	void applyMatrix(any value);

};

//radius, segments, thetaStart, thetaLength

// tested by?
[Constructor(double radius, double segments)]
interface THREE.CircleGeometry
{
	void applyMatrix(any value);

};


// X:\jsc.svn\examples\javascript\WebGL\WebGLCelShader\WebGLCelShader\Application.cs
// File:src/extras/geometries/TorusGeometry.js
[Constructor(double radius, double tube, double radialSegments, double tubularSegments)]
interface THREE.TorusGeometry :  THREE.Geometry
{

};


// tested by?
[Constructor(double radius, double tube, double radialSegments, double tubularSegments, double p, double q, double heightSegments)]
interface THREE.TorusKnotGeometry
{
	void applyMatrix(any value);
};

//THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {


[Constructor()]
interface THREE.Projector
{
	//this.pickingRay = function ( vector, camera ) {
	THREE.Raycaster pickingRay(any vector,any camera);
	void unprojectVector(any vector, any camera);
};




// X:\jsc.svn\examples\javascript\WebGL\WebGLInteractiveCubes\WebGLInteractiveCubes\Application.cs
[Constructor(double x, double y, double z)]
interface THREE.BoxGeometry : THREE.Geometry
{
};


// obsolete
[Constructor(double x, double y, double z),
Constructor(double x, double y, double z, double cx, double cy, double cz)]
interface THREE.CubeGeometry
{
	// array?
	attribute sequence<THREE.Face4>        faces;
	attribute sequence<sequence<sequence<THREE.Vector2>>>        faceVertexUvs;

	void applyMatrix(THREE.Matrix4 m);
};

[Constructor(any position, any n)]
interface THREE.Ray
{
	attribute THREE.Vector3  direction;
};

[Constructor(any geometry, any material)]
interface THREE.ParticleSystem : THREE.Object3D
{
	attribute THREE.Vector3  position;

};

// // File:src/objects/Sprite.js
[Constructor(any a)]
interface THREE.Sprite : THREE.Object3D
{
	// X:\jsc.svn\examples\javascript\webgl\WebGLVRCreativeLeadership\WebGLVRCreativeLeadership\Application.cs

	// attribute THREE.Vector3  position;
	// attribute double  rotation;

};



interface THREE.Loader
{

};


// File:src/loaders/ObjectLoader.js
// http://threejs.org/docs/#Reference/Loaders/ObjectLoader
[Constructor()]
interface THREE.ObjectLoader : THREE.Loader
{
	// x:\jsc.svn\examples\javascript\webgl\collada\webglrah66comanche\webglrah66comanche\library\zeproperties.cs
	THREE.Object3D parse(any json);
};

// File:src/loaders/JSONLoader.js
[Constructor()]
interface THREE.JSONLoader : THREE.Loader
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLInvade\WebGLInvade\Application.cs



	//void load(any src, any handler);
	void load(any url, function<any> callback);

	any parse(string json, string texturePath);

	// jsc does not yet do the Action<> 
	//void load(any src, function<any,any> handler);
	//loader.load("models/objects/ground.js", function(geometry, materials) {
};




// File:src/materials/Material.js
[Constructor()]
interface THREE.Material
{
	// set by initMaterial
	attribute any program;
	attribute any type;

};

// http://threejs.org/docs/#Reference/Materials/MeshLambertMaterial
[Constructor(any x)]
interface THREE.MeshLambertMaterial : THREE.Material
{
	attribute THREE.Color color;
	attribute THREE.Color ambient;
	attribute THREE.Color emissive;
	attribute THREE.Texture map;
};


// File:src/materials/SpriteMaterial.js
[Constructor(any parameters)]
interface THREE.SpriteMaterial : THREE.Material
{

};



// File:src/materials/MeshDepthMaterial.js
// x:\jsc.svn\examples\javascript\webgl\WebGLGodRay\WebGLGodRay\Application.cs
[Constructor()]
interface THREE.MeshDepthMaterial : THREE.Material
{

};


[Constructor(any e)]
interface THREE.ParticleSystemMaterial : THREE.Material
{
	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLDNAByOutsideOfSociety\WebGLDNAByOutsideOfSociety\Application.cs
};


// File:src/materials/MeshFaceMaterial.js
[Constructor, Constructor(any e)]
interface THREE.MeshFaceMaterial : THREE.Material
{
	attribute sequence<any> materials;

};

[Constructor(any e)]
interface THREE.MeshBasicMaterial : THREE.Material
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLOBJExperiment\WebGLOBJExperiment\Application.cs
	attribute THREE.Texture map;
	attribute THREE.Color color;
};


// http://threejs.org/docs/#Reference/Materials/MeshPhongMaterial
[Constructor(any e)]
interface THREE.MeshPhongMaterial : THREE.Material
{
	attribute THREE.Color color;
	attribute THREE.Color ambient;
	attribute THREE.Color specular;
	
	attribute double shininess;
	attribute boolean metal;


	// X:\jsc.svn\examples\javascript\synergy\webgl\WebGLMD2MorphtargetExample\WebGLMD2MorphtargetExample\Application.cs
	attribute THREE.Texture map;
};



// File:src/core/Clock.js
// x:\jsc.svn\examples\webgl\WebGLSpeedBlendCharacter\WebGLSpeedBlendCharacter\Application.cs
[Constructor()]
interface THREE.Clock
{
	double getDelta();

};



// File:src/math/Spline.js
[Constructor(any points)]
interface THREE.Spline
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLDashedLines\WebGLDashedLines\Application.cs

	THREE.Vector3 getPoint(double k);
};


// File:src/materials/LineDashedMaterial.js
[Constructor(any parameters)]
interface THREE.LineDashedMaterial : THREE.Material
{
	// X:\jsc.svn\examples\javascript\WebGL\WebGLDashedLines\WebGLDashedLines\Application.cs


};
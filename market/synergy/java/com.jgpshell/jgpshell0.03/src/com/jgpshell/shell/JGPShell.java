//$Id$

/**
 * Author : Moez Ben MBarka Moez
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/* Generated By:JavaCC: Do not edit this line. JGPShell.java */
package com.jgpshell.shell;

import java.io.InputStream;
import java.util.ArrayList;

public class JGPShell implements JGPShellConstants {

  private Command cmd ;

  private  String lastToken ;

  /* Return value */
  private int ret=909909 ;

  /* The last command read */
  private  String last_cmd = new String();

  /* The last variable name red */
  private String last_var = new String() ;

  /* The last param list */
  private ArrayList params = new ArrayList() ;

  /* false:the last_cmd is a global command, true: it is a card command*/
  private boolean is_card_cmd ;

  /* If it is true the current cmd will be ignored*/
  private boolean ignore = false ;



  private JGPShell parser ;



  public JGPShell(Command cmd){
        this.cmd=cmd;
  }

    /**
     * To parse one line command
     */
  public void parse_command(InputStream text) throws ParseException{
    parser = new JGPShell(text);

    parser.cmd=this.cmd ;
    parser.Command();
  }

    public void parse_program(InputStream text) throws ParseException {
        parser = new JGPShell(text);

        parser.cmd=this.cmd ;
        parser.Program();
    }


  /***********************************/
  /************* Accessors **********/

  public void add_param(String param){
      params.add(param) ;
   }

  public void init_params(){

      params.clear() ;
  }

  public ArrayList get_params(){
      return params ;
  }

  public String get_last_cmd(){
        return parser.last_cmd ;
  }

  private void set_last_cmd(String cmd){
        last_cmd=cmd;
        //System.out.println(cmd) ;
  }

  public boolean is_card_cmd(){
        return is_card_cmd ;
  }

  private void set_is_card_cmd(boolean is){
        is_card_cmd=is;
  }

  public int get_ret(){
        return parser.ret ;
  }

  public void set_last_var(String v){
      last_var=v;
  }

  public String get_last_var(){
      return last_var ;
  }

  public JGPShell get_parser() {
        return parser;
  }

  final public void Program() throws ParseException {
    Instructions();
    jj_consume_token(0);
  }

  final public void Instructions() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LS:
      case CONNECT:
      case SELECT:
      case EXIT:
      case SET:
      case REINIT:
      case ECHO:
      case LIST_VARS:
      case THREADS:
      case KILL:
      case RUN:
      case START:
      case END:
      case LS_C:
      case CLOSE:
      case INIT_UPDATE:
      case EXT_AUTH:
      case AUTHENTICATE:
      case SEND:
      case UPLOAD:
      case INSTALL:
      case DELETE:
      case FORMAT:
      case SELECT_C:
      case FOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Instruction();
    }
  }

  final public void Instruction() throws ParseException {
    if (!ignore)cmd.set_last_line(getToken(0).beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      Loop();
      break;
    case LS:
    case CONNECT:
    case SELECT:
    case EXIT:
    case SET:
    case REINIT:
    case ECHO:
    case LIST_VARS:
    case THREADS:
    case KILL:
    case RUN:
    case START:
    case END:
    case LS_C:
    case CLOSE:
    case INIT_UPDATE:
    case EXT_AUTH:
    case AUTHENTICATE:
    case SEND:
    case UPLOAD:
    case INSTALL:
    case DELETE:
    case FORMAT:
    case SELECT_C:
      Cmd();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Loop() throws ParseException {
    jj_consume_token(FOR);
          cmd.init_loop();
    jj_consume_token(TEXT);
           cmd.get_loop().set_var(Utils.delete_quotes(getToken(0).image));
    Identifiant();
                  cmd.get_loop().set_min(get_last_var());
    jj_consume_token(TO);
    Identifiant();
                                                                               cmd.get_loop().set_max(get_last_var());
    LoopBloc();
  }

  final public void LoopBloc() throws ParseException {
    jj_consume_token(BRACE_O);
               cmd.get_loop().set_loop_code_begin(getToken(0).endLine, getToken(0).endColumn);
         ignore =true ; /* instructions must not be executed before the end of the bloc*/
    Instructions();
    jj_consume_token(BRACE_C);
                  ignore=false; ret=cmd.get_loop().process(getToken(0).endLine, getToken(0).endColumn);
  }

  final public void Loop_subject() throws ParseException {
    jj_consume_token(READER);
  }

  final public void Identifiant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
          // This expansion is recommanded to be used only in the shell script grammar
        /* Create a temporary variable to store the int */
        set_last_var(cmd.create_var(Utils.delete_quotes(getToken(0).image)));
      break;
    case DOLLARD:
      Variable();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variable() throws ParseException {
    jj_consume_token(DOLLARD);
    jj_consume_token(TEXT);
                      set_last_var(Utils.delete_quotes(getToken(0).image));
  }

  final public void Command() throws ParseException {
    Cmd();
    jj_consume_token(0);
  }

  final public void Cmd() throws ParseException {
    Cmd_();
  }

  final public void Cmd_() throws ParseException {
set_last_cmd(getToken(1).image) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LS:
      jj_consume_token(LS);
              cmd.ls();
      break;
    case CONNECT:
      jj_consume_token(CONNECT);
      Connect_options();
      break;
    case SELECT:
      jj_consume_token(SELECT);
      Select_options();
      break;
    case EXIT:
      jj_consume_token(EXIT);
               cmd.exit();
      break;
    case SET:
      jj_consume_token(SET);
      Set_options();
      break;
    case REINIT:
      jj_consume_token(REINIT);
      Reinit_options();
      break;
    case ECHO:
      jj_consume_token(ECHO);
      Echo_options();
      break;
    case LIST_VARS:
      jj_consume_token(LIST_VARS);
      List_vars_options();
      break;
    case THREADS:
      jj_consume_token(THREADS);
      Threads_options();
      break;
    case KILL:
      jj_consume_token(KILL);
      Kill_options();
      break;
    case RUN:
      jj_consume_token(RUN);
      Run_options();
      break;
    case START:
      jj_consume_token(START);
      Start_options();
      break;
    case END:
      jj_consume_token(END);
      End_options();
      break;
    case INIT_UPDATE:
      jj_consume_token(INIT_UPDATE);
      Init_update_options();
      break;
    case EXT_AUTH:
      jj_consume_token(EXT_AUTH);
      Ext_auth_options();
      break;
    case AUTHENTICATE:
      jj_consume_token(AUTHENTICATE);
      Authenticate_options();
      break;
    case SEND:
      jj_consume_token(SEND);
      Send_options();
      break;
    case UPLOAD:
      jj_consume_token(UPLOAD);
      Upload_options();
      break;
    case INSTALL:
      jj_consume_token(INSTALL);
      Install_options();
      break;
    case DELETE:
      jj_consume_token(DELETE);
      Delete_options();
      break;
    case FORMAT:
      jj_consume_token(FORMAT);
      Format_options();
      break;
    case LS_C:
      jj_consume_token(LS_C);
      Ls_c_options();
      break;
    case SELECT_C:
      jj_consume_token(SELECT_C);
      Select_c_options();
      break;
    case CLOSE:
      jj_consume_token(CLOSE);
                ret=cmd.close();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Start_options() throws ParseException {
    init_params() ;
    Start_parameters();
    Start_options_();
  }

  final public void Start_parameters() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(45);
    }
             add_param(Utils.delete_quotes(getToken(0).image));
  }

  final public void Start_options_() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
           if (!ignore) ret=cmd.start_r_thread(Utils.delete_quotes(getToken(0).image), get_params());
      break;
    case INT:
      jj_consume_token(INT);
          if (!ignore) ret=cmd.start_r_thread(Integer.parseInt(getToken(0).image), get_params());
      break;
    case DOLLARD:
      Variable();
                if (!ignore) ret=cmd.start_r_thread(cmd.get_session().get_int_variable(get_last_var()), get_params());
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void End_options() throws ParseException {
     if (!ignore) ret=cmd.end_r_thread();
  }

  final public void Run_options() throws ParseException {
    jj_consume_token(TEXT);
           if (!ignore) ret=cmd.run(Utils.delete_quotes(getToken(0).image));
  }

  final public void Threads_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
          if (!ignore) cmd.display_history_threads();
      break;
    default:
      jj_la1[6] = jj_gen;
          if (!ignore) cmd.display_running_threads();
    }
  }

  final public void Kill_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           if (!ignore) ret=cmd.kill_r_thread(Integer.parseInt(getToken(0).image));
      break;
    case DOLLARD:
      Variable();
                if (!ignore) ret=cmd.kill_r_thread(cmd.get_session().get_int_variable(get_last_var()));
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Connect_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           if (!ignore) ret=cmd.connect(Integer.parseInt(getToken(0).image));
      break;
    case TEXT:
      jj_consume_token(TEXT);
            if (!ignore) ret=cmd.connect(Utils.delete_quotes(getToken(0).image));
      break;
    case DOLLARD:
      Variable();
                if (!ignore) ret=cmd.connect(cmd.get_session().get_int_variable(get_last_var()));
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Select_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
                if (!ignore) ret=cmd.select(Utils.delete_quotes(getToken(0).image));
      break;
    case INT:
      jj_consume_token(INT);
               if (!ignore) ret=cmd.select(Integer.parseInt(getToken(0).image));
      break;
    case DOLLARD:
      Variable();
                    if (!ignore) ret=cmd.select(cmd.get_session().get_int_variable(get_last_var()));
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Init_update_options() throws ParseException {
        set_is_card_cmd(true) ;
         if (!ignore) ret=cmd.init_update() ;
  }

  final public void Ext_auth_options() throws ParseException {
        set_is_card_cmd(true) ;
         if (!ignore) ret=cmd.ext_auth() ;
  }

  final public void Authenticate_options() throws ParseException {
        set_is_card_cmd(true) ;
         if (!ignore) ret=cmd.authenticate() ;
  }

  final public void Send_options() throws ParseException {
        set_is_card_cmd(true) ;
    jj_consume_token(HEXA);
                if (!ignore) ret=cmd.send(Utils.delete_quotes(getToken(0).image));
  }

  final public void Upload_options() throws ParseException {
        set_is_card_cmd(true) ;
    jj_consume_token(TEXT);
                if (!ignore) ret=cmd.upload(Utils.delete_quotes(getToken(0).image));
  }

  final public void Install_options() throws ParseException {
        set_is_card_cmd(true) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
                if (!ignore) ret=cmd.install(Utils.delete_quotes(getToken(0).image));
      break;
    case AID:
      jj_consume_token(AID);
               if (!ignore) lastToken=getToken(0).image.substring(1);
      jj_consume_token(AID);
                       if (!ignore) ret=cmd.install(lastToken, getToken(0).image.substring(1));
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Delete_options() throws ParseException {
        set_is_card_cmd(true) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
                if (!ignore) ret=cmd.delete(Utils.delete_quotes(getToken(0).image));
      break;
    case AID:
      jj_consume_token(AID);
               if (!ignore) ret=cmd.delete_aid(getToken(0).image.substring(1));
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Format_options() throws ParseException {
        set_is_card_cmd(true) ;
         if (!ignore) ret=cmd.format() ;
  }

  final public void Ls_c_options() throws ParseException {
        set_is_card_cmd(true) ;
         if (!ignore) ret=cmd.ls_card();
  }

  final public void Select_c_options() throws ParseException {
        set_is_card_cmd(true) ;
    jj_consume_token(AID);
               if (!ignore) ret=cmd.select_aid(getToken(0).image.substring(1));
  }

  final public void Set_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOG:
      jj_consume_token(LOG);
      jj_consume_token(INT);
                     if (!ignore) ret=cmd.set_log(Integer.parseInt(getToken(0).image));
      break;
    case TEXT:
      jj_consume_token(TEXT);
               if (!ignore) lastToken=Utils.delete_quotes(getToken(0).image) ;
      jj_consume_token(TEXT);
                                                                                        if (!ignore) ret=cmd.set(lastToken, Utils.delete_quotes(getToken(0).image)) ;
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Reinit_options() throws ParseException {
        set_is_card_cmd(false) ;
         if (!ignore) ret=cmd.reinit();
  }

  final public void Echo_options() throws ParseException {
        set_is_card_cmd(false) ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
                if (!ignore) ret=cmd.echo(Utils.delete_quotes(getToken(0).image)) ;
      break;
    case DOLLARD:
      Variable();
                   if (!ignore) ret=cmd.echo_var(get_last_var()) ;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void List_vars_options() throws ParseException {
        set_is_card_cmd(false) ;
         if (!ignore) ret=cmd.list_vars();
  }

  public JGPShellTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xffffbfc0,0xffffbfc0,0x0,0x7fffbfc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x240,0x0,0x2000,0x1240,0x4000,0x240,0x1240,0x1240,0x1800,0x1800,0x1020,0x1040,};
   }

  public JGPShell(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JGPShellTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public JGPShell(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JGPShellTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public JGPShell(JGPShellTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(JGPShellTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[47];
    for (int i = 0; i < 47; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}



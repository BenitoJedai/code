//$Id$

/**
 * Author : Moez Ben MBarka Moez
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/* Generated By:JavaCC: Do not edit this line. JGPShellTokenManager.java */
package com.jgpshell.shell;
import java.io.InputStream;
import java.util.ArrayList;

public class JGPShellTokenManager implements JGPShellConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x23ffffffc0L) != 0L)
         {
            jjmatchedKind = 44;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x200100000L) != 0L)
            return 12;
         if ((active0 & 0x21ffefffc0L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 12;
         }
         return -1;
      case 2:
         if ((active0 & 0x20a0000040L) != 0L)
            return 12;
         if ((active0 & 0x15fefff80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return 12;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20a0400L) != 0L)
            return 12;
         if ((active0 & 0x17d65fb80L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 12;
         }
         return -1;
      case 4:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x211200L) != 0L)
            return 12;
         if ((active0 & 0x17d04a980L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 4;
            return 12;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x174040000L) != 0L)
            return 12;
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x9008980L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 12;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x8000900L) != 0L)
            return 12;
         if ((active0 & 0x1008080L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 12;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 12;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x8080L) != 0L)
            return 12;
         return -1;
      case 8:
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 12;
         }
         return -1;
      case 9:
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 12;
         }
         return -1;
      case 10:
         if ((active0 & 0x404000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
            return 12;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 35:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 36:
         return jjStopAtPos(0, 38);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x600000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0xfffc0L);
      case 59:
         return jjStopAtPos(0, 36);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xa0000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8400000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000100000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x42000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 123:
         return jjStopAtPos(0, 34);
      case 125:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 35:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x152081200L);
      case 104:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x202040L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8404000L);
      case 111:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x20a0000000L);
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 12);
         return jjMoveStringLiteralDfa2_0(active0, 0x40500L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4d00L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 12);
         break;
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x412000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x54000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200080L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x1840000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 12);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1001000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x8400000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2c800000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x101008100L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 12);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x880L);
      case 111:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 12);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x10002000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 12);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 12);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 12);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 12);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 12);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 12);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 12);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(7, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 12);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(10, 22);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 12);
         break;
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  else if ((0x400c00000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(12);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 5:
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x7ffc00100000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 34 && kind > 44)
                     kind = 44;
                  break;
               case 11:
                  if ((0x400c00000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7ffc00000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(12);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
               case 7:
                  if ((0x7eL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 11:
               case 12:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   9, 10, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\57\154\163", 
"\57\143\157\156\156\145\143\164", "\57\163\145\154\145\143\164", "\57\145\170\151\164", "\57\163\145\164", 
"\57\162\145\151\156\151\164", "\57\145\143\150\157", "\57\154\151\163\164\55\166\141\162\163", 
"\57\156\145\167\55\163\145\163\163\151\157\156", "\57\164\150\162\145\141\144\163", "\57\153\151\154\154", "\57\162\165\156", 
"\57\163\164\141\162\164", "\57\145\156\144", "\154\163", "\143\154\157\163\145", 
"\151\156\151\164\55\165\160\144\141\164\145", "\145\170\164\55\141\165\164\150", 
"\141\165\164\150\145\156\164\151\143\141\164\145", "\163\145\156\144", "\165\160\154\157\141\144", 
"\151\156\163\164\141\154\154", "\144\145\154\145\164\145", "\146\157\162\155\141\164", 
"\163\145\154\145\143\164", "\146\157\162", "\162\145\141\144\145\162", "\164\157", "\173", "\175", "\73", 
"\154\157\147", "\44", "\43", "\43\43", null, null, null, null, "\55\160", "\55\150", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[13];
private final int[] jjstateSet = new int[26];
protected char curChar;
public JGPShellTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JGPShellTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}



<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScriptCoreLibA</name>
    </assembly>
    <members>
        <member name="T:ScriptCoreLib.GoogleGadgetAttribute">
            <summary>
            Google Gadgets are simple HTML and JavaScript mini-applications served in iFrames that can be embedded in webpages and other apps.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.title">
            <summary>
              	Optional string that provides the title of the gadget. This title is displayed in the gadget title bar on iGoogle. If this string contains user preference substitution variables and you are planning to submit your gadget to the content directory, you should also provide a directory_title for directory display.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.directory_title">
            <summary>
            Optional string that provides the title that should be displayed for your gadget in the content directory. Should contain only the literal text to be displayed, not user preference substitution variables. This is because the content directory displays a static view of your gadget, and therefore can't perform the necessary substitution to produce a reasonable title. For example, if your gadget's title is "Friends for __UP_name__", the directory is not able to perform the substitution to provide a reasonable value for " __UP_name__". So you might set your directory_title to be simply "Friends".
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.title_url">
            <summary>
            Optional string that provides a URL that the gadget title links to. For example, you could link the title to a webpage related to the gadget.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.description">
            <summary>
            Optional string that describes the gadget.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author">
            <summary>
            Optional string that lists the author of the gadget.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_email">
            <summary>
            Optional string that provides the gadget author's email address. You can use any email system, but you should not use a personal email address because of spam. One approach is to use an email address of the form helensmith.feedback+coolgadget@gmail.com in your gadget spec. Gmail drops everything after the plus sign (+), so this email address is interpreted as helensmith.feedback@gmail.com.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_affiliation">
            <summary>
            Optional string such as "Google" that indicates the author's affiliation. This attribute is required for gadgets that are included in the content directory.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_location">
            <summary>
            The author's geographical location, such as "Mountain View , CA, USA ".
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.screenshot">
            <summary>
            Optional string that gives the URL of a gadget screenshot. This must be an image on a public web site that is not blocked by robots.txt. PNG is the preferred format, though GIF and JPG are also acceptable. Gadget screenshots should be 280 pixels wide. The height of the screenshot should be the "natural" height of the gadget when it's in use. For more discussion of screenshot guidelines, see Publishing to the Content Directory.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.thumbnail">
            <summary>
            Optional string that gives the URL of a gadget thumbnail. This must be an image on a public web site that is not blocked by robots.txt. PNG is the preferred format, though GIF and JPG are also acceptable. Gadget thumbnails should be 120x60 pixels. For more discussion of thumbnail guidelines, see Publishing to the Content Directory.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.height">
            <summary>
            Optional positive integer that specifies the height of the area in which the gadget runs. The default height is 200.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.width">
            <summary>
            Optional positive integer that specifies the width of the area in which the gadget runs. This setting only applies to syndicated gadgets. The default width is 320.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.scaling">
            <summary>
            Optional boolean that specifies whether the aspect ratio (height-to-width ratio) of the gadget is maintained when the browser is resized. Gadgets that can automatically scale vertically should set this to true, but gadgets which have a fixed height should set this to false. The default is true.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.scrolling">
            <summary>
            Optional boolean that provides vertical and/or horizontal scrollbars if the content exceeds the space provided. If false, then the content is clipped to the height and width provided (not that width is not configurable). The default is false.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.singleton">
            <summary>
            Optional boolean that specifies whether users can add a gadget multiple times from a directory. The default is true, meaning that by default, gadgets can only be added once. Directories can handle this attribute however they choose. For example, the content directory handles singleton="true" by graying out and displaying the text "Added" for gadgets that have already been added. Note that changes to this attribute may not be picked up by directories right away. This attribute doesn't prevent users from adding gadgets multiple times through the developer gadget or Add by URL. Consequently, you still need to write your gadget to support multiple instances.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_photo">
            <summary>
            For the authors page, a URL to a photo (70x100 PNG format preferred, but JPG/GIF are also supported).
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_aboutme">
            <summary>
            For the authors page, a statement about yourself (try to keep to ~500 characters).
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_link">
            <summary>
            For the authors page, a link to your website, blog, etc.
            </summary>
        </member>
        <member name="P:ScriptCoreLib.GoogleGadgetAttribute.author_quote">
            <summary>
            For the authors page, a quote you'd like to include (try to keep to ~300 characters).
            </summary>
        </member>
        <member name="T:ScriptCoreLib.SharedHelper">
            <summary>
            this class is shared among scriptcorelib assemblies 
            and provides pre runtime information, to build static
            files
            </summary>
        </member>
        <member name="M:ScriptCoreLib.SharedHelper.ModulesOf(System.Reflection.Assembly)">
            <summary>
            returns the names of the modules needed to run a assembly including a
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:ScriptCoreLib.ScriptImportsTypeAttribute">
            <summary>
            Defines an external type to be imported with current class definition. To be used with native source code injection.
            </summary>
        </member>
        <member name="T:ScriptCoreLib.Shared.ScriptResourcesAttribute">
            <summary>
            allows a project to have embedded resources, which are to be extracted on the compile time when jsc compiler is finished.
            Current implementation has a special folder called 'web' into which all output generated to. This means that the embedded resources should be within a folder called \web\ in your solution.
            </summary>
        </member>
        <member name="T:ScriptCoreLib.ScriptLanguageProviderAttribute">
            <summary>
            this attribut tells the compiler in what namespaces the classes marked with ScriptAttribute are eligible for cross compilation
            </summary>
        </member>
        <member name="T:ScriptCoreLib.ScriptType">
            <summary>
            A class can be marked to be translated into a target langage
            </summary>
        </member>
        <member name="T:ScriptCoreLib.ScriptNamespaceRenameAttribute">
            <summary>
            renames a native namespace
            </summary>
        </member>
        <member name="T:ScriptCoreLib.ScriptVersionAttribute">
            <summary>
            allows the compiler to detect wether it is out of date. If this value is higher than the one from the compiler the compile proccess fill halt with an error.
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.NotImplementedHere">
            <summary>
            When set to true, another class must define the implementation. This is useful when there is a shared class for several languages but its implementation varies within supported languages.
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.StringConcatOperator">
            <summary>
            provides inline concat operation / to be replaced with inline functions?
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.UseCompilerConstants">
            <summary>
            a constant is enclosed between { and }, also arguments are supported
            like {arg*}
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.PointerName">
            <summary>
            overides default pointer name definiton in c
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsSystemHeader">
            <summary>
            system headers will be inside &lt; and &gt;, as of user provided headers will be in qoutes
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.LibraryImport">
            <summary>
            defines a lib which will be called upon static constructor
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsNative">
            <summary>
            native class implementation is provided by runtime.
            body of a native method will never be emitted
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.ExternalTarget">
            <summary>
            if attached on a class, overrides new operator 
            (InternalConstructor can be set to true, but should 
            not be defined for external constructor specific signatures), 
            if attached to a static field then it overrides it
            renames static class
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.Implements">
            <summary>
            provides a way to redirect emthods
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.ImplementationType">
            <summary>
            global::System.IDisposable - csharp.IDisposableImplementation - null
            global::System.String - csharp.String - java.lang.String
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsPInvoke">
            <summary>
            used in java compiler as JNI needs methods be marked to be native
            function body should be compiled as JNI C++ Native library
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.NoExeptions">
            <summary>
            if set to true, the method will never be able to throw exceptions
            and all inner execptions will be caught and forgotten
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.InternalConstructor">
            <summary>
            setting this attruibute to true, tells the compiler, 
            it has no prototype and constructor code is relocated
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsArray">
            <summary>
            supports the ldlen opcode
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsArrayEnumerator">
            <summary>
            referenced type is the enumerator for the native array
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsDebugCode">
            <summary>
            param 0 is target
            param 1 is method
            params 2 - n are arguments to be passed
            </summary>
            public bool     IsInvokeMemberWrapper;
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.DefineAsStatic">
            <summary>
            defines a functionas out of bound member, which actually is a static member
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.DefineAsInstance">
            <summary>
            a static method is compiled as an instance method
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.NoDecoration">
            <summary>
            set this field to true, to prevent decoration
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.OptimizedCode">
            <summary>
            inline source code in native language.
            
            a constant is enclosed between { and }, also arguments are supported
            like {arg*}
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.InlineHTML">
            <summary>
            allows per assambly level html
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptAttribute.IsStringEnum">
            <summary>
            enum members get written as literals
            </summary>
        </member>
        <member name="M:ScriptCoreLib.ScriptAttribute.Of(System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="p">looks declaring types if not found at this type</param>
            <returns></returns>
        </member>
        <member name="P:ScriptCoreLib.ScriptAttribute.HasNoPrototype">
            <summary>
            instance members will not be declared when set to true, neither
            will prototype be declared.<br />
            System prototype might still exist
            </summary>
        </member>
        <member name="T:ScriptCoreLib.ScriptApplicationEntryPointAttribute">
            <summary>
            Will generate an entrypoint to this class with the default value of field 'DefaultData'
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptApplicationEntryPointAttribute.IsClickOnce">
            <summary>
            Application will be loaded from a href
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptApplicationEntryPointAttribute.Format">
            <summary>
            formats in which the data will be serialized and inserted inline into html document
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptApplicationEntryPointAttribute.DefaultFormat">
            <summary>
            Suffix on the filename will be omitted.
            </summary>
        </member>
        <member name="F:ScriptCoreLib.ScriptApplicationEntryPointAttribute.ScriptedLoading">
            <summary>
            script files are loaded dynamically
            </summary>
        </member>
        <member name="T:ScriptCoreLib.HexAttribute">
            <summary>
            Indicates that the integer value assigned to a parameter should be represented
            as an hex 
            </summary>
        </member>
    </members>
</doc>
